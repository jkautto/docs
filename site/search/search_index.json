{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DAI/PAI Documentation","text":"<p>Welcome to the comprehensive documentation for the DAI/PAI ecosystem - an AI-powered infrastructure and personal assistant system.</p>"},{"location":"#what-is-daipai","title":"What is DAI/PAI?","text":"<p>DAI (Development AI Infrastructure) and PAI (Personal AI Assistant) form an integrated ecosystem that manages infrastructure, automates tasks, and provides intelligent assistance.</p> <p>Quick Overview</p> <ul> <li>DAI: Builds and maintains technical systems, manages infrastructure</li> <li>PAI: Personal assistant handling daily tasks, monitoring, and interactions</li> <li>Integrated: Both systems work together seamlessly</li> <li>AI-Powered: Built for and by AI agents</li> </ul> <p>New AI Agent?</p> <p>Start with the Quick Start Guide for essential information about navigating and working with the DAI/PAI system.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Getting Started</p> <p>New to DAI/PAI? Start here for a quick introduction and setup guide.</p> <p> Getting Started Guide</p> </li> <li> <p> API Reference</p> <p>Complete API documentation for all services including Tools, Task, and PAI Web APIs.</p> <p> API Documentation</p> </li> <li> <p> Operations Manual</p> <p>Daily maintenance procedures, monitoring setup, and troubleshooting guides.</p> <p> Operations Guide</p> </li> <li> <p>:material-architecture:{ .lg .middle } System Architecture</p> <p>Deep dive into the technical architecture, infrastructure, and design decisions.</p> <p> Architecture Overview</p> </li> </ul>"},{"location":"#system-components","title":"System Components","text":""},{"location":"#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>Web Server: nginx-based routing and SSL termination</li> <li>Applications: Multiple services (auth, pastebin, browser-test, etc.)</li> <li>Documentation: This MkDocs site at docs.kaut.to</li> <li>Monitoring: Integrated logging and alerting</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> Secure: Multi-layer authentication and encryption</li> <li> Fast: Optimized for performance</li> <li> Modular: Microservices architecture</li> <li> AI-Native: Built for AI agent interaction</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"Section Description Architecture System design, infrastructure layout, technical decisions Guides Step-by-step tutorials and how-to guides Operations Maintenance procedures and troubleshooting API Reference Complete API documentation Applications Individual app documentation Context Library System state and context information Specifications Technical specifications and RFCs"},{"location":"#recent-updates","title":"Recent Updates","text":"<p>Documentation Migration</p> <p>This documentation has been migrated from multiple sources into a unified MkDocs site.  If you find any broken links or missing content, please report them.</p>"},{"location":"#whats-new","title":"What's New","text":"<ul> <li>\ud83d\udcda Unified Documentation: All docs now in one searchable location</li> <li>\ud83d\udd0d Enhanced Search: Full-text search across all documentation</li> <li>\ud83c\udf19 Dark Mode: Toggle between light and dark themes</li> <li>\ud83d\udcf1 Mobile Responsive: Optimized for all devices</li> <li>\ud83e\udd16 AI-Friendly: Structured for programmatic access</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Search: Use the search bar to find specific topics</li> <li>Navigation: Use the sidebar for browsing by category</li> <li>Edit: Click the edit button to suggest improvements</li> <li>Context: Check the Context Library for current system state</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This documentation is maintained by both human developers and AI agents. To contribute:</p> <ol> <li>Click the edit button on any page</li> <li>Make your changes</li> <li>Submit a pull request</li> <li>AI agents will review and merge approved changes</li> </ol> <p>AI Agent Notice</p> <p>This documentation system is designed to be read and updated by AI agents.  All content follows structured formats for optimal machine readability.</p>"},{"location":"quickstart/","title":"Quick Start for AI Agents","text":"<p>Welcome to the DAI/PAI ecosystem! This guide helps AI agents quickly understand and navigate the system.</p>"},{"location":"quickstart/#first-steps","title":"\ud83d\ude80 First Steps","text":""},{"location":"quickstart/#1-read-core-configuration","title":"1. Read Core Configuration","text":"<pre><code>cat /srv/CAG/core.json          # System paths, services, auth\ncat /srv/CLAUDE.md              # DAI agent instructions\ncat /srv/pai/CLAUDE.md          # PAI agent instructions\n</code></pre>"},{"location":"quickstart/#2-understand-your-role","title":"2. Understand Your Role","text":"<ul> <li>DAI: Development AI Infrastructure - builds and maintains systems</li> <li>PAI: Personal AI Assistant - handles daily tasks and monitoring</li> <li>You: Check your instructions to understand your specific role</li> </ul>"},{"location":"quickstart/#3-access-documentation","title":"3. Access Documentation","text":"<ul> <li>Web: https://docs.kaut.to (auth: kaut:to)</li> <li>Local: <code>/srv/apps/docs/docs/</code></li> <li>Search: <code>grep -r \"topic\" /srv/apps/docs/docs/</code></li> </ul>"},{"location":"quickstart/#essential-paths","title":"\ud83d\udcc1 Essential Paths","text":"<pre><code>/srv/                   # DAI infrastructure root\n/srv/pai/               # PAI system directory\n/srv/apps/              # Web applications\n/srv/jtools/            # CLI tools\n/srv/.env               # Environment variables\n/var/www/.env           # Additional env vars\n/srv/apps/docs/docs/    # Documentation source\n</code></pre>"},{"location":"quickstart/#authentication","title":"\ud83d\udd11 Authentication","text":""},{"location":"quickstart/#basic-auth-credentials","title":"Basic Auth Credentials","text":"<ul> <li>Admin: joni:Penacova (full access)</li> <li>Public: kaut:to (limited access)</li> </ul>"},{"location":"quickstart/#service-accounts","title":"Service Accounts","text":"<ul> <li>Google: <code>/srv/config/pai-service-account.json</code></li> <li>GitHub Token: In <code>/var/www/.env</code></li> <li>Slack Token: In <code>/srv/tokens/</code></li> </ul>"},{"location":"quickstart/#common-commands","title":"\ud83d\udee0\ufe0f Common Commands","text":""},{"location":"quickstart/#check-system-health","title":"Check System Health","text":"<pre><code># Service status\nsudo systemctl status pai-web kaut-api kaut-pastebin\n\n# View logs\nsudo journalctl -u pai-web -f\n\n# Check disk space\ndf -h /srv\n</code></pre>"},{"location":"quickstart/#update-documentation","title":"Update Documentation","text":"<pre><code># Edit documentation\nnano /srv/apps/docs/docs/[section]/[page].md\n\n# Rebuild site\ncd /srv/apps/docs\nsource venv/bin/activate\nmkdocs build\n</code></pre>"},{"location":"quickstart/#git-operations","title":"Git Operations","text":"<pre><code># Always commit with descriptive messages\ngit add .\ngit commit -m \"feat: add new feature\n\n- Detail what changed\n- Why it changed\"\ngit push\n</code></pre>"},{"location":"quickstart/#key-documentation","title":"\ud83d\udcda Key Documentation","text":""},{"location":"quickstart/#start-here","title":"Start Here","text":"<ol> <li>CAG Index - Knowledge base navigation</li> <li>Architecture Overview - System design</li> <li>Daily Maintenance - Routine tasks</li> </ol>"},{"location":"quickstart/#for-development","title":"For Development","text":"<ul> <li>API Documentation - Service APIs</li> <li>Specifications - Technical specs</li> <li>Implementation Guide - How to build</li> </ul>"},{"location":"quickstart/#for-operations","title":"For Operations","text":"<ul> <li>Troubleshooting - Common issues</li> <li>Emergency Procedures - Crisis response</li> <li>Monitoring - System health</li> </ul>"},{"location":"quickstart/#system-architecture","title":"\ud83c\udfd7\ufe0f System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           User Interface                 \u2502\n\u2502  (https://kaut.to, pb.kaut.to, etc)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Services                      \u2502\n\u2502  - PAI Web (8080)                       \u2502\n\u2502  - Task API (8001)                      \u2502\n\u2502  - Tools API (8002)                     \u2502\n\u2502  - Pastebin (8090)                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Infrastructure                   \u2502\n\u2502  - nginx (reverse proxy)                \u2502\n\u2502  - systemd (service management)         \u2502\n\u2502  - Git (version control)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"quickstart/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<ol> <li>Plan - Check specs in <code>/specs/</code></li> <li>Develop - Follow conventions in codebase</li> <li>Test - Verify functionality</li> <li>Document - Update relevant docs</li> <li>Commit - Use conventional commits</li> <li>Deploy - Follow deployment guides</li> </ol>"},{"location":"quickstart/#quick-actions","title":"\u26a1 Quick Actions","text":""},{"location":"quickstart/#need-to-find-something","title":"Need to find something?","text":"<pre><code># Search code\ngrep -r \"search_term\" /srv --include=\"*.py\"\n\n# Search docs\ngrep -r \"search_term\" /srv/apps/docs/docs\n\n# Find files\nfind /srv -name \"*pattern*\" -type f\n</code></pre>"},{"location":"quickstart/#need-to-fix-something","title":"Need to fix something?","text":"<ol> <li>Check Troubleshooting</li> <li>Look at recent commits: <code>git log --oneline -10</code></li> <li>Check service logs: <code>journalctl -u [service] -f</code></li> </ol>"},{"location":"quickstart/#need-to-add-something","title":"Need to add something?","text":"<ol> <li>Check existing patterns in codebase</li> <li>Follow the style guide</li> <li>Update documentation</li> <li>Test thoroughly</li> </ol>"},{"location":"quickstart/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"quickstart/#always","title":"Always","text":"<ul> <li>\u2705 Read existing code before writing new code</li> <li>\u2705 Follow established patterns</li> <li>\u2705 Document as you go</li> <li>\u2705 Commit frequently with clear messages</li> <li>\u2705 Test before deploying</li> </ul>"},{"location":"quickstart/#never","title":"Never","text":"<ul> <li>\u274c Hardcode credentials (use .env files)</li> <li>\u274c Skip documentation updates</li> <li>\u274c Make breaking changes without planning</li> <li>\u274c Ignore error messages</li> <li>\u274c Work without understanding context</li> </ul>"},{"location":"quickstart/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ol> <li>Check Documentation: Start with search</li> <li>Review Logs: Often contain the answer</li> <li>Check Recent Changes: <code>git log</code> may reveal issues</li> <li>Read Context: CAG files have accumulated wisdom</li> </ol>"},{"location":"quickstart/#next-steps","title":"\ud83d\udea6 Next Steps","text":"<ol> <li>Read your specific role instructions (CLAUDE.md or GEMINI.md)</li> <li>Explore the CAG System</li> <li>Review Current Context</li> <li>Check Active Projects</li> </ol> <p>Pro Tip</p> <p>The CAG (Core Agent Gateway) is your knowledge base. When in doubt, start with <code>/srv/CAG/core.json</code> for system configuration and <code>/srv/CAG/index.md</code> for navigation.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The kaut.to ecosystem provides several RESTful APIs for programmatic access to various services. All APIs use JSON for data exchange and require authentication.</p>"},{"location":"api/#available-apis","title":"Available APIs","text":""},{"location":"api/#shifts-api","title":"Shifts API","text":"<p>Base URL: <code>https://kaut.to/api/shifts</code> Port: 8003 Authentication: Basic Auth</p> <p>Manage shift schedules for teams across multiple projects.</p> <p>Key Features: - CRUD operations for shift schedules - File-based JSON storage - Atomic writes for data integrity - Support for multiple projects</p> <p>Endpoints: - <code>GET /schedules</code> - List all schedules - <code>GET /schedules?year=Y&amp;month=M&amp;project=P</code> - Get specific schedule - <code>POST /schedules</code> - Create new schedule - <code>PUT /schedules</code> - Update schedule - <code>DELETE /schedules?year=Y&amp;month=M&amp;project=P</code> - Delete schedule</p>"},{"location":"api/#tools-api","title":"Tools API","text":"<p>Base URL: <code>https://kaut.to/api</code> Port: 8002 Authentication: Basic Auth</p> <p>Access to jtools functionality via API.</p> <p>Key Features: - Perplexity AI search integration - Web content fetching - Screenshot generation - URL processing</p> <p>Endpoints: - <code>POST /search</code> - Perplexity search - <code>POST /fetch</code> - Fetch and process URLs - <code>GET /status</code> - API health check</p>"},{"location":"api/#task-api","title":"Task API","text":"<p>Base URL: <code>http://localhost:8001</code> Port: 8001 Authentication: None (localhost only)</p> <p>Task management and Google Tasks integration.</p> <p>Key Features: - Task CRUD operations - Project management - Google Tasks sync - Priority and status tracking</p> <p>Endpoints: - <code>GET /tasks</code> - List all tasks - <code>POST /tasks</code> - Create new task - <code>PUT /tasks/:id</code> - Update task - <code>DELETE /tasks/:id</code> - Delete task - <code>GET /projects</code> - List projects</p>"},{"location":"api/#pai-web-api","title":"PAI Web API","text":"<p>Base URL: <code>https://kaut.to/api/pai</code> Port: 8080 Authentication: Basic Auth</p> <p>Backend for PAI dashboard and integrations.</p> <p>Key Features: - Real-time status updates - Email monitoring stats - System health metrics - Claude CLI integration</p> <p>Endpoints: - <code>GET /status</code> - System status - <code>GET /emails/unread</code> - Unread email count - <code>POST /claude/message</code> - Send to Claude - <code>GET /metrics</code> - System metrics</p>"},{"location":"api/#common-patterns","title":"Common Patterns","text":""},{"location":"api/#authentication","title":"Authentication","text":"<p>Most APIs use Basic Authentication:</p> <pre><code># Using curl\ncurl -u username:password https://kaut.to/api/endpoint\n\n# Using JavaScript\nconst auth = btoa('username:password');\nfetch('https://kaut.to/api/endpoint', {\n  headers: {\n    'Authorization': `Basic ${auth}`\n  }\n});\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>All APIs return consistent error responses:</p> <pre><code>{\n  \"error\": \"Error message\",\n  \"code\": \"ERROR_CODE\",\n  \"details\": {}\n}\n</code></pre> <p>Common HTTP status codes: - <code>200</code> - Success - <code>201</code> - Created - <code>400</code> - Bad Request - <code>401</code> - Unauthorized - <code>404</code> - Not Found - <code>409</code> - Conflict - <code>500</code> - Internal Server Error</p>"},{"location":"api/#requestresponse-format","title":"Request/Response Format","text":"<p>All APIs use JSON:</p> <pre><code># Request\ncurl -X POST https://kaut.to/api/endpoint \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"key\": \"value\"}'\n\n# Response\n{\n  \"status\": \"success\",\n  \"data\": {}\n}\n</code></pre>"},{"location":"api/#best-practices","title":"Best Practices","text":""},{"location":"api/#1-rate-limiting","title":"1. Rate Limiting","text":"<ul> <li>Be mindful of API usage</li> <li>Implement exponential backoff</li> <li>Cache responses when possible</li> </ul>"},{"location":"api/#2-error-handling","title":"2. Error Handling","text":"<pre><code>try {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status}`);\n  }\n  const data = await response.json();\n} catch (error) {\n  console.error('API Error:', error);\n}\n</code></pre>"},{"location":"api/#3-data-validation","title":"3. Data Validation","text":"<p>Always validate data before sending: <pre><code>function validateData(data) {\n  // Check required fields\n  // Validate data types\n  // Ensure constraints are met\n}\n</code></pre></p>"},{"location":"api/#4-security","title":"4. Security","text":"<ul> <li>Never hardcode credentials</li> <li>Use environment variables</li> <li>Implement proper CORS policies</li> <li>Validate all inputs</li> </ul>"},{"location":"api/#api-development-guidelines","title":"API Development Guidelines","text":""},{"location":"api/#creating-new-apis","title":"Creating New APIs","text":"<ol> <li>Follow RESTful principles</li> <li>Use proper HTTP methods</li> <li>Return appropriate status codes</li> <li> <p>Keep endpoints predictable</p> </li> <li> <p>Documentation</p> </li> <li>Document all endpoints</li> <li>Provide examples</li> <li>List all parameters</li> <li> <p>Show error responses</p> </li> <li> <p>Consistency</p> </li> <li>Use consistent naming</li> <li>Standard error format</li> <li> <p>Common authentication</p> </li> <li> <p>Testing</p> </li> <li>Unit tests for all endpoints</li> <li>Integration tests</li> <li>Load testing for performance</li> </ol>"},{"location":"api/#versioning","title":"Versioning","text":"<p>Consider API versioning for breaking changes: - URL versioning: <code>/api/v2/endpoint</code> - Header versioning: <code>API-Version: 2</code> - Query parameter: <code>?version=2</code></p>"},{"location":"api/#quick-reference","title":"Quick Reference","text":"API Port Auth Primary Use Shifts 8003 Basic Shift scheduling Tools 8002 Basic AI tools access Task 8001 None Task management PAI Web 8080 Basic Dashboard backend"},{"location":"api/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview</li> <li>Authentication Guide</li> <li>Development Setup</li> <li>Security Best Practices</li> </ul>"},{"location":"api/github-cli-graphql-research/","title":"GitHub CLI and GraphQL API Research (2025)","text":""},{"location":"api/github-cli-graphql-research/#overview","title":"Overview","text":"<p>This document contains the latest research on GitHub CLI and GraphQL API, focusing on discussions, project boards V2, and common usage patterns.</p>"},{"location":"api/github-cli-graphql-research/#table-of-contents","title":"Table of Contents","text":"<ol> <li>GitHub CLI Discussions</li> <li>GitHub GraphQL API for Discussions</li> <li>GitHub Project Boards V2 GraphQL</li> <li>GitHub CLI GraphQL Examples</li> <li>Common Issues and Solutions</li> </ol>"},{"location":"api/github-cli-graphql-research/#github-cli-discussions","title":"GitHub CLI Discussions","text":""},{"location":"api/github-cli-graphql-research/#current-state-july-2025","title":"Current State (July 2025)","text":"<ul> <li>GitHub CLI fully supports core GitHub workflows in the terminal for issues, PRs, releases</li> <li>Active discussions forum at: https://github.com/cli/cli/discussions</li> <li>Community interest in expanding CLI support for GitHub Discussions</li> <li>Initial reservations by CLI team (2021) have shifted to acceptance of user requests</li> </ul>"},{"location":"api/github-cli-graphql-research/#key-points","title":"Key Points","text":"<ul> <li>Supports GitHub.com, GitHub Enterprise Cloud, and GitHub Enterprise Server</li> <li>Available on macOS, Windows, and Linux</li> <li>Installation via Homebrew, MacPorts, Scoop, Chocolatey</li> <li>Scripting capabilities with GitHub API</li> <li>Custom aliases for commands</li> </ul>"},{"location":"api/github-cli-graphql-research/#discussions-support-status","title":"Discussions Support Status","text":"<ul> <li>Limited native support for discussions via CLI</li> <li>Community proposals for:</li> <li>Updating discussion comment titles</li> <li>Better integration with GitHub Discussions</li> <li>Managing on-call logs and task updates from terminal</li> </ul>"},{"location":"api/github-cli-graphql-research/#github-graphql-api-for-discussions","title":"GitHub GraphQL API for Discussions","text":""},{"location":"api/github-cli-graphql-research/#features","title":"Features","text":"<ul> <li>Repository-Level Discussions: Full support</li> <li>Organization-Level Discussions: Not supported (no current plans)</li> <li>Authentication: Requires OAuth scopes for public/private repos</li> </ul>"},{"location":"api/github-cli-graphql-research/#key-mutations","title":"Key Mutations","text":""},{"location":"api/github-cli-graphql-research/#create-discussion","title":"Create Discussion","text":"<pre><code>mutation CreateDiscussion($input: CreateDiscussionInput!) {\n  createDiscussion(input: $input) {\n    discussion {\n      id\n      title\n      body\n      category {\n        name\n      }\n    }\n  }\n}\n</code></pre> <p>Required input fields: - <code>body</code>: Discussion content - <code>title</code>: Discussion title - <code>repositoryId</code>: Repository node ID - <code>categoryId</code>: Discussion category ID</p>"},{"location":"api/github-cli-graphql-research/#key-queries","title":"Key Queries","text":""},{"location":"api/github-cli-graphql-research/#query-repository-discussions","title":"Query Repository Discussions","text":"<pre><code>query GetDiscussions($owner: String!, $repo: String!) {\n  repository(owner: $owner, name: $repo) {\n    discussions(first: 10) {\n      nodes {\n        id\n        title\n        body\n        category {\n          name\n        }\n        author {\n          login\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/github-cli-graphql-research/#github-project-boards-v2-graphql","title":"GitHub Project Boards V2 GraphQL","text":""},{"location":"api/github-cli-graphql-research/#supported-operations","title":"Supported Operations","text":"Operation GraphQL API Support Notes List Project V2 board issues \u2705 Yes Via querying organization or repository projects by ID Add items to Project V2 \u2705 Yes Mutation <code>addProjectV2ItemById</code> Update item field values \u2705 Yes Mutation <code>updateProjectV2ItemFieldValue</code>, separate call Create/Edit iterations \u26a0\ufe0f Limited Edits are problematic; no straightforward mutation Create/Edit Project Views \u274c No No official API for creating/modifying views"},{"location":"api/github-cli-graphql-research/#key-mutations_1","title":"Key Mutations","text":""},{"location":"api/github-cli-graphql-research/#add-item-to-project","title":"Add Item to Project","text":"<pre><code>mutation AddProjectItem($projectId: ID!, $contentId: ID!) {\n  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {\n    item {\n      id\n    }\n  }\n}\n</code></pre>"},{"location":"api/github-cli-graphql-research/#update-project-item-field","title":"Update Project Item Field","text":"<pre><code>mutation UpdateProjectField($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {\n  updateProjectV2ItemFieldValue(input: {\n    projectId: $projectId\n    itemId: $itemId\n    fieldId: $fieldId\n    value: $value\n  }) {\n    projectV2Item {\n      id\n    }\n  }\n}\n</code></pre>"},{"location":"api/github-cli-graphql-research/#limitations","title":"Limitations","text":"<ul> <li>Cannot add and update items in same API call</li> <li>No API for creating/modifying project views (Tables, Boards, Roadmaps)</li> <li>Iteration management is problematic (requires workarounds)</li> </ul>"},{"location":"api/github-cli-graphql-research/#github-cli-graphql-examples","title":"GitHub CLI GraphQL Examples","text":""},{"location":"api/github-cli-graphql-research/#basic-query","title":"Basic Query","text":"<pre><code>gh api graphql -f query='\n  query {\n    viewer {\n      login\n      name\n    }\n  }\n'\n</code></pre>"},{"location":"api/github-cli-graphql-research/#query-with-variables","title":"Query with Variables","text":"<pre><code>gh api graphql -f query='\n  query($owner: String!, $repo: String!) {\n    repository(owner: $owner, name: $repo) {\n      issues(last: 5, states: OPEN) {\n        edges {\n          node {\n            title\n            url\n            state\n          }\n        }\n      }\n    }\n  }\n' -F owner='octocat' -F repo='hello-world'\n</code></pre>"},{"location":"api/github-cli-graphql-research/#query-from-file","title":"Query from File","text":"<pre><code># Save query to file\ncat &gt; my-query.gql &lt;&lt; 'EOF'\nquery($owner: String!, $repo: String!, $num: Int!) {\n  repository(owner: $owner, name: $repo) {\n    issues(first: $num, states: OPEN) {\n      totalCount\n      nodes {\n        title\n        number\n        state\n      }\n    }\n  }\n}\nEOF\n\n# Execute query\ngh api graphql --field query=@my-query.gql -F owner='cli' -F repo='cli' -F num=3\n</code></pre>"},{"location":"api/github-cli-graphql-research/#chaining-queries-with-shell-variables","title":"Chaining Queries with Shell Variables","text":"<pre><code># Get issue ID\nISSUE_ID=$(gh api graphql -f query='\n  query($owner: String!, $repo: String!, $number: Int!) {\n    repository(owner: $owner, name: $repo) {\n      issue(number: $number) {\n        id\n      }\n    }\n  }\n' -F owner='owner' -F repo='repo' -F number=1 --jq '.data.repository.issue.id')\n\n# Use ID in another query\ngh api graphql -f query='\n  query($id: ID!) {\n    node(id: $id) {\n      ... on Issue {\n        title\n        body\n        comments(first: 5) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n    }\n  }\n' -F id=\"$ISSUE_ID\"\n</code></pre>"},{"location":"api/github-cli-graphql-research/#using-special-headers","title":"Using Special Headers","text":"<pre><code># For new-style IDs\ngh api graphql -H \"X-Github-Next-Global-ID: 1\" -f query='...'\n\n# For preview features\ngh api graphql -H \"GraphQL-Features: feature_name\" -f query='...'\n</code></pre>"},{"location":"api/github-cli-graphql-research/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"api/github-cli-graphql-research/#issue-1-pagination-with-graphql","title":"Issue 1: Pagination with GraphQL","text":"<p>Problem: GraphQL doesn't support <code>--paginate</code> flag like REST API Solution: Implement cursor-based pagination manually</p> <pre><code>gh api graphql -f query='\n  query($owner: String!, $repo: String!, $cursor: String) {\n    repository(owner: $owner, name: $repo) {\n      issues(first: 100, after: $cursor) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          title\n          number\n        }\n      }\n    }\n  }\n' -F owner='owner' -F repo='repo' -F cursor='null'\n</code></pre>"},{"location":"api/github-cli-graphql-research/#issue-2-complex-field-updates-in-projects-v2","title":"Issue 2: Complex Field Updates in Projects V2","text":"<p>Problem: Cannot add and update item in single call Solution: Use sequential mutations</p> <pre><code># First add the item\nITEM_ID=$(gh api graphql -f query='mutation...' --jq '.data.addProjectV2ItemById.item.id')\n\n# Then update fields\ngh api graphql -f query='mutation...' -F itemId=\"$ITEM_ID\"\n</code></pre>"},{"location":"api/github-cli-graphql-research/#issue-3-handling-graphql-errors","title":"Issue 3: Handling GraphQL Errors","text":"<p>Problem: GraphQL returns 200 OK even with errors Solution: Always check for errors in response</p> <pre><code>RESPONSE=$(gh api graphql -f query='...')\nif echo \"$RESPONSE\" | jq -e '.errors' &gt; /dev/null; then\n  echo \"GraphQL errors occurred:\"\n  echo \"$RESPONSE\" | jq '.errors'\n  exit 1\nfi\n</code></pre>"},{"location":"api/github-cli-graphql-research/#issue-4-finding-node-ids","title":"Issue 4: Finding Node IDs","text":"<p>Problem: Many GraphQL operations require node IDs Solution: Use REST API or GraphQL queries to get IDs</p> <pre><code># Get repository ID\nREPO_ID=$(gh api graphql -f query='\n  query($owner: String!, $repo: String!) {\n    repository(owner: $owner, name: $repo) {\n      id\n    }\n  }\n' -F owner='owner' -F repo='repo' --jq '.data.repository.id')\n\n# Get project ID\nPROJECT_ID=$(gh api graphql -f query='\n  query($org: String!, $number: Int!) {\n    organization(login: $org) {\n      projectV2(number: $number) {\n        id\n      }\n    }\n  }\n' -F org='org' -F number=1 --jq '.data.organization.projectV2.id')\n</code></pre>"},{"location":"api/github-cli-graphql-research/#best-practices","title":"Best Practices","text":"<ol> <li>Use Query Files: Store complex queries in <code>.gql</code> files for maintainability</li> <li>Handle Errors: Always check for GraphQL errors in responses</li> <li>Use Variables: Pass dynamic values as variables, not string interpolation</li> <li>Batch Operations: Use single queries to fetch multiple related resources</li> <li>Cache IDs: Store frequently used node IDs to avoid repeated lookups</li> <li>Test in Explorer: Use GitHub's GraphQL Explorer before implementing in CLI</li> </ol>"},{"location":"api/github-cli-graphql-research/#resources","title":"Resources","text":"<ul> <li>GitHub GraphQL Explorer</li> <li>GitHub CLI Documentation</li> <li>GitHub GraphQL API Documentation</li> <li>GitHub CLI Discussions Forum</li> <li>GraphQL API for Discussions Guide</li> </ul> <p>Last updated: July 2025</p>"},{"location":"api/shifts/","title":"Shifts API Reference","text":""},{"location":"api/shifts/#overview","title":"Overview","text":"<p>The Shifts API provides programmatic access to shift scheduling data. It follows RESTful principles and uses JSON for data exchange.</p>"},{"location":"api/shifts/#base-information","title":"Base Information","text":"Property Value Base URL <code>https://kaut.to/api/shifts</code> Protocol HTTPS Authentication Basic Auth Content-Type <code>application/json</code>"},{"location":"api/shifts/#authentication","title":"Authentication","text":"<p>All endpoints require Basic Authentication:</p> <pre><code># Using curl\ncurl -u joni:Penacova https://kaut.to/api/shifts/schedules\n\n# Using JavaScript\nconst auth = btoa('joni:Penacova');\nfetch('https://kaut.to/api/shifts/schedules', {\n  headers: {\n    'Authorization': `Basic ${auth}`\n  }\n});\n</code></pre>"},{"location":"api/shifts/#data-models","title":"Data Models","text":""},{"location":"api/shifts/#schedule-object","title":"Schedule Object","text":"<pre><code>interface Schedule {\n  year: number;\n  month: number;\n  project: string;\n  data: ScheduleData;\n}\n\ninterface ScheduleData {\n  [personName: string]: ShiftType[];\n}\n\ntype ShiftType = 'W' | 'R' | 'X' | 'O';\n</code></pre>"},{"location":"api/shifts/#shift-types","title":"Shift Types","text":"Code Type Description <code>W</code> Working Regular on-site work shift <code>R</code> R-Duty Remote work duty <code>X</code> Xwander Special assignment <code>O</code> Off Day off / Not working"},{"location":"api/shifts/#endpoints","title":"Endpoints","text":""},{"location":"api/shifts/#list-all-schedules","title":"List All Schedules","text":"<p>Returns a list of all available schedules.</p> <pre><code>GET /schedules\n</code></pre> <p>Response <code>200 OK</code>: <pre><code>[\n  {\n    \"year\": 2025,\n    \"month\": 7,\n    \"project\": \"ProjectSkyfire\"\n  },\n  {\n    \"year\": 2025,\n    \"month\": 8,\n    \"project\": \"ProjectKaamanen\"\n  }\n]\n</code></pre></p> <p>Example: <pre><code>curl -u joni:Penacova https://kaut.to/api/shifts/schedules\n</code></pre></p>"},{"location":"api/shifts/#get-specific-schedule","title":"Get Specific Schedule","text":"<p>Retrieves schedule data for a specific year, month, and project.</p> <pre><code>GET /schedules?year={year}&amp;month={month}&amp;project={project}\n</code></pre> <p>Parameters: | Parameter | Type | Required | Description | |-----------|------|----------|-------------| | year | number | Yes | Year (e.g., 2025) | | month | number | Yes | Month (1-12) | | project | string | Yes | Project name |</p> <p>Response <code>200 OK</code>: <pre><code>{\n  \"Ossi\": [\"W\", \"W\", \"O\", \"R\", \"W\", ...],\n  \"Aleksi\": [\"O\", \"W\", \"W\", \"O\", \"R\", ...],\n  \"Jesse\": [\"R\", \"O\", \"W\", \"W\", \"X\", ...]\n}\n</code></pre></p> <p>Response <code>404 Not Found</code>: <pre><code>{\n  \"error\": \"Schedule not found\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -u joni:Penacova \\\n  \"https://kaut.to/api/shifts/schedules?year=2025&amp;month=7&amp;project=ProjectSkyfire\"\n</code></pre></p>"},{"location":"api/shifts/#create-new-schedule","title":"Create New Schedule","text":"<p>Creates a new schedule. Fails if schedule already exists.</p> <pre><code>POST /schedules\n</code></pre> <p>Request Body: <pre><code>{\n  \"year\": 2025,\n  \"month\": 9,\n  \"project\": \"NewProject\",\n  \"data\": {\n    \"Alice\": [\"W\", \"W\", \"R\", \"O\", \"X\"],\n    \"Bob\": [\"O\", \"W\", \"W\", \"R\", \"O\"]\n  }\n}\n</code></pre></p> <p>Response <code>201 Created</code>: <pre><code>{\n  \"message\": \"Schedule created successfully\"\n}\n</code></pre></p> <p>Response <code>400 Bad Request</code>: <pre><code>{\n  \"error\": \"Invalid schedule data\"\n}\n</code></pre></p> <p>Response <code>409 Conflict</code>: <pre><code>{\n  \"error\": \"Schedule already exists\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -u joni:Penacova \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"year\": 2025,\n    \"month\": 9,\n    \"project\": \"TestProject\",\n    \"data\": {\n      \"TestUser\": [\"W\", \"W\", \"O\", \"R\", \"X\"]\n    }\n  }' \\\n  https://kaut.to/api/shifts/schedules\n</code></pre></p>"},{"location":"api/shifts/#update-existing-schedule","title":"Update Existing Schedule","text":"<p>Updates an existing schedule. Creates new if doesn't exist.</p> <pre><code>PUT /schedules\n</code></pre> <p>Request Body: <pre><code>{\n  \"year\": 2025,\n  \"month\": 7,\n  \"project\": \"ProjectSkyfire\",\n  \"data\": {\n    \"Ossi\": [\"W\", \"W\", \"W\", \"W\", \"W\"],\n    \"Aleksi\": [\"R\", \"R\", \"R\", \"R\", \"R\"]\n  }\n}\n</code></pre></p> <p>Response <code>200 OK</code>: <pre><code>{\n  \"message\": \"Schedule updated successfully\"\n}\n</code></pre></p> <p>Response <code>201 Created</code>: <pre><code>{\n  \"message\": \"Schedule created successfully\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -u joni:Penacova \\\n  -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"year\": 2025,\n    \"month\": 7,\n    \"project\": \"ProjectSkyfire\",\n    \"data\": {\n      \"Ossi\": [\"R\", \"R\", \"R\", \"R\", \"R\"]\n    }\n  }' \\\n  https://kaut.to/api/shifts/schedules\n</code></pre></p>"},{"location":"api/shifts/#delete-schedule","title":"Delete Schedule","text":"<p>Deletes a specific schedule.</p> <pre><code>DELETE /schedules?year={year}&amp;month={month}&amp;project={project}\n</code></pre> <p>Parameters: | Parameter | Type | Required | Description | |-----------|------|----------|-------------| | year | number | Yes | Year | | month | number | Yes | Month | | project | string | Yes | Project name |</p> <p>Response <code>200 OK</code>: <pre><code>{\n  \"message\": \"Schedule deleted successfully\"\n}\n</code></pre></p> <p>Response <code>404 Not Found</code>: <pre><code>{\n  \"error\": \"Schedule not found\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -u joni:Penacova \\\n  -X DELETE \\\n  \"https://kaut.to/api/shifts/schedules?year=2025&amp;month=9&amp;project=TestProject\"\n</code></pre></p>"},{"location":"api/shifts/#error-responses","title":"Error Responses","text":""},{"location":"api/shifts/#authentication-error","title":"Authentication Error","text":"<p>Status: <code>401 Unauthorized</code> <pre><code>{\n  \"error\": \"Authentication required\"\n}\n</code></pre></p>"},{"location":"api/shifts/#bad-request","title":"Bad Request","text":"<p>Status: <code>400 Bad Request</code> <pre><code>{\n  \"error\": \"Missing required parameters\"\n}\n</code></pre></p>"},{"location":"api/shifts/#internal-server-error","title":"Internal Server Error","text":"<p>Status: <code>500 Internal Server Error</code> <pre><code>{\n  \"error\": \"Internal server error\"\n}\n</code></pre></p>"},{"location":"api/shifts/#usage-examples","title":"Usage Examples","text":""},{"location":"api/shifts/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>class ShiftsAPI {\n  constructor(username, password) {\n    this.baseURL = 'https://kaut.to/api/shifts';\n    this.auth = btoa(`${username}:${password}`);\n  }\n\n  async request(url, options = {}) {\n    const response = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        'Authorization': `Basic ${this.auth}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getSchedule(year, month, project) {\n    return this.request(`/schedules?year=${year}&amp;month=${month}&amp;project=${project}`);\n  }\n\n  async createSchedule(year, month, project, data) {\n    return this.request('/schedules', {\n      method: 'POST',\n      body: JSON.stringify({ year, month, project, data })\n    });\n  }\n\n  async updateSchedule(year, month, project, data) {\n    return this.request('/schedules', {\n      method: 'PUT',\n      body: JSON.stringify({ year, month, project, data })\n    });\n  }\n\n  async deleteSchedule(year, month, project) {\n    return this.request(`/schedules?year=${year}&amp;month=${month}&amp;project=${project}`, {\n      method: 'DELETE'\n    });\n  }\n}\n\n// Usage\nconst api = new ShiftsAPI('joni', 'Penacova');\n\n// Get schedule\nconst schedule = await api.getSchedule(2025, 7, 'ProjectSkyfire');\nconsole.log(schedule);\n\n// Update schedule\nawait api.updateSchedule(2025, 7, 'ProjectSkyfire', {\n  'Ossi': ['W', 'W', 'R', 'O', 'X']\n});\n</code></pre>"},{"location":"api/shifts/#python","title":"Python","text":"<pre><code>import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\n\nclass ShiftsAPI:\n    def __init__(self, username='joni', password='Penacova'):\n        self.base_url = 'https://kaut.to/api/shifts'\n        self.auth = HTTPBasicAuth(username, password)\n\n    def get_schedule(self, year, month, project):\n        params = {'year': year, 'month': month, 'project': project}\n        response = requests.get(\n            f'{self.base_url}/schedules',\n            params=params,\n            auth=self.auth\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def create_schedule(self, year, month, project, data):\n        payload = {\n            'year': year,\n            'month': month,\n            'project': project,\n            'data': data\n        }\n        response = requests.post(\n            f'{self.base_url}/schedules',\n            json=payload,\n            auth=self.auth\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def update_schedule(self, year, month, project, data):\n        payload = {\n            'year': year,\n            'month': month,\n            'project': project,\n            'data': data\n        }\n        response = requests.put(\n            f'{self.base_url}/schedules',\n            json=payload,\n            auth=self.auth\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage\napi = ShiftsAPI()\n\n# Get schedule\nschedule = api.get_schedule(2025, 7, 'ProjectSkyfire')\nprint(json.dumps(schedule, indent=2))\n\n# Update someone's schedule\napi.update_schedule(2025, 7, 'ProjectSkyfire', {\n    'Ossi': ['W'] * 30 + ['O'] * 45  # 30 days work, 45 days off\n})\n</code></pre>"},{"location":"api/shifts/#best-practices","title":"Best Practices","text":""},{"location":"api/shifts/#error-handling","title":"Error Handling","text":"<p>Always implement proper error handling for network and API errors:</p> <pre><code>try {\n  const schedule = await api.getSchedule(2025, 7, 'ProjectSkyfire');\n} catch (error) {\n  if (error.message.includes('404')) {\n    console.log('Schedule not found');\n  } else if (error.message.includes('401')) {\n    console.log('Authentication failed');\n  } else {\n    console.error('Unexpected error:', error);\n  }\n}\n</code></pre>"},{"location":"api/shifts/#data-validation","title":"Data Validation","text":"<p>Validate shift data before sending:</p> <pre><code>function validateShiftData(data) {\n  const validShifts = ['W', 'R', 'X', 'O'];\n\n  for (const [person, shifts] of Object.entries(data)) {\n    if (!Array.isArray(shifts)) {\n      throw new Error(`Invalid shifts for ${person}: must be an array`);\n    }\n\n    for (const shift of shifts) {\n      if (!validShifts.includes(shift)) {\n        throw new Error(`Invalid shift type: ${shift}`);\n      }\n    }\n  }\n\n  return true;\n}\n</code></pre>"},{"location":"api/shifts/#rate-limiting","title":"Rate Limiting","text":"<p>Be mindful of API usage: - Cache responses when possible - Implement exponential backoff for retries - Batch operations when feasible</p>"},{"location":"api/shifts/#storage-details","title":"Storage Details","text":""},{"location":"api/shifts/#file-location","title":"File Location","text":"<p>Schedules are stored as JSON files: <pre><code>/srv/apps/shifts/data/schedules/YYYY-MM-ProjectName.json\n</code></pre></p>"},{"location":"api/shifts/#file-format","title":"File Format","text":"<pre><code>{\n  \"PersonName\": [\"shift1\", \"shift2\", \"shift3\", ...],\n  \"AnotherPerson\": [\"shift1\", \"shift2\", \"shift3\", ...]\n}\n</code></pre>"},{"location":"api/shifts/#atomic-writes","title":"Atomic Writes","text":"<p>The API uses atomic write operations (write to temp file, then rename) to prevent data corruption during concurrent access.</p>"},{"location":"api/shifts/#related-documentation","title":"Related Documentation","text":"<ul> <li>Shifts Application Overview</li> <li>Authentication Guide</li> <li>API Overview</li> <li>GitHub Repository</li> </ul>"},{"location":"applications/","title":"Applications","text":"<p>This section documents the various applications and tools in the kaut.to ecosystem.</p>"},{"location":"applications/#core-tools","title":"Core Tools","text":""},{"location":"applications/#jtools-testing-toolkit","title":"JTools Testing Toolkit","text":"<p>Unified testing framework for all jtools components supporting Python, JavaScript, and Bash tests.</p>"},{"location":"applications/#jtools-suite","title":"JTools Suite","text":"<p>Command-line tools for productivity:</p> <ul> <li>jcommit - Conventional commit helper</li> <li>px - Perplexity AI search integration</li> <li>ft - Web content fetcher with screenshot capability</li> <li>gtask - Google Tasks CLI</li> </ul>"},{"location":"applications/#web-applications","title":"Web Applications","text":""},{"location":"applications/#shifts-schedule-manager","title":"Shifts Schedule Manager","text":"<p>Web-based shift scheduling application with: - Visual grid interface - Multiple shift types (W, R, X, O) - Export functionality - File-based storage backend</p>"},{"location":"applications/#pai-dashboard","title":"PAI Dashboard","text":"<p>Personal AI Assistant web interface featuring: - Task management - Email monitoring - System status - Real-time updates</p>"},{"location":"applications/#kautto-pastebin","title":"Kaut.to Pastebin","text":"<p>Secure file and text sharing service: - String/text snippets - File uploads - URL shortening - Basic authentication</p>"},{"location":"applications/#backend-services","title":"Backend Services","text":""},{"location":"applications/#task-api","title":"Task API","text":"<p>RESTful API service for task management: - Port: 8001 - Endpoints: /tasks, /projects - Google Tasks integration</p>"},{"location":"applications/#tools-api","title":"Tools API","text":"<p>API service for jtools functionality: - Port: 8002 - Perplexity search endpoint - Fetch service endpoint</p>"},{"location":"applications/#shifts-backend","title":"Shifts Backend","text":"<p>File-based storage for shifts application: - Port: 8003 - RESTful CRUD operations - JSON file storage</p>"},{"location":"applications/#system-services","title":"System Services","text":""},{"location":"applications/#morning-brief","title":"Morning Brief","text":"<p>Automated daily briefing system: - Runs at 6 AM daily - Email summary - Calendar events - Task overview</p>"},{"location":"applications/#email-monitor","title":"Email Monitor","text":"<p>Multi-account email monitoring: - Real-time inbox monitoring - Intelligent filtering - Slack notifications</p>"},{"location":"applications/#cookie-auth-service","title":"Cookie Auth Service","text":"<p>Centralized authentication portal: - Port: 8091 - Shared cookie management - Basic auth integration</p>"},{"location":"applications/#development-tools","title":"Development Tools","text":""},{"location":"applications/#mkdocs-documentation","title":"MkDocs Documentation","text":"<p>This documentation site powered by MkDocs Material: - Auto-build every 5 minutes - GitHub integration - Search functionality</p>"},{"location":"applications/#context-management-cag","title":"Context Management (CAG)","text":"<p>Cumulative Aggregated Guidance system: - Living knowledge documents - Structured configuration - AI-optimized context</p>"},{"location":"applications/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":""},{"location":"applications/#heartbeat-monitor","title":"Heartbeat Monitor","text":"<p>System health monitoring: - Service status checks - Uptime tracking - Alert notifications</p>"},{"location":"applications/#token-manager","title":"Token Manager","text":"<p>OAuth token management: - Automatic refresh - Multi-account support - Secure storage</p>"},{"location":"applications/#integration-points","title":"Integration Points","text":""},{"location":"applications/#pai-slack-bot","title":"PAI Slack Bot","text":"<p>Unified Slack bot with interactive UI: - Socket Mode real-time communication - Block Kit buttons and modals - Multi-channel logging - Claude CLI integration - Perplexity search</p>"},{"location":"applications/#google-workspace","title":"Google Workspace","text":"<p>Deep integration with Google services: - Gmail API - Google Tasks - Google Sheets - Service account authentication</p>"},{"location":"applications/#quick-links","title":"Quick Links","text":"<ul> <li>Architecture Overview</li> <li>Operations Guide</li> <li>API Documentation</li> <li>Development Guides</li> </ul>"},{"location":"applications/pai-helper-agents/","title":"PAI Helper Agents","text":""},{"location":"applications/pai-helper-agents/#overview","title":"Overview","text":"<p>PAI (Personal AI Assistant) utilizes specialized AI agents to handle complex, domain-specific tasks. These agents operate as intelligent sub-systems that can be invoked to perform specialized operations with full tool access and autonomous decision-making capabilities.</p>"},{"location":"applications/pai-helper-agents/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    subgraph \"PAI Core\"\n        MAIN[Main PAI Agent]\n    end\n\n    subgraph \"Helper Agents\"\n        ORG[Organizer Agent]\n        TRAVEL[Travel Concierge]\n        WEB[Web Monitor]\n        RESEARCH[Research Assistant]\n    end\n\n    subgraph \"Services\"\n        GCAL[Google Calendar]\n        GTASK[Google Tasks]\n        SLACK[Slack]\n        EMAIL[Email]\n    end\n\n    MAIN --&gt; ORG\n    MAIN --&gt; TRAVEL\n    MAIN --&gt; WEB\n    MAIN --&gt; RESEARCH\n\n    ORG --&gt; GCAL\n    ORG --&gt; GTASK\n    WEB --&gt; SLACK</code></pre>"},{"location":"applications/pai-helper-agents/#available-agents","title":"Available Agents","text":""},{"location":"applications/pai-helper-agents/#1-organizer-agent-formerly-task-calendar-toolkit-manager","title":"1. Organizer Agent (formerly task-calendar-toolkit-manager)","text":"<p>Purpose: Multi-account task and calendar management across personal and work Google accounts.</p> <p>Capabilities: - Manages tasks across multiple Google accounts (personal, xwander, accolade) - Creates, updates, and tracks calendar events - Detects scheduling conflicts between accounts - Builds and maintains task/calendar tooling - Implements intelligent routing based on context</p> <p>Invocation: <pre><code>Use the Organizer agent to:\n- \"Show me all my tasks for today across all accounts\"\n- \"Find conflicts between my personal and work calendars\"\n- \"Create a task in the appropriate account based on context\"\n</code></pre></p> <p>Key Features: - Multi-Account Support: Seamlessly manages personal@gmail.com, @xwander.fi, @accolade.fi - Context-Aware Routing: Automatically selects appropriate account based on keywords - Offline-First Design: Local SQLite database ensures tasks persist even without internet - Service Account Integration: Direct calendar access without OAuth complexity</p>"},{"location":"applications/pai-helper-agents/#2-travel-concierge-agent","title":"2. Travel Concierge Agent","text":"<p>Purpose: Comprehensive travel planning and flight research.</p> <p>Capabilities: - Searches for flight options across multiple airlines - Builds complete travel itineraries - Compares prices and routes - Handles complex multi-city trips - Creates travel comparison tools</p> <p>Invocation: <pre><code>Use the Travel Concierge agent to:\n- \"Find flights to Japan next month\"\n- \"Plan a 2-week trip through Southeast Asia\"\n- \"Compare flight prices across airlines for Helsinki to New York\"\n</code></pre></p>"},{"location":"applications/pai-helper-agents/#3-web-monitor-agent-web-monitor-scheduler","title":"3. Web Monitor Agent (web-monitor-scheduler)","text":"<p>Purpose: Monitors websites for changes and sends alerts via Slack.</p> <p>Capabilities: - Tracks specific websites for updates - Monitors product releases (e.g., Apple MacBook Pro) - Watches for event announcements (e.g., band tour dates) - Schedules regular checks based on importance - Sends alerts to appropriate Slack channels</p> <p>Configuration Example: <pre><code>{\n  \"monitors\": [\n    {\n      \"name\": \"Tool Band Tour 2025\",\n      \"targets\": [\"https://toolband.com/tour\"],\n      \"check_frequency\": \"daily\",\n      \"alert_channel\": \"#pai-notifications\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"applications/pai-helper-agents/#4-research-assistant-agent-planned","title":"4. Research Assistant Agent (planned)","text":"<p>Purpose: Deep research and information synthesis.</p> <p>Capabilities: - Comprehensive topic research - Cross-reference multiple sources - Generate detailed reports - Track evolving topics over time - Maintain research context</p>"},{"location":"applications/pai-helper-agents/#agent-invocation","title":"Agent Invocation","text":""},{"location":"applications/pai-helper-agents/#from-pai-main-agent","title":"From PAI Main Agent","text":"<pre><code># Agents are invoked using the Task tool\nresult = Task(\n    description=\"Check calendar conflicts\",\n    prompt=\"Find all scheduling conflicts next week\",\n    subagent_type=\"organizer\"  # or \"travel-concierge\", \"web-monitor\"\n)\n</code></pre>"},{"location":"applications/pai-helper-agents/#best-practices","title":"Best Practices","text":"<ol> <li>Use Specific Agents for Domain Tasks</li> <li>Organizer for tasks/calendar</li> <li>Travel for trip planning</li> <li> <p>Web Monitor for tracking updates</p> </li> <li> <p>Provide Clear Context</p> </li> <li>Include relevant account information</li> <li>Specify time ranges</li> <li> <p>Give examples when helpful</p> </li> <li> <p>Leverage Agent Specialization</p> </li> <li>Agents have deep domain knowledge</li> <li>Can handle complex multi-step operations</li> <li>Maintain context throughout task</li> </ol>"},{"location":"applications/pai-helper-agents/#integration-with-pai-ecosystem","title":"Integration with PAI Ecosystem","text":""},{"location":"applications/pai-helper-agents/#cron-integration","title":"Cron Integration","text":"<p>Helper agents are utilized by scheduled tasks:</p> <pre><code># Morning Brief uses Organizer for calendar analysis\n0 6 * * * /srv/pai/processors/morning_brief.sh\n\n# Batch Monitor may invoke agents for complex analysis\n*/20 8-17 * * * /srv/pai/monitoring/batch_monitor.py\n</code></pre>"},{"location":"applications/pai-helper-agents/#slack-notifications","title":"Slack Notifications","text":"<p>Agents can send alerts to different channels based on urgency: - #pai: Urgent items requiring immediate attention - #pai-notifications: Important updates - #pai-verbose: Detailed activity logs</p>"},{"location":"applications/pai-helper-agents/#data-access","title":"Data Access","text":"<p>Agents have access to: - Service accounts for API access - Local databases for persistence - Shared configuration files - Monitoring and logging systems</p>"},{"location":"applications/pai-helper-agents/#creating-new-helper-agents","title":"Creating New Helper Agents","text":""},{"location":"applications/pai-helper-agents/#agent-definition-format","title":"Agent Definition Format","text":"<p>Create at <code>/srv/pai/.claude/agents/[agent-name].md</code>:</p> <pre><code>name: agent-name\ndescription: |\n  Detailed description of agent purpose and capabilities.\n  Include example use cases and invocation patterns.\n</code></pre>"},{"location":"applications/pai-helper-agents/#agent-requirements","title":"Agent Requirements","text":"<ol> <li>Focused Purpose: Each agent should have a clear, specific domain</li> <li>Tool Access: Agents inherit tool access from main PAI</li> <li>Error Handling: Must gracefully handle failures</li> <li>Logging: Should log activities for debugging</li> <li>Documentation: Include usage examples</li> </ol>"},{"location":"applications/pai-helper-agents/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"applications/pai-helper-agents/#agent-performance","title":"Agent Performance","text":"<p>Monitor agent usage and performance: <pre><code># Check agent invocations\ngrep \"subagent_type\" /srv/pai/logs/agent_calls.log\n\n# Monitor errors\ngrep \"ERROR\" /srv/pai/logs/agents/*.log\n</code></pre></p>"},{"location":"applications/pai-helper-agents/#context-library","title":"Context Library","text":"<p>Agents maintain specialized knowledge in: <pre><code>/srv/pai/task_calendar_context/    # Organizer agent\n/srv/pai/travel_context/           # Travel agent\n/srv/pai/monitoring_context/       # Web Monitor\n</code></pre></p>"},{"location":"applications/pai-helper-agents/#future-enhancements","title":"Future Enhancements","text":""},{"location":"applications/pai-helper-agents/#planned-agents","title":"Planned Agents","text":"<ol> <li>Financial Assistant: Receipt processing, expense tracking</li> <li>Content Curator: News aggregation, industry monitoring</li> <li>Health Tracker: Fitness reminders, wellness monitoring</li> <li>Project Manager: GitHub integration, development tracking</li> </ol>"},{"location":"applications/pai-helper-agents/#agent-orchestration","title":"Agent Orchestration","text":"<p>Future capabilities: - Multi-agent collaboration - Agent-to-agent communication - Parallel task execution - Shared knowledge base</p>"},{"location":"applications/pai-helper-agents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/pai-helper-agents/#common-issues","title":"Common Issues","text":"<ol> <li>Agent Not Found</li> <li>Verify agent name in <code>/srv/pai/.claude/agents/</code></li> <li> <p>Check spelling of subagent_type</p> </li> <li> <p>Timeout Errors</p> </li> <li>Complex tasks may need extended timeout</li> <li> <p>Consider breaking into smaller tasks</p> </li> <li> <p>Authentication Failures</p> </li> <li>Check service account permissions</li> <li>Verify OAuth tokens are current</li> </ol>"},{"location":"applications/pai-helper-agents/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose logging: <pre><code>export PAI_AGENT_DEBUG=true\ntail -f /srv/pai/logs/agents/*.log\n</code></pre></p> <p>For agent development guidelines, see AI Agent Collaboration</p>"},{"location":"applications/shifts/","title":"Shifts Application","text":""},{"location":"applications/shifts/#overview","title":"Overview","text":"<p>The Shifts application is a modular shift scheduling system designed for managing team schedules across multiple projects. Built with a focus on simplicity and reliability, it provides an intuitive interface for scheduling work shifts, remote duties, and time off.</p> <p>Live URL: https://kaut.to/shifts/ Repository: https://github.com/jkautto/shifts Version: v2.1.0</p>"},{"location":"applications/shifts/#key-features","title":"Key Features","text":""},{"location":"applications/shifts/#current-features-v210","title":"Current Features (v2.1.0)","text":"<ul> <li>Interactive Grid Interface: Click-and-edit shift scheduling</li> <li>Paint Mode: Quick assignment of shifts by clicking and dragging</li> <li>Server-Side Storage: JSON file-based persistence with atomic writes</li> <li>API Backend: RESTful API with authentication</li> <li>Local Storage Fallback: Offline capability when server is unavailable</li> <li>Export Functionality: Download schedules as JSON</li> <li>Summary Calculations: Automatic shift counting and statistics</li> </ul>"},{"location":"applications/shifts/#architecture","title":"Architecture","text":"<pre><code>Frontend (Vanilla JS + Vite)\n    \u2193\nBackend API (Express.js)\n    \u2193\nFile Storage (JSON)\n</code></pre>"},{"location":"applications/shifts/#quick-start","title":"Quick Start","text":""},{"location":"applications/shifts/#using-the-application","title":"Using the Application","text":"<ol> <li>Access: Navigate to https://kaut.to/shifts/</li> <li>Authentication: Use basic auth (kaut:to) to access</li> <li>Select Project: Choose between Project Skyfire or Project Kaamanen</li> <li>Edit Shifts: </li> <li>Click any cell to edit</li> <li>Use paint mode for bulk assignments</li> <li>Keyboard shortcuts: W (Work), R (Remote), X (Special), O (Off)</li> <li>Save: Changes auto-save to server</li> </ol>"},{"location":"applications/shifts/#roles","title":"Roles","text":"<p>Project Skyfire - Captains: Ossi, Aleksi, Jesse - Hub Coordinators: Siiri, Mathilda</p> <p>Project Kaamanen - Captains: Joonas, Juhani, Aksu - Paramedics: Niina, Emilia</p>"},{"location":"applications/shifts/#shift-types","title":"Shift Types","text":"Code Type Description Color W Working Regular on-site shift Blue R R-Duty Remote work Green X Xwander Special assignment Purple O Off Day off Gray"},{"location":"applications/shifts/#technical-documentation","title":"Technical Documentation","text":""},{"location":"applications/shifts/#data-storage","title":"Data Storage","text":"<p>Schedules are stored as JSON files on the server:</p> <pre><code>/srv/apps/shifts/data/schedules/\n\u251c\u2500\u2500 2025-07-ProjectSkyfire.json\n\u251c\u2500\u2500 2025-08-ProjectKaamanen.json\n\u2514\u2500\u2500 ...\n</code></pre> <p>File Format: <pre><code>{\n  \"PersonName\": [\"W\", \"W\", \"O\", \"R\", \"X\", ...],\n  \"AnotherPerson\": [\"O\", \"W\", \"W\", \"R\", \"O\", ...]\n}\n</code></pre></p>"},{"location":"applications/shifts/#api-endpoints","title":"API Endpoints","text":"<p>Base URL: <code>http://localhost:8003/api</code></p> Method Endpoint Description GET <code>/schedules</code> List all schedules GET <code>/schedules?year=Y&amp;month=M&amp;project=P</code> Get specific schedule POST <code>/schedules</code> Create new schedule PUT <code>/schedules</code> Update existing schedule DELETE <code>/schedules?year=Y&amp;month=M&amp;project=P</code> Delete schedule <p>Authentication: Basic Auth (joni:Penacova)</p>"},{"location":"applications/shifts/#development-setup","title":"Development Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/jkautto/shifts.git\ncd shifts\n\n# Install dependencies\nnpm install\ncd backend &amp;&amp; npm install\n\n# Run development servers\nnpm run dev          # Frontend (port 5173)\ncd backend &amp;&amp; npm start  # Backend (port 8003)\n\n# Run tests\nnpm test\ncd backend &amp;&amp; npm test\n</code></pre>"},{"location":"applications/shifts/#architecture-details","title":"Architecture Details","text":""},{"location":"applications/shifts/#frontend-structure","title":"Frontend Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/      # UI components\n\u2502   \u251c\u2500\u2500 Schedule/   # Grid component\n\u2502   \u251c\u2500\u2500 Controls/   # Control panel\n\u2502   \u2514\u2500\u2500 Summary/    # Statistics\n\u251c\u2500\u2500 services/       # Business logic\n\u2502   \u251c\u2500\u2500 storage.js  # API/localStorage\n\u2502   \u2514\u2500\u2500 export.js   # Export functionality\n\u2514\u2500\u2500 config/         # Configuration\n</code></pre>"},{"location":"applications/shifts/#backend-structure","title":"Backend Structure","text":"<pre><code>backend/\n\u251c\u2500\u2500 api/            # REST endpoints\n\u251c\u2500\u2500 middleware/     # Auth middleware\n\u251c\u2500\u2500 services/       # Storage service\n\u2514\u2500\u2500 tests/          # Test suite\n</code></pre>"},{"location":"applications/shifts/#best-practices","title":"Best Practices","text":""},{"location":"applications/shifts/#data-integrity","title":"Data Integrity","text":"<ul> <li>Atomic Writes: Uses temp file + rename pattern</li> <li>Validation: Checks data structure before saving</li> <li>Fallback: LocalStorage when server unavailable</li> </ul>"},{"location":"applications/shifts/#performance","title":"Performance","text":"<ul> <li>Lightweight: ~2KB per schedule file</li> <li>Fast Loading: Direct file reads</li> <li>No Database: Eliminates overhead</li> </ul>"},{"location":"applications/shifts/#security","title":"Security","text":"<ul> <li>Authentication: Basic auth on all endpoints</li> <li>Path Sanitization: Prevents directory traversal</li> <li>Rate Limiting: Protects against abuse</li> </ul>"},{"location":"applications/shifts/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/shifts/#common-issues","title":"Common Issues","text":"<p>Blank screen in production: - CSS not imported in JavaScript (Vite requirement) - Solution: Import all CSS in <code>src/main.js</code> - Ensure nginx serves from <code>/dist/</code> directory - Check index.html references <code>/src/main.js</code> not built assets - Fix Node.js-only code with <code>typeof process !== 'undefined'</code> checks</p> <p>Schedule not saving: - Check backend is running (port 8003) - Verify authentication credentials - Check browser console for errors</p> <p>Data not loading: - Ensure file exists in data/schedules/ - Check file permissions - Verify JSON format is valid</p> <p>Paint mode not working: - Click paint button first to activate - Ensure JavaScript is enabled - Try refreshing the page</p>"},{"location":"applications/shifts/#debug-commands","title":"Debug Commands","text":"<pre><code># Check backend logs\nsudo journalctl -u shifts-backend -f\n\n# Verify data files\nls -la /srv/apps/shifts/data/schedules/\n\n# Test API directly\ncurl -u joni:Penacova http://localhost:8003/api/schedules\n\n# Check file contents\ncat /srv/apps/shifts/data/schedules/2025-07-ProjectSkyfire.json | jq\n</code></pre>"},{"location":"applications/shifts/#future-enhancements","title":"Future Enhancements","text":""},{"location":"applications/shifts/#planned-features","title":"Planned Features","text":"<ul> <li>Multi-user conflict resolution</li> <li>Real-time collaboration</li> <li>Mobile responsive design</li> <li>Backup rotation</li> <li>Auto-save with debouncing</li> <li>Import from CSV/Excel</li> <li>Shift templates</li> <li>Advanced reporting</li> </ul>"},{"location":"applications/shifts/#api-v2-considerations","title":"API v2 Considerations","text":"<ul> <li>GraphQL endpoint</li> <li>WebSocket for real-time updates</li> <li>JWT authentication</li> <li>Versioned API endpoints</li> </ul>"},{"location":"applications/shifts/#integration-points","title":"Integration Points","text":""},{"location":"applications/shifts/#with-pai-system","title":"With PAI System","text":"<ul> <li>Can be queried via PAI for schedule information</li> <li>Integrates with task management for shift-based tasks</li> <li>Available through PAI web dashboard</li> </ul>"},{"location":"applications/shifts/#with-other-tools","title":"With Other Tools","text":"<ul> <li>Export data for analysis in spreadsheets</li> <li>API can be consumed by other services</li> <li>Webhook notifications (planned)</li> </ul>"},{"location":"applications/shifts/#maintenance","title":"Maintenance","text":""},{"location":"applications/shifts/#regular-tasks","title":"Regular Tasks","text":"<ul> <li>Monitor disk usage in data/schedules/</li> <li>Backup schedule files weekly</li> <li>Review API logs for errors</li> <li>Update dependencies monthly</li> </ul>"},{"location":"applications/shifts/#backup-strategy","title":"Backup Strategy","text":"<pre><code># Manual backup\ncp -r /srv/apps/shifts/data/schedules /backup/shifts/$(date +%Y%m%d)\n\n# Automated backup (cron)\n0 2 * * * tar -czf /backup/shifts/shifts-$(date +\\%Y\\%m\\%d).tar.gz /srv/apps/shifts/data/schedules/\n</code></pre>"},{"location":"applications/shifts/#related-documentation","title":"Related Documentation","text":"<ul> <li>API Reference</li> <li>GitHub Workflow Guide</li> <li>Development Standards</li> <li>Testing Guide</li> </ul>"},{"location":"applications/slack-bot/","title":"PAI Slack Bot","text":""},{"location":"applications/slack-bot/#overview","title":"Overview","text":"<p>The PAI Slack Bot is a unified implementation providing an intelligent interface to PAI (Personal AI Assistant) through Slack. It uses Socket Mode for real-time bidirectional communication and features an interactive UI with Block Kit components.</p>"},{"location":"applications/slack-bot/#architecture","title":"Architecture","text":""},{"location":"applications/slack-bot/#core-components","title":"Core Components","text":"<pre><code>/srv/pai/\n\u251c\u2500\u2500 slack.py           # Main bot implementation\n\u251c\u2500\u2500 slack.sh           # Startup script with process management\n\u251c\u2500\u2500 .env.slack         # Bot tokens (Socket Mode)\n\u251c\u2500\u2500 .env              # Webhook URLs\n\u2514\u2500\u2500 logs/\n    \u2514\u2500\u2500 slack.log     # Bot activity logs\n</code></pre>"},{"location":"applications/slack-bot/#key-classes","title":"Key Classes","text":"<ul> <li><code>PAISlackBot</code> - Main bot class handling all Slack interactions</li> <li><code>Config</code> - Centralized configuration management</li> <li><code>Logger</code> - Multi-channel logging system with webhook fallback</li> <li><code>PAIInterface</code> - Claude CLI integration with session persistence</li> <li><code>UIBuilder</code> - Block Kit UI component factory</li> <li><code>UserRestrictions</code> - Access control (currently Joni only)</li> </ul>"},{"location":"applications/slack-bot/#features","title":"Features","text":""},{"location":"applications/slack-bot/#interactive-ui","title":"Interactive UI","text":"<p>The bot provides a rich interactive experience using Slack's Block Kit:</p> <ul> <li>Main Menu - Triggered by \"menu\", \"help\", \"?\" or empty message</li> <li>Action Buttons:</li> <li>\ud83d\udcc5 Today's Schedule - Shows calendar events</li> <li>\ud83d\udce7 Check Emails - Displays unread email summary</li> <li>\u2705 Show Tasks - Lists current tasks</li> <li>\ud83d\udd0d Research - Opens Perplexity AI search modal</li> <li>\ud83d\udcac Ask PAI - Direct question modal</li> </ul>"},{"location":"applications/slack-bot/#response-modes","title":"Response Modes","text":"<p>Configurable via <code>--mode</code> flag:</p> <ol> <li><code>pai-channel</code> (default) - Responds to all messages in #pai + DMs + mentions</li> <li><code>mentions-only</code> - Only responds to @mentions and DMs  </li> <li><code>all</code> - Responds to all messages in all channels (use carefully)</li> </ol>"},{"location":"applications/slack-bot/#claude-integration","title":"Claude Integration","text":"<p>Uses Claude CLI with intelligent session management:</p> <pre><code>/home/joni/.npm-global/bin/claude -c -p \"[Slack User: ID] message\" \\\n  --model sonnet \\\n  --append-system-prompt \"Format for Slack: *bold*, _italic_, :emoji:, \u2022 bullets\"\n</code></pre> <p>Features: - Directory-based sessions (<code>-c</code> flag) in <code>/srv/pai</code> - Context persistence across conversations - Slack-specific formatting via system prompt - Markdown to Slack syntax conversion</p>"},{"location":"applications/slack-bot/#multi-channel-logging","title":"Multi-Channel Logging","text":"<p>Verbose logging system with fallback mechanism:</p> <ol> <li>Channel API - Primary method for #pai-verbose</li> <li>Webhook Fallback - When channel not found or API fails</li> <li>Structured Logs - Color-coded by severity (INFO, WARNING, ERROR, DEBUG)</li> </ol>"},{"location":"applications/slack-bot/#configuration","title":"Configuration","text":""},{"location":"applications/slack-bot/#environment-variables","title":"Environment Variables","text":""},{"location":"applications/slack-bot/#envslack-required","title":"<code>.env.slack</code> (Required)","text":"<pre><code>SLACK_BOT_TOKEN=xoxb-...  # Bot User OAuth Token  \nSLACK_APP_TOKEN=xapp-...  # Socket Mode App Token\n</code></pre>"},{"location":"applications/slack-bot/#env-optional-webhooks","title":"<code>.env</code> (Optional Webhooks)","text":"<pre><code>SLACK_PAI_WEBHOOK=https://hooks.slack.com/...\nSLACK_PAI_VERBOSE_WEBHOOK=https://hooks.slack.com/...\nSLACK_PAI_NOTIFICATIONS_WEBHOOK=https://hooks.slack.com/...\n</code></pre>"},{"location":"applications/slack-bot/#slack-app-configuration","title":"Slack App Configuration","text":""},{"location":"applications/slack-bot/#required-bot-token-scopes","title":"Required Bot Token Scopes","text":"<ul> <li><code>app_mentions:read</code> - Read when bot is mentioned</li> <li><code>channels:history</code> - Read public channel messages</li> <li><code>channels:read</code> - List channels</li> <li><code>chat:write</code> - Send messages</li> <li><code>files:write</code> - Upload files</li> <li><code>groups:history</code> - Read private channel messages (#pai)</li> <li><code>groups:read</code> - List private channels</li> <li><code>im:history</code> - Read direct messages</li> <li><code>im:read</code> - List DM conversations</li> <li><code>im:write</code> - Send DMs</li> </ul>"},{"location":"applications/slack-bot/#event-subscriptions","title":"Event Subscriptions","text":"<p>Enable these in your Slack app settings: - <code>app_mention</code> - When bot is @mentioned - <code>message.channels</code> - Messages in public channels - <code>message.groups</code> - Messages in private channels - <code>message.im</code> - Direct messages</p>"},{"location":"applications/slack-bot/#socket-mode","title":"Socket Mode","text":"<ul> <li>Must be enabled for real-time events</li> <li>Requires App-Level Token with <code>connections:write</code> scope</li> <li>More reliable than Events API (no public URL needed)</li> </ul>"},{"location":"applications/slack-bot/#usage","title":"Usage","text":""},{"location":"applications/slack-bot/#starting-the-bot","title":"Starting the Bot","text":"<pre><code># Default mode (pai-channel)\ncd /srv/pai\n./slack.sh\n\n# With verbose logging\n./slack.sh --verbose\n\n# Run in background (daemon)\n./slack.sh --daemon\n\n# Specific mode\n./slack.sh --mode mentions-only\n</code></pre>"},{"location":"applications/slack-bot/#interacting-with-the-bot","title":"Interacting with the Bot","text":"<ol> <li>Show Menu: Type \"menu\", \"help\", \"?\" or send empty message</li> <li>Direct Questions: Just type naturally in #pai or DM</li> <li>Research: Click \ud83d\udd0d button, enter query in modal</li> <li>Quick Actions: Use buttons for calendar, emails, tasks</li> </ol>"},{"location":"applications/slack-bot/#process-management","title":"Process Management","text":"<p>The <code>slack.sh</code> script includes robust process management:</p> <pre><code># Automatically kills:\n- Existing slack.py processes\n- Old slack_v2* processes  \n- Processes from PID file\n- Any slack.*bot.*py variants\n\n# Verifies single instance after startup\n# Logs to /srv/pai/logs/slack.log\n</code></pre>"},{"location":"applications/slack-bot/#slack-message-formatting","title":"Slack Message Formatting","text":"<p>The bot automatically converts markdown to Slack syntax:</p> Markdown Slack Example <code>**text**</code> <code>*text*</code> bold <code>*text*</code> <code>_text_</code> italic <code>## Header</code> <code>*Header*</code> Header <code>- item</code> <code>\u2022 item</code> \u2022 bullet <code>:emoji:</code> <code>:emoji:</code> <p>This is handled by: 1. <code>--append-system-prompt</code> flag telling Claude to use Slack formatting 2. <code>markdown_to_slack()</code> function as fallback converter</p>"},{"location":"applications/slack-bot/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/slack-bot/#bot-not-responding","title":"Bot Not Responding","text":"<ol> <li> <p>Check Process:    <pre><code>ps aux | grep \"python3.*slack.py\" | grep -v grep\ncat /srv/pai/slack.pid\n</code></pre></p> </li> <li> <p>Verify Tokens:</p> </li> <li>App token must start with <code>xapp-</code> (not <code>xoxb-</code>)</li> <li>Bot token must start with <code>xoxb-</code></li> <li> <p>Socket Mode must be enabled</p> </li> <li> <p>Check Channel Access:</p> </li> <li>Bot must be invited to #pai channel</li> <li> <p>Event subscription for <code>message.groups</code> is critical</p> </li> <li> <p>Review Logs:    <pre><code>tail -f /srv/pai/logs/slack.log\n</code></pre></p> </li> </ol>"},{"location":"applications/slack-bot/#common-errors","title":"Common Errors","text":""},{"location":"applications/slack-bot/#event-loop-is-closed","title":"\"Event loop is closed\"","text":"<pre><code># Kill all processes and restart\npkill -f \"python.*slack\"\nrm -f /srv/pai/slack.pid\n./slack.sh --daemon\n</code></pre>"},{"location":"applications/slack-bot/#bot-receives-mentions-but-not-regular-messages","title":"Bot receives mentions but not regular messages","text":"<ul> <li>Check if bot is in #pai channel</li> <li>Verify <code>message.groups</code> event subscription</li> <li>Confirm channel ID matches (hardcoded: C08VA59A4CS)</li> </ul>"},{"location":"applications/slack-bot/#multiple-responses","title":"Multiple responses","text":"<ul> <li>Run <code>./slack.sh</code> which auto-kills duplicates</li> <li>Check for multiple bot instances</li> <li>Verify single PID in <code>/srv/pai/slack.pid</code></li> </ul>"},{"location":"applications/slack-bot/#advanced-features","title":"Advanced Features","text":""},{"location":"applications/slack-bot/#perplexity-search-integration","title":"Perplexity Search Integration","text":"<p>Accessed via Research button: <pre><code>async def search_perplexity(query):\n    cmd = ['python3', '/srv/jtools/px.py', '-r', query]\n    # Returns AI-powered search results with citations\n</code></pre></p>"},{"location":"applications/slack-bot/#session-persistence","title":"Session Persistence","text":"<p>Claude maintains conversation context: - Sessions tied to <code>/srv/pai</code> directory - Survives bot restarts - Accessible via <code>claude -c</code> flag</p>"},{"location":"applications/slack-bot/#user-restrictions","title":"User Restrictions","text":"<p>Currently limited to authorized users: <pre><code>ALLOWED_USER_IDS = [\"UGQR4AJNS\"]  # Joni's Slack ID\n</code></pre></p>"},{"location":"applications/slack-bot/#development","title":"Development","text":""},{"location":"applications/slack-bot/#adding-new-features","title":"Adding New Features","text":"<ol> <li>Add handler method to <code>PAISlackBot</code> class</li> <li>Register in <code>_register_handlers()</code></li> <li>Update <code>UIBuilder</code> for new UI components</li> <li>Test with verbose logging enabled</li> </ol>"},{"location":"applications/slack-bot/#testing","title":"Testing","text":"<pre><code># Test configuration\n./slack.sh --test\n\n# Run with debug output\n./slack.sh --debug --verbose\n\n# Monitor real-time logs\ntail -f /srv/pai/logs/slack.log\n</code></pre>"},{"location":"applications/slack-bot/#webhook-configuration","title":"Webhook Configuration","text":"<p>For reliable system notifications, configure webhooks:</p> <ol> <li>Go to Slack App settings \u2192 Incoming Webhooks</li> <li>Activate and add new webhook for each channel</li> <li>Add URLs to <code>/srv/pai/.env</code></li> </ol> <p>Used for: - System startup/shutdown notifications - Verbose logging when channel API fails - Monitoring alerts from Intelligence Stack</p>"},{"location":"applications/slack-bot/#related-documentation","title":"Related Documentation","text":"<ul> <li>Slack Recovery Playbook - Restore bot after crashes</li> <li>Claude CLI Advanced Features - System prompt usage</li> <li>Intelligence Stack - Bot's role in monitoring</li> </ul>"},{"location":"applications/slack-bot/#version-history","title":"Version History","text":"<ul> <li>v0.3.1 (2025-06-17) - Current unified implementation</li> <li>Fixed Claude CLI path issues</li> <li>Added Slack formatting conversion</li> <li>Enhanced process management</li> <li> <p>Hardcoded #pai channel fallback</p> </li> <li> <p>v0.2.x - Previous enhanced bot with Block Kit UI</p> </li> <li>v0.1.x - Original simple bot implementation</li> </ul>"},{"location":"applications/browser-testing/","title":"Browser Testing","text":""},{"location":"applications/browser-testing/#overview","title":"Overview","text":"<p>The Browser Testing toolkit provides a real-time browser testing environment that allows for automated UI testing with live visual feedback at test.kaut.to.</p> <p>Status: \u2705 Active (v0.1) URL: https://test.kaut.to Location: <code>/srv/apps/browser-test/</code></p>"},{"location":"applications/browser-testing/#features","title":"Features","text":"<ul> <li>Real-Time Viewing: Watch tests execute in real-time via a web-based VNC client.</li> <li>Multi-Browser Support: Run tests in Chrome and Firefox.</li> <li>Test Automation: Write and run automated UI tests using a Python-based toolkit.</li> <li>Headless Testing: Run tests in the background without a visible browser window.</li> </ul>"},{"location":"applications/browser-testing/guide/","title":"Browser Testing Guide","text":""},{"location":"applications/browser-testing/guide/#overview","title":"Overview","text":"<p>The browser testing toolkit allows DAI to perform automated UI testing with real-time visual feedback that you can watch at test.kaut.to.</p>"},{"location":"applications/browser-testing/guide/#quick-start","title":"Quick Start","text":""},{"location":"applications/browser-testing/guide/#1-start-the-testing-environment","title":"1. Start the Testing Environment","text":"<pre><code>cd /srv/apps/browser-test\ndocker-compose up -d\n</code></pre>"},{"location":"applications/browser-testing/guide/#2-view-live-tests","title":"2. View Live Tests","text":"<p>Visit https://test.kaut.to (auth: kaut:to)</p>"},{"location":"applications/browser-testing/guide/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Test pastebin upload\npython3 /srv/toolkit/browser_test.py --test upload\n\n# Test clipboard functionality\npython3 /srv/toolkit/browser_test.py --test clipboard\n\n# Run all tests\npython3 /srv/toolkit/browser_test.py --test all\n</code></pre>"},{"location":"applications/browser-testing/guide/#features","title":"Features","text":""},{"location":"applications/browser-testing/guide/#real-time-viewing","title":"Real-Time Viewing","text":"<ul> <li>Watch tests execute in real-time</li> <li>No software installation needed</li> <li>Works from any device</li> </ul>"},{"location":"applications/browser-testing/guide/#multiple-browsers","title":"Multiple Browsers","text":"<ul> <li>Chrome (port 7900)</li> <li>Firefox (port 7901)</li> <li>More browsers coming soon</li> </ul>"},{"location":"applications/browser-testing/guide/#test-capabilities","title":"Test Capabilities","text":"<ul> <li>Click elements</li> <li>Fill forms</li> <li>Upload files</li> <li>Take screenshots</li> <li>Verify content</li> </ul>"},{"location":"applications/browser-testing/guide/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   test.kaut.to  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Browser Test    \u2502\n\u2502   (Web UI)      \u2502     \u2502  Dashboard       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502\n         \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Chrome with    \u2502     \u2502  Firefox with    \u2502\n\u2502  noVNC (7900)   \u2502     \u2502  noVNC (7901)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502\n         \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Selenium Grid Hub (4444)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"applications/browser-testing/guide/#writing-tests","title":"Writing Tests","text":""},{"location":"applications/browser-testing/guide/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code>from browser_test import BrowserTest\n\n# Create test instance\ntest = BrowserTest(browser='chrome')\ntest.setup()\n\n# Navigate to site\ntest.driver.get(\"https://pb.kaut.to\")\n\n# Find and click element\nbutton = test.driver.find_element(By.ID, \"submit-button\")\nbutton.click()\n\n# Clean up\ntest.teardown()\n</code></pre>"},{"location":"applications/browser-testing/guide/#best-practices","title":"Best Practices","text":"<ol> <li>Always use explicit waits</li> <li>Take screenshots on errors</li> <li>Use meaningful test names</li> <li>Clean up test data</li> <li>Test multiple browsers</li> </ol>"},{"location":"applications/browser-testing/guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/browser-testing/guide/#container-issues","title":"Container Issues","text":"<pre><code># Check container status\ndocker ps\n\n# View logs\ndocker logs selenium-chrome\n\n# Restart containers\ndocker-compose restart\n</code></pre>"},{"location":"applications/browser-testing/guide/#connection-issues","title":"Connection Issues","text":"<ul> <li>Ensure ports 7900, 7901, 4444 are not in use</li> <li>Check firewall allows Docker traffic</li> <li>Verify nginx is running</li> </ul>"},{"location":"applications/browser-testing/guide/#test-failures","title":"Test Failures","text":"<ul> <li>Screenshots saved to <code>/srv/apps/browser-test/</code></li> <li>Check browser console for errors</li> <li>Verify selectors are correct</li> <li>Ensure page fully loaded</li> </ul>"},{"location":"applications/browser-testing/guide/#advanced-usage","title":"Advanced Usage","text":""},{"location":"applications/browser-testing/guide/#headless-testing","title":"Headless Testing","text":"<pre><code>python3 /srv/toolkit/browser_test.py --headless --browser chrome\n</code></pre>"},{"location":"applications/browser-testing/guide/#custom-tests","title":"Custom Tests","text":"<p>Add new test methods to <code>/srv/toolkit/browser_test.py</code></p>"},{"location":"applications/browser-testing/guide/#video-recording","title":"Video Recording","text":"<p>Coming soon - automatic test recording</p>"},{"location":"applications/browser-testing/guide/#security-notes","title":"Security Notes","text":"<ul> <li>VNC has no password for ease of use</li> <li>Access controlled by nginx auth</li> <li>Containers isolated in Docker network</li> <li>No sensitive data in test environment</li> </ul>"},{"location":"applications/browser-testing/specification/","title":"Browser Testing Toolkit Specification v0.1","text":""},{"location":"applications/browser-testing/specification/#overview","title":"Overview","text":"<p>A real-time browser testing toolkit that allows DAI to perform UI testing with live visual feedback at test.kaut.to.</p>"},{"location":"applications/browser-testing/specification/#architecture","title":"Architecture","text":""},{"location":"applications/browser-testing/specification/#components","title":"Components","text":"<ol> <li>Selenium Grid Hub - Central test coordinator</li> <li>Chrome/Firefox Nodes - Browser instances with VNC</li> <li>noVNC Web Client - Browser-based VNC viewer</li> <li>Playwright/Selenium Scripts - Test automation</li> <li>Test Dashboard - Live test status and controls</li> </ol>"},{"location":"applications/browser-testing/specification/#stack-decision","title":"Stack Decision","text":"<ul> <li>Primary: Docker Selenium Grid with VNC-enabled nodes</li> <li>Automation: Playwright (modern, faster) with Selenium fallback</li> <li>Viewing: noVNC web client at test.kaut.to</li> <li>Recording: Built-in video recording for test artifacts</li> </ul>"},{"location":"applications/browser-testing/specification/#implementation-plan","title":"Implementation Plan","text":""},{"location":"applications/browser-testing/specification/#phase-1-infrastructure-setup","title":"Phase 1: Infrastructure Setup","text":"<pre><code># docker-compose.yml for test environment\nversion: '3'\nservices:\n  selenium-hub:\n    image: selenium/hub:4.15.0\n    container_name: selenium-hub\n    ports:\n      - \"4444:4444\"\n\n  chrome:\n    image: selenium/node-chrome:4.15.0\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n      - SE_NODE_MAX_SESSIONS=1\n      - SE_VNC_NO_PASSWORD=1\n    ports:\n      - \"7900:7900\"  # noVNC web interface\n      - \"5900:5900\"  # VNC server\n</code></pre>"},{"location":"applications/browser-testing/specification/#phase-2-web-interface","title":"Phase 2: Web Interface","text":"<ul> <li>test.kaut.to - Main testing dashboard</li> <li>Features:</li> <li>Live browser view via noVNC</li> <li>Test execution controls</li> <li>Screenshot/video capture</li> <li>Test history and artifacts</li> </ul>"},{"location":"applications/browser-testing/specification/#phase-3-toolkit-integration","title":"Phase 3: Toolkit Integration","text":"<pre><code># /srv/toolkit/browser_test.py\nclass BrowserTest:\n    def __init__(self):\n        self.hub_url = \"http://localhost:4444/wd/hub\"\n        self.vnc_url = \"http://test.kaut.to:7900\"\n\n    def test_pastebin_upload(self):\n        \"\"\"Test image upload functionality\"\"\"\n        driver = self.get_driver()\n        driver.get(\"https://pb.kaut.to\")\n        # ... test implementation\n\n    def get_live_view_url(self):\n        \"\"\"Return URL for live viewing\"\"\"\n        return f\"{self.vnc_url}/?autoconnect=1&amp;resize=scale\"\n</code></pre>"},{"location":"applications/browser-testing/specification/#user-experience","title":"User Experience","text":""},{"location":"applications/browser-testing/specification/#for-dai-developer","title":"For DAI (Developer)","text":"<ol> <li>Run test command: <code>python3 browser_test.py test_pastebin_upload</code></li> <li>Script outputs: \"View test live at: https://test.kaut.to\"</li> <li>Execute UI actions programmatically</li> <li>See real-time browser activity</li> </ol>"},{"location":"applications/browser-testing/specification/#for-joni-observer","title":"For Joni (Observer)","text":"<ol> <li>Visit https://test.kaut.to</li> <li>See live browser view with DAI's actions</li> <li>Watch tests execute in real-time</li> <li>Review recorded videos afterward</li> </ol>"},{"location":"applications/browser-testing/specification/#key-features","title":"Key Features","text":""},{"location":"applications/browser-testing/specification/#1-real-time-viewing","title":"1. Real-Time Viewing","text":"<ul> <li>noVNC provides browser-based VNC access</li> <li>No client software needed</li> <li>Works on any device with a browser</li> </ul>"},{"location":"applications/browser-testing/specification/#2-test-recording","title":"2. Test Recording","text":"<ul> <li>Automatic video recording of all tests</li> <li>Screenshots at key points</li> <li>Full test artifacts stored</li> </ul>"},{"location":"applications/browser-testing/specification/#3-multi-browser-support","title":"3. Multi-Browser Support","text":"<ul> <li>Chrome (primary)</li> <li>Firefox</li> <li>Edge (future)</li> <li>Safari (via WebKit)</li> </ul>"},{"location":"applications/browser-testing/specification/#4-debugging-tools","title":"4. Debugging Tools","text":"<ul> <li>Pause/resume test execution</li> <li>Interactive browser console</li> <li>Network traffic inspection</li> <li>DOM element highlighting</li> </ul>"},{"location":"applications/browser-testing/specification/#security-considerations","title":"Security Considerations","text":"<ul> <li>test.kaut.to requires authentication</li> <li>VNC sessions are temporary</li> <li>No sensitive data in test environment</li> <li>Isolated Docker network</li> </ul>"},{"location":"applications/browser-testing/specification/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>AI-Powered Testing: Use Claude to analyze screenshots</li> <li>Visual Regression: Automatic screenshot comparison</li> <li>Parallel Testing: Multiple browser instances</li> <li>Mobile Testing: Android/iOS emulation</li> <li>Performance Metrics: Page load times, resource usage</li> </ol>"},{"location":"applications/browser-testing/specification/#quick-start-commands","title":"Quick Start Commands","text":"<pre><code># Start test environment\ndocker-compose up -d\n\n# Run a test with live view\npython3 /srv/toolkit/browser_test.py --live\n\n# View test at\nhttps://test.kaut.to\n\n# Stop environment\ndocker-compose down\n</code></pre>"},{"location":"applications/browser-testing/specification/#benefits","title":"Benefits","text":"<ol> <li>Transparency: Joni can see exactly what DAI is testing</li> <li>Debugging: Visual feedback for troubleshooting</li> <li>Confidence: Verify UI changes work correctly</li> <li>Documentation: Video records of all tests</li> <li>Collaboration: Share test sessions via URL</li> </ol>"},{"location":"applications/jtools-testing-toolkit/","title":"JTools Testing Toolkit","text":""},{"location":"applications/jtools-testing-toolkit/#overview","title":"Overview","text":"<p>The JTools Testing Toolkit is a unified testing framework that enables comprehensive testing across the entire jtools ecosystem. It supports multiple programming languages and test types through a single, consistent interface.</p> <p>Status: \u2705 Active (v0.1) Repository: github.com/jkautto/jtools Location: <code>/srv/jtools/test/</code> Command: <code>jtest</code></p>"},{"location":"applications/jtools-testing-toolkit/#features","title":"Features","text":"<ul> <li>Multi-Language Support: Python (PyTest), JavaScript (Playwright), Bash (BATS)</li> <li>Unified Runner: Single command interface for all test types</li> <li>Browser Testing: Headless browser automation with Playwright</li> <li>HTML Reports: Beautiful, shareable test reports</li> <li>AI-Friendly: Clear output optimized for AI interpretation</li> <li>Fast Feedback: Fail-fast approach with detailed error messages</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#quick-start","title":"Quick Start","text":"<pre><code># Run all tests\n/srv/jtools/jtest\n\n# Run specific language tests\n/srv/jtools/jtest --python\n/srv/jtools/jtest --javascript\n/srv/jtools/jtest --bash\n\n# Run specific test file\n/srv/jtools/jtest --python test_perplexity.py\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#architecture","title":"Architecture","text":"<pre><code>/srv/jtools/test/\n\u251c\u2500\u2500 bin/\n\u2502   \u2514\u2500\u2500 jtest              # Main test runner\n\u251c\u2500\u2500 frameworks/\n\u2502   \u251c\u2500\u2500 python/           # PyTest configuration\n\u2502   \u251c\u2500\u2500 javascript/       # Playwright configuration\n\u2502   \u2514\u2500\u2500 bash/             # BATS helpers\n\u251c\u2500\u2500 reporters/\n\u2502   \u2514\u2500\u2500 html/             # HTML report generator\n\u251c\u2500\u2500 examples/             # Example tests\n\u2514\u2500\u2500 reports/              # Test results\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#component-details","title":"Component Details","text":""},{"location":"applications/jtools-testing-toolkit/#test-runner-jtest","title":"Test Runner (<code>jtest</code>)","text":"<p>The main test runner is a Python script that orchestrates test execution across all frameworks:</p> <ul> <li>Detects and runs tests based on file patterns</li> <li>Captures output from each framework</li> <li>Generates unified JSON reports</li> <li>Provides summary statistics</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#framework-configurations","title":"Framework Configurations","text":""},{"location":"applications/jtools-testing-toolkit/#python-pytest","title":"Python (PyTest)","text":"<ul> <li>Config: <code>test/frameworks/python/pytest.ini</code></li> <li>Features: Fixtures, markers, parametrization</li> <li>File Pattern: <code>test_*.py</code>, <code>*_test.py</code></li> </ul>"},{"location":"applications/jtools-testing-toolkit/#javascript-playwright","title":"JavaScript (Playwright)","text":"<ul> <li>Config: <code>test/frameworks/javascript/playwright.config.js</code></li> <li>Features: Browser automation, visual testing, API testing</li> <li>File Pattern: <code>*.spec.js</code></li> </ul>"},{"location":"applications/jtools-testing-toolkit/#bash-bats","title":"Bash (BATS)","text":"<ul> <li>Config: <code>test/frameworks/bash/setup.bash</code></li> <li>Features: Command-line testing, file operations</li> <li>File Pattern: <code>*.bats</code></li> </ul>"},{"location":"applications/jtools-testing-toolkit/#reporting","title":"Reporting","text":"<p>Reports are generated in two formats:</p> <ol> <li>JSON: Machine-readable test results</li> <li>HTML: Human-readable reports with charts and details</li> </ol>"},{"location":"applications/jtools-testing-toolkit/#integration-points","title":"Integration Points","text":""},{"location":"applications/jtools-testing-toolkit/#with-other-jtools","title":"With Other JTools","text":"<ul> <li>jcommit: Validates commit messages</li> <li>px (Perplexity): Tests API integration</li> <li>ft (Fetch): Tests web scraping functionality</li> <li>gtask: Tests Google Tasks integration</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#with-web-applications","title":"With Web Applications","text":"<ul> <li>Shifts App: Full E2E testing</li> <li>PAI Dashboard: UI automation tests</li> <li>Pastebin: API and UI testing</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#development-workflow","title":"Development Workflow","text":""},{"location":"applications/jtools-testing-toolkit/#1-write-tests","title":"1. Write Tests","text":"<pre><code># Python example\ndef test_feature():\n    result = my_function()\n    assert result == expected\n</code></pre> <pre><code>// JavaScript example\ntest('feature works', async ({ page }) =&gt; {\n    await page.goto('/');\n    await expect(page.locator('h1')).toBeVisible();\n});\n</code></pre> <pre><code># Bash example\n@test \"feature works\" {\n    run my_command\n    assert_success\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#2-run-tests","title":"2. Run Tests","text":"<pre><code># During development\njtest --python test_my_feature.py\n\n# Before committing\njtest\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#3-review-reports","title":"3. Review Reports","text":"<pre><code># Generate HTML report\npython3 test/reporters/html/generate_report.py test/reports/latest.json\n\n# Open in browser\nopen test/reports/report-*.html\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#configuration","title":"Configuration","text":""},{"location":"applications/jtools-testing-toolkit/#environment-variables","title":"Environment Variables","text":"<pre><code># Test configuration\nexport JTEST_TIMEOUT=60        # Test timeout in seconds\nexport JTEST_PARALLEL=4        # Number of parallel workers\nexport JTEST_VERBOSE=true      # Verbose output\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#custom-markers","title":"Custom Markers","text":"<pre><code># pytest.ini\n[pytest]\nmarkers =\n    slow: marks tests as slow\n    integration: integration tests\n    unit: unit tests\n    smoke: smoke tests\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/jtools-testing-toolkit/#common-issues","title":"Common Issues","text":"<p>Dependencies not installed: <pre><code>pip install pytest\nnpm install -D @playwright/test\nsudo apt-get install bats\n</code></pre></p> <p>Tests not discovered: <pre><code># Check Python path\npython3 -c \"import sys; print(sys.path)\"\n\n# Check test patterns\njtest --list\n</code></pre></p> <p>Browser tests failing: <pre><code># Install browsers\nnpx playwright install\n\n# Run with headed mode\nnpx playwright test --headed\n</code></pre></p>"},{"location":"applications/jtools-testing-toolkit/#best-practices","title":"Best Practices","text":"<ol> <li>Test Naming: Use descriptive names that explain what's being tested</li> <li>Test Independence: Tests should not depend on each other</li> <li>Fast Tests: Keep unit tests under 100ms</li> <li>Clear Assertions: One logical assertion per test</li> <li>Proper Cleanup: Always clean up test artifacts</li> </ol>"},{"location":"applications/jtools-testing-toolkit/#maintenance","title":"Maintenance","text":""},{"location":"applications/jtools-testing-toolkit/#regular-tasks","title":"Regular Tasks","text":"<ul> <li>Update test dependencies monthly</li> <li>Review and remove obsolete tests</li> <li>Update browser versions for Playwright</li> <li>Archive old test reports</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#health-checks","title":"Health Checks","text":"<pre><code># Check test coverage\npytest --cov=jtools\n\n# Find slow tests\njtest --profile\n\n# Validate test structure\njtest --validate\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/#future-enhancements","title":"Future Enhancements","text":"<ul> <li> Coverage reporting integration</li> <li> Performance benchmarking</li> <li> Mutation testing support</li> <li> Distributed test execution</li> <li> Integration with GitHub Actions</li> </ul>"},{"location":"applications/jtools-testing-toolkit/#related-documentation","title":"Related Documentation","text":"<ul> <li>Testing Guide</li> <li>Testing Specification</li> <li>Browser Testing Guide</li> <li>CI/CD Integration</li> </ul>"},{"location":"applications/jtools-testing-toolkit/guide/","title":"JTools Testing Toolkit Guide","text":"<p>The JTools Testing Toolkit provides a unified testing framework for all jtools components, supporting multiple programming languages and test types.</p>"},{"location":"applications/jtools-testing-toolkit/guide/#overview","title":"Overview","text":"<p>The testing toolkit allows you to:</p> <ul> <li>Write and run tests in Python, JavaScript, and Bash</li> <li>Test CLI tools, web applications, and APIs</li> <li>Generate comprehensive test reports</li> <li>Run browser automation tests</li> <li>Integrate with CI/CD pipelines</li> </ul>"},{"location":"applications/jtools-testing-toolkit/guide/#installation","title":"Installation","text":""},{"location":"applications/jtools-testing-toolkit/guide/#prerequisites","title":"Prerequisites","text":"<pre><code># Python testing\npip install pytest\n\n# JavaScript/Browser testing\nnpm install -D @playwright/test\nnpx playwright install chromium\n\n# Bash testing\nsudo apt-get install bats  # Ubuntu/Debian\nbrew install bats-core     # macOS\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#quick-setup","title":"Quick Setup","text":"<p>The toolkit is already installed in <code>/srv/jtools/test/</code>. To use it:</p> <pre><code># Add to PATH (optional)\nexport PATH=\"/srv/jtools:$PATH\"\n\n# Or use directly\n/srv/jtools/jtest\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#basic-usage","title":"Basic Usage","text":""},{"location":"applications/jtools-testing-toolkit/guide/#running-all-tests","title":"Running All Tests","text":"<pre><code># Run all tests across all frameworks\njtest\n\n# Output example:\n\ud83d\udc0d Running Python tests...\n\ud83c\udf10 Running JavaScript/Browser tests...\n\ud83d\udd27 Running Bash tests...\n\n\u2728 Test Summary:\n   Total: 15\n   \u2705 Passed: 14\n   \u274c Failed: 1\n   \u23f1\ufe0f  Duration: 23.45s\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#running-specific-test-types","title":"Running Specific Test Types","text":"<pre><code># Python tests only\njtest --python\n\n# JavaScript tests only\njtest --javascript\n\n# Bash tests only\njtest --bash\n\n# Specific test file\njtest --python test_perplexity.py\njtest --javascript shifts.spec.js\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#writing-tests","title":"Writing Tests","text":""},{"location":"applications/jtools-testing-toolkit/guide/#python-tests-pytest","title":"Python Tests (PyTest)","text":"<p>Create a test file with <code>test_</code> prefix:</p> <pre><code># test_my_tool.py\nimport pytest\nfrom my_tool import process_data\n\ndef test_basic_functionality():\n    \"\"\"Test basic data processing\"\"\"\n    result = process_data(\"input\")\n    assert result == \"expected_output\"\n\n@pytest.mark.integration\ndef test_api_integration():\n    \"\"\"Test external API integration\"\"\"\n    # Test code here\n    pass\n\n@pytest.mark.slow\ndef test_large_dataset():\n    \"\"\"Test with large dataset (marked as slow)\"\"\"\n    # Test code here\n    pass\n</code></pre> <p>Run with markers:</p> <pre><code># Skip slow tests\njtest --python -m \"not slow\"\n\n# Only integration tests\njtest --python -m integration\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#javascriptbrowser-tests-playwright","title":"JavaScript/Browser Tests (Playwright)","text":"<p>Create a test file with <code>.spec.js</code> suffix:</p> <pre><code>// app.spec.js\nconst { test, expect } = require('@playwright/test');\n\ntest.describe('My Web App', () =&gt; {\n  test('should load homepage', async ({ page }) =&gt; {\n    await page.goto('https://kaut.to/myapp/');\n    await expect(page.locator('h1')).toContainText('Welcome');\n  });\n\n  test('should handle form submission', async ({ page }) =&gt; {\n    await page.goto('https://kaut.to/myapp/');\n    await page.fill('#name', 'Test User');\n    await page.click('button[type=\"submit\"]');\n    await expect(page.locator('.success')).toBeVisible();\n  });\n\n  test('should capture screenshot on failure', async ({ page }) =&gt; {\n    await page.goto('https://kaut.to/myapp/');\n    // This will fail and capture screenshot\n    await expect(page.locator('#nonexistent')).toBeVisible();\n  });\n});\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#bash-tests-bats","title":"Bash Tests (BATS)","text":"<p>Create a test file with <code>.bats</code> extension:</p> <pre><code>#!/usr/bin/env bats\n\nload test/frameworks/bash/setup.bash\n\n@test \"tool exists and is executable\" {\n    assert_file_exists \"$JTOOLS_DIR/mytool\"\n    [[ -x \"$JTOOLS_DIR/mytool\" ]]\n}\n\n@test \"tool shows help message\" {\n    run_jtool \"mytool\" --help\n    assert_success\n    assert_output_contains \"Usage:\"\n}\n\n@test \"tool processes input correctly\" {\n    echo \"test data\" &gt; input.txt\n    run_jtool \"mytool\" process input.txt\n    assert_success\n    assert_file_exists \"output.txt\"\n    assert_file_contains \"output.txt\" \"processed\"\n}\n\n@test \"tool handles errors gracefully\" {\n    run_jtool \"mytool\" process nonexistent.txt\n    assert_failure\n    assert_output_contains \"Error\"\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#test-organization","title":"Test Organization","text":""},{"location":"applications/jtools-testing-toolkit/guide/#directory-structure","title":"Directory Structure","text":"<pre><code>/srv/jtools/\n\u251c\u2500\u2500 mytool/\n\u2502   \u251c\u2500\u2500 mytool.py          # Tool implementation\n\u2502   \u2514\u2500\u2500 test_mytool.py     # Python tests\n\u251c\u2500\u2500 webapp/\n\u2502   \u251c\u2500\u2500 index.html         # Web app\n\u2502   \u2514\u2500\u2500 webapp.spec.js     # Browser tests\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 deploy.sh          # Bash script\n    \u2514\u2500\u2500 test_deploy.bats   # Bash tests\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#best-practices","title":"Best Practices","text":"<ol> <li>Keep tests close to code - Place test files next to the code they test</li> <li>Use descriptive names - Test names should explain what they verify</li> <li>One assertion per test - Makes failures easier to diagnose</li> <li>Use fixtures - Share common setup code</li> <li>Mock external dependencies - Tests should be reliable and fast</li> </ol>"},{"location":"applications/jtools-testing-toolkit/guide/#advanced-features","title":"Advanced Features","text":""},{"location":"applications/jtools-testing-toolkit/guide/#custom-fixtures-python","title":"Custom Fixtures (Python)","text":"<pre><code># conftest.py\nimport pytest\n\n@pytest.fixture\ndef api_client():\n    \"\"\"Provide configured API client\"\"\"\n    from my_api import Client\n    return Client(base_url=\"http://localhost:8000\")\n\n@pytest.fixture\ndef sample_data():\n    \"\"\"Provide sample test data\"\"\"\n    return {\n        \"users\": [\"alice\", \"bob\"],\n        \"projects\": [\"alpha\", \"beta\"]\n    }\n\n# test_api.py\ndef test_user_endpoint(api_client, sample_data):\n    response = api_client.get_users()\n    assert response.users == sample_data[\"users\"]\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#browser-context-playwright","title":"Browser Context (Playwright)","text":"<pre><code>// Advanced browser testing\ntest.describe('Authenticated Tests', () =&gt; {\n  test.use({\n    storageState: 'auth.json',  // Reuse authentication\n    viewport: { width: 1280, height: 720 },\n    locale: 'en-US',\n  });\n\n  test('should access protected page', async ({ page }) =&gt; {\n    await page.goto('https://kaut.to/protected/');\n    await expect(page.locator('.user-profile')).toBeVisible();\n  });\n});\n\n// Visual regression testing\ntest('visual comparison', async ({ page }) =&gt; {\n    await page.goto('https://kaut.to/myapp/');\n    await expect(page).toHaveScreenshot('homepage.png');\n});\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#bats-helpers","title":"BATS Helpers","text":"<pre><code># Custom helper functions\nsetup_test_repo() {\n    git init test_repo\n    cd test_repo\n    echo \"# Test\" &gt; README.md\n    git add README.md\n    git commit -m \"Initial commit\"\n}\n\n@test \"git operations\" {\n    setup_test_repo\n\n    run_jtool \"git-helper\" status\n    assert_success\n    assert_output_contains \"On branch main\"\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#test-reports","title":"Test Reports","text":""},{"location":"applications/jtools-testing-toolkit/guide/#json-reports","title":"JSON Reports","text":"<p>Test results are automatically saved as JSON:</p> <pre><code># Reports location\n/srv/jtools/test/reports/test-report-YYYYMMDD-HHMMSS.json\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#html-reports","title":"HTML Reports","text":"<p>Generate beautiful HTML reports:</p> <pre><code># Generate HTML from latest test run\ncd /srv/jtools/test\npython3 reporters/html/generate_report.py reports/latest.json\n\n# Open in browser\nopen reports/report-*.html\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># GitHub Actions example\nname: Test Suite\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n      - uses: actions/setup-node@v3\n\n      - name: Install dependencies\n        run: |\n          pip install pytest\n          npm install -D @playwright/test\n          npx playwright install\n\n      - name: Run tests\n        run: /srv/jtools/jtest\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-results\n          path: test/reports/\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#debugging-failed-tests","title":"Debugging Failed Tests","text":""},{"location":"applications/jtools-testing-toolkit/guide/#python-debugging","title":"Python Debugging","text":"<pre><code># Run with debugger\npytest --pdb test_mytool.py\n\n# Verbose output\njtest --python -- -vv\n\n# Show local variables on failure\njtest --python -- --showlocals\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#playwright-debugging","title":"Playwright Debugging","text":"<pre><code># Run in headed mode (see browser)\nnpx playwright test --headed\n\n# Debug mode (opens Playwright Inspector)\nnpx playwright test --debug\n\n# Slow motion\nnpx playwright test --slow-mo=1000\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#bats-debugging","title":"BATS Debugging","text":"<pre><code># Verbose output\nbats -v test_script.bats\n\n# TAP format for better parsing\nbats -t test_script.bats\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#common-patterns","title":"Common Patterns","text":""},{"location":"applications/jtools-testing-toolkit/guide/#testing-cli-tools","title":"Testing CLI Tools","text":"<pre><code># test_cli.py\nimport subprocess\n\ndef test_cli_help():\n    result = subprocess.run(\n        [\"python3\", \"mytool.py\", \"--help\"],\n        capture_output=True,\n        text=True\n    )\n    assert result.returncode == 0\n    assert \"Usage:\" in result.stdout\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#testing-apis","title":"Testing APIs","text":"<pre><code>// api.spec.js\ntest('API endpoint returns data', async ({ request }) =&gt; {\n    const response = await request.get('/api/data');\n    expect(response.ok()).toBeTruthy();\n\n    const data = await response.json();\n    expect(data).toHaveProperty('items');\n    expect(data.items).toHaveLength(10);\n});\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#testing-file-operations","title":"Testing File Operations","text":"<pre><code># test_files.bats\n@test \"creates output file\" {\n    run_jtool \"processor\" input.txt output.txt\n    assert_success\n    assert_file_exists \"output.txt\"\n\n    # Check file content\n    run cat output.txt\n    assert_output_contains \"Processed\"\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"applications/jtools-testing-toolkit/guide/#common-issues","title":"Common Issues","text":"<p>Tests not found: <pre><code># Check test discovery\npytest --collect-only\nnpx playwright test --list\n</code></pre></p> <p>Import errors in Python: <pre><code># Add to conftest.py\nimport sys\nsys.path.insert(0, '/srv/jtools')\n</code></pre></p> <p>Authentication issues in browser tests: <pre><code>// Save auth state\nnpx playwright codegen --save-storage=auth.json\n</code></pre></p> <p>BATS not found: <pre><code># Install BATS\ngit clone https://github.com/bats-core/bats-core.git\ncd bats-core\n./install.sh /usr/local\n</code></pre></p>"},{"location":"applications/jtools-testing-toolkit/guide/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Fast Tests: Keep unit tests under 100ms</li> <li>Isolated Tests: Each test should be independent</li> <li>Clear Names: <code>test_should_process_valid_input_correctly</code></li> <li>Arrange-Act-Assert: Structure tests clearly</li> <li>Continuous Testing: Run tests before committing</li> <li>Test Documentation: Document complex test scenarios</li> <li>Regular Cleanup: Remove obsolete tests</li> </ol>"},{"location":"applications/jtools-testing-toolkit/guide/#next-steps","title":"Next Steps","text":"<ul> <li>Read the full specification</li> <li>View example tests</li> <li>Set up CI/CD integration</li> <li>Learn about performance testing</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/","title":"JTools Testing Toolkit v0.1 Specification","text":"<p>Version: 0.1 Date: 2025-07-18 Status: \u2705 Implemented</p>"},{"location":"applications/jtools-testing-toolkit/specification/#executive-summary","title":"Executive Summary","text":"<p>A unified testing toolkit for the jtools ecosystem that supports multi-language testing (Python, JavaScript, Bash), headless browser automation, and comprehensive reporting. Built for AI-first development with simple, composable commands.</p>"},{"location":"applications/jtools-testing-toolkit/specification/#goals","title":"Goals","text":"<ol> <li>Unified Testing: One toolkit for all jtools components</li> <li>Multi-Language Support: Python, JavaScript, Bash testing</li> <li>Headless Browser Testing: For web applications</li> <li>AI-Friendly: Simple commands, clear output</li> <li>Fast Feedback: Fail fast, clear error messages</li> <li>Visual Reporting: HTML reports with screenshots</li> </ol>"},{"location":"applications/jtools-testing-toolkit/specification/#architecture","title":"Architecture","text":"<pre><code>/srv/jtools/test/\n\u251c\u2500\u2500 bin/                    # Test runner executables\n\u2502   \u251c\u2500\u2500 jtest              # Main test runner\n\u2502   \u2514\u2500\u2500 jtest-report       # Report generator\n\u251c\u2500\u2500 frameworks/            # Language-specific frameworks\n\u2502   \u251c\u2500\u2500 python/           # PyTest setup\n\u2502   \u251c\u2500\u2500 javascript/       # Playwright setup\n\u2502   \u2514\u2500\u2500 bash/             # BATS setup\n\u251c\u2500\u2500 reporters/            # Report generators\n\u2502   \u251c\u2500\u2500 allure/          # Allure integration\n\u2502   \u2514\u2500\u2500 html/            # Simple HTML reports\n\u251c\u2500\u2500 fixtures/            # Shared test fixtures\n\u2514\u2500\u2500 examples/            # Example tests\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#core-components","title":"Core Components","text":""},{"location":"applications/jtools-testing-toolkit/specification/#1-test-runner-jtest","title":"1. Test Runner (<code>jtest</code>)","text":"<p>Single entry point for all testing:</p> <pre><code># Run all tests\njtest\n\n# Run specific language tests\njtest --python\njtest --javascript\njtest --bash\n\n# Run specific test file\njtest tests/api_test.py\njtest tests/ui_test.js\n\n# Run with reporting\njtest --report html\njtest --report allure\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#2-language-support","title":"2. Language Support","text":""},{"location":"applications/jtools-testing-toolkit/specification/#python-testing-pytest","title":"Python Testing (PyTest)","text":"<ul> <li>Framework: PyTest</li> <li>Features: </li> <li>API testing</li> <li>Unit testing</li> <li>Integration testing</li> <li>Plugins: pytest-html, allure-pytest</li> </ul> <pre><code># Example test\ndef test_api_endpoint():\n    response = requests.get(\"http://localhost:8002/api/health\")\n    assert response.status_code == 200\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#javascript-testing-playwright","title":"JavaScript Testing (Playwright)","text":"<ul> <li>Framework: Playwright</li> <li>Features:</li> <li>Headless browser testing</li> <li>Visual regression testing</li> <li>Cross-browser support</li> <li>Reporters: allure-playwright, html</li> </ul> <pre><code>// Example test\ntest('homepage loads', async ({ page }) =&gt; {\n  await page.goto('https://kaut.to');\n  await expect(page).toHaveTitle(/Kaut.to/);\n});\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#bash-testing-bats","title":"Bash Testing (BATS)","text":"<ul> <li>Framework: BATS (Bash Automated Testing System)</li> <li>Features:</li> <li>Script testing</li> <li>Command testing</li> <li>Environment testing</li> </ul> <pre><code># Example test\n@test \"px.py exists and is executable\" {\n  [ -x \"/srv/jtools/px.py\" ]\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#3-headless-browser-testing","title":"3. Headless Browser Testing","text":"<p>Using Playwright for its speed and reliability:</p> <pre><code>// Visual regression test\ntest('shifts app visual test', async ({ page }) =&gt; {\n  await page.goto('https://kaut.to/shifts/');\n  await expect(page).toHaveScreenshot('shifts-homepage.png');\n});\n\n// Interaction test\ntest('save functionality', async ({ page }) =&gt; {\n  await page.goto('https://kaut.to/shifts/');\n  await page.click('[data-shift=\"W\"]');\n  await page.click('.day-cell:first-child');\n  await page.click('#saveBtn');\n  // Verify save worked\n});\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#4-reporting","title":"4. Reporting","text":""},{"location":"applications/jtools-testing-toolkit/specification/#allure-reports-primary","title":"Allure Reports (Primary)","text":"<ul> <li>Interactive HTML reports</li> <li>Test history tracking</li> <li>Screenshots and logs</li> <li>Failure analysis</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#simple-html-reports-fallback","title":"Simple HTML Reports (Fallback)","text":"<ul> <li>Basic pass/fail summary</li> <li>Quick to generate</li> <li>No dependencies</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#5-cicd-integration","title":"5. CI/CD Integration","text":"<pre><code># GitHub Actions example\n- name: Run jtools tests\n  run: |\n    cd /srv/jtools\n    ./test/bin/jtest --report allure\n\n- name: Upload test results\n  uses: actions/upload-artifact@v3\n  with:\n    name: test-results\n    path: test-results/\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#implementation-plan","title":"Implementation Plan","text":""},{"location":"applications/jtools-testing-toolkit/specification/#phase-1-core-infrastructure-week-1","title":"Phase 1: Core Infrastructure (Week 1)","text":"<ul> <li> Create directory structure</li> <li> Implement <code>jtest</code> runner script</li> <li> Set up PyTest for Python tests</li> <li> Basic HTML reporting</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#phase-2-browser-testing-week-2","title":"Phase 2: Browser Testing (Week 2)","text":"<ul> <li> Install and configure Playwright</li> <li> Create browser test examples</li> <li> Visual regression setup</li> <li> Screenshot comparison</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#phase-3-integration-week-3","title":"Phase 3: Integration (Week 3)","text":"<ul> <li> BATS for bash testing</li> <li> Allure reporting</li> <li> CI/CD templates</li> <li> Documentation</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#phase-4-advanced-features-week-4","title":"Phase 4: Advanced Features (Week 4)","text":"<ul> <li> Test orchestration</li> <li> Parallel execution</li> <li> Test data management</li> <li> Performance metrics</li> </ul>"},{"location":"applications/jtools-testing-toolkit/specification/#usage-examples","title":"Usage Examples","text":""},{"location":"applications/jtools-testing-toolkit/specification/#testing-a-web-app-shifts","title":"Testing a Web App (Shifts)","text":"<pre><code># Run all shifts tests\njtest apps/shifts/\n\n# Run visual regression tests\njtest apps/shifts/visual --compare-baseline\n\n# Debug failed test\njtest apps/shifts/test_save.js --headed --slowmo 500\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#testing-an-api","title":"Testing an API","text":"<pre><code># Test all endpoints\njtest api/\n\n# Test with coverage\njtest api/ --coverage\n\n# Generate report\njtest api/ --report allure\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#testing-cli-tools","title":"Testing CLI Tools","text":"<pre><code># Test px.py\njtest tools/px/\n\n# Test with different Python versions\njtest tools/px/ --python 3.8,3.9,3.10\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#success-metrics","title":"Success Metrics","text":"<ol> <li>Coverage: 80%+ code coverage across jtools</li> <li>Speed: Full test suite runs in &lt; 5 minutes</li> <li>Reliability: &lt; 1% flaky tests</li> <li>Adoption: All new features have tests</li> </ol>"},{"location":"applications/jtools-testing-toolkit/specification/#dependencies","title":"Dependencies","text":"<pre><code>{\n  \"python\": {\n    \"pytest\": \"^7.4.0\",\n    \"pytest-html\": \"^4.1.0\",\n    \"allure-pytest\": \"^2.13.0\",\n    \"requests\": \"^2.31.0\"\n  },\n  \"javascript\": {\n    \"@playwright/test\": \"^1.40.0\",\n    \"allure-playwright\": \"^2.13.0\"\n  },\n  \"bash\": {\n    \"bats-core\": \"^1.10.0\",\n    \"bats-assert\": \"^2.0.0\"\n  }\n}\n</code></pre>"},{"location":"applications/jtools-testing-toolkit/specification/#future-enhancements-v02","title":"Future Enhancements (v0.2+)","text":"<ol> <li>AI-Powered Testing: Auto-generate tests from specs</li> <li>Load Testing: Performance testing capabilities</li> <li>Security Testing: Basic security scans</li> <li>Mobile Testing: Mobile browser support</li> <li>Test Data Factory: Synthetic data generation</li> </ol>"},{"location":"applications/jtools-testing-toolkit/specification/#notes","title":"Notes","text":"<ul> <li>Start simple, iterate based on usage</li> <li>Focus on developer experience</li> <li>Optimize for AI agents (clear output, simple commands)</li> <li>Maintain backwards compatibility</li> </ul> <p>This toolkit will make testing jtools components systematic, reliable, and fast.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>The DAI/PAI ecosystem is built on a modular, microservices architecture designed for reliability, scalability, and AI-native operations.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TB\n    subgraph \"External Services\"\n        GH[GitHub]\n        GS[Google Services]\n        AI[AI APIs]\n    end\n\n    subgraph \"Edge Layer\"\n        CF[Cloudflare]\n        SSL[Let's Encrypt]\n    end\n\n    subgraph \"Web Layer\"\n        NGINX[nginx]\n    end\n\n    subgraph \"Application Layer\"\n        AUTH[Auth Service]\n        PB[Pastebin]\n        PAI[PAI Web]\n        DOCS[Documentation]\n        API[Tools API]\n    end\n\n    subgraph \"Core Services\"\n        DAI[DAI System]\n        PAIS[PAI System]\n        TASK[Task Engine]\n    end\n\n    subgraph \"Data Layer\"\n        CTX[Context Library]\n        LOGS[Logs]\n        TOKENS[Tokens]\n    end\n\n    CF --&gt; NGINX\n    NGINX --&gt; AUTH\n    NGINX --&gt; PB\n    NGINX --&gt; PAI\n    NGINX --&gt; DOCS\n    NGINX --&gt; API\n\n    AUTH --&gt; TOKENS\n    PAI --&gt; TASK\n    API --&gt; DAI\n    API --&gt; PAIS\n\n    DAI --&gt; CTX\n    PAIS --&gt; CTX\n    TASK --&gt; CTX\n\n    DAI --&gt; GH\n    PAIS --&gt; GS\n    API --&gt; AI</code></pre>"},{"location":"architecture/#core-principles","title":"Core Principles","text":""},{"location":"architecture/#1-ai-first-design","title":"1. AI-First Design","text":"<ul> <li>Every component is designed to be operated by AI agents</li> <li>APIs are self-documenting and discoverable</li> <li>State is explicitly tracked in the Context Library</li> </ul>"},{"location":"architecture/#2-modular-architecture","title":"2. Modular Architecture","text":"<ul> <li>Each service is independent and single-purpose</li> <li>Services communicate via well-defined APIs</li> <li>Failure of one service doesn't cascade</li> </ul>"},{"location":"architecture/#3-security-by-design","title":"3. Security by Design","text":"<ul> <li>Multiple authentication layers</li> <li>Encrypted secrets management (dotenv-vault)</li> <li>Principle of least privilege</li> </ul>"},{"location":"architecture/#4-observable-systems","title":"4. Observable Systems","text":"<ul> <li>Comprehensive logging</li> <li>Real-time monitoring</li> <li>Self-reporting capabilities</li> </ul>"},{"location":"architecture/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"architecture/#web-server-nginx","title":"Web Server (nginx)","text":"<ul> <li>Reverse proxy for all services</li> <li>SSL termination</li> <li>Basic authentication</li> <li>Request routing</li> </ul>"},{"location":"architecture/#application-services","title":"Application Services","text":"<ul> <li>Authentication (port 8091): Cookie-based auth</li> <li>Pastebin (port 8090): File and text sharing</li> <li>PAI Web (port 8080): Web interface</li> <li>Tools API (port 8001): Programmatic access</li> <li>Documentation: This MkDocs site</li> </ul>"},{"location":"architecture/#core-systems","title":"Core Systems","text":"<ul> <li>DAI: Infrastructure management</li> <li>PAI: Personal assistant functions</li> <li>Task Engine: Background job processing</li> </ul>"},{"location":"architecture/#data-storage","title":"Data Storage","text":"<ul> <li>Context Library: System state tracking</li> <li>Logs: Centralized logging</li> <li>Tokens: Authentication credentials</li> </ul>"},{"location":"architecture/#design-decisions","title":"Design Decisions","text":""},{"location":"architecture/#why-microservices","title":"Why Microservices?","text":"<ul> <li>Isolation: Services can fail independently</li> <li>Scalability: Services can scale individually</li> <li>Maintainability: Easier to understand and modify</li> <li>AI-Friendly: Clear boundaries for AI operations</li> </ul>"},{"location":"architecture/#why-nginx","title":"Why nginx?","text":"<ul> <li>Performance: Efficient reverse proxy</li> <li>Flexibility: Easy configuration</li> <li>Security: Battle-tested security features</li> <li>Compatibility: Works with all backend services</li> </ul>"},{"location":"architecture/#why-file-based-storage","title":"Why File-Based Storage?","text":"<ul> <li>Simplicity: No database complexity</li> <li>Git-Friendly: Version control for everything</li> <li>AI-Accessible: Easy for agents to read/write</li> <li>Portable: Easy backup and migration</li> </ul>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#authentication-layers","title":"Authentication Layers","text":"<ol> <li>Cloudflare: DDoS protection and CDN</li> <li>nginx: Basic HTTP authentication</li> <li>Application: Service-specific auth</li> <li>API: Token-based authentication</li> </ol>"},{"location":"architecture/#secret-management","title":"Secret Management","text":"<ul> <li>Environment variables via <code>.env</code> files</li> <li>Encrypted storage with dotenv-vault</li> <li>No hardcoded credentials</li> <li>Regular rotation policies</li> </ul>"},{"location":"architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/#current-scale","title":"Current Scale","text":"<ul> <li>Single server deployment</li> <li>Suitable for personal/small team use</li> <li>Sub-second response times</li> <li>Minimal resource usage</li> </ul>"},{"location":"architecture/#future-scaling","title":"Future Scaling","text":"<ul> <li>Horizontal scaling via load balancer</li> <li>Service containerization</li> <li>Database for high-volume data</li> <li>CDN for static assets</li> </ul>"},{"location":"architecture/#see-also","title":"See Also","text":"<ul> <li>DAI System Architecture</li> <li>PAI System Architecture</li> <li>PAI Sub-Agent System</li> <li>Infrastructure Details</li> <li>Security Model</li> </ul>"},{"location":"architecture/pai-subagent-system/","title":"PAI Sub-Agent System Architecture","text":""},{"location":"architecture/pai-subagent-system/#overview","title":"Overview","text":"<p>The PAI Sub-Agent System is a strategic framework for deploying specialized AI agents that address specific operational needs. Based on comprehensive system analysis conducted in July 2025, this architecture focuses on fixing critical issues before adding features.</p>"},{"location":"architecture/pai-subagent-system/#current-system-status","title":"Current System Status","text":""},{"location":"architecture/pai-subagent-system/#critical-issues-july-2025","title":"Critical Issues (July 2025)","text":"<ul> <li>Gmail OAuth Expired: Email monitoring non-functional</li> <li>Calendar Collector Broken: Missing basic import statement</li> <li>Slack Bot Unstable: Frequent SSL crashes</li> <li>Manual Email Triage: 30+ minutes daily overhead</li> <li>No Maker Time Protection: Interruptions during 6:30-12:00 focus blocks</li> </ul>"},{"location":"architecture/pai-subagent-system/#working-components","title":"Working Components","text":"<ul> <li>Morning Brief generation (6 AM)</li> <li>Batch monitoring infrastructure</li> <li>Service account calendar access</li> <li>Multi-account task management</li> <li>Web monitoring framework</li> </ul>"},{"location":"architecture/pai-subagent-system/#sub-agent-philosophy","title":"Sub-Agent Philosophy","text":""},{"location":"architecture/pai-subagent-system/#core-principles","title":"Core Principles","text":"<ol> <li>Fix Before Feature: Stabilize existing tools before adding capabilities</li> <li>Resilient Over Clever: Graceful failure handling over complex logic</li> <li>Observable Over Invisible: Clear status reporting and health checks</li> <li>Focused Over Flexible: Single responsibility, excellent execution</li> </ol>"},{"location":"architecture/pai-subagent-system/#design-patterns","title":"Design Patterns","text":"<pre><code>Each agent follows this structure:\n- Single clear purpose\n- Observable health status\n- Graceful failure modes\n- Measurable success metrics\n- Minimal tool permissions\n</code></pre>"},{"location":"architecture/pai-subagent-system/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"architecture/pai-subagent-system/#phase-1-foundation-week-1","title":"Phase 1: Foundation (Week 1)","text":"<p>Critical infrastructure to stabilize the system.</p>"},{"location":"architecture/pai-subagent-system/#health-monitor-agent","title":"Health Monitor Agent","text":"<ul> <li>Purpose: Proactive system monitoring and auto-fixes</li> <li>Frequency: Every 30 minutes</li> <li>Auto-fixes: Missing imports, service restarts, log cleanup</li> <li>Alerts: Token expiry, service failures, resource issues</li> </ul>"},{"location":"architecture/pai-subagent-system/#auth-guardian-agent","title":"Auth Guardian Agent","text":"<ul> <li>Purpose: Authentication management and renewal</li> <li>Monitors: OAuth tokens, API keys, service accounts</li> <li>Actions: 3-day expiry warnings, guided re-auth, fallback methods</li> <li>Coverage: Gmail, Calendar, Tasks, Slack, External APIs</li> </ul>"},{"location":"architecture/pai-subagent-system/#phase-2-daily-productivity-week-2","title":"Phase 2: Daily Productivity (Week 2)","text":"<p>Automation of repetitive daily tasks.</p>"},{"location":"architecture/pai-subagent-system/#email-master-agent","title":"Email Master Agent","text":"<ul> <li>Purpose: Multi-account email triage and response</li> <li>Accounts: Personal, Xwander, Accolade</li> <li>Features: VIP detection, smart categorization, draft responses</li> <li>Time Saved: 30 minutes daily</li> </ul>"},{"location":"architecture/pai-subagent-system/#calendar-guard-agent","title":"Calendar Guard Agent","text":"<ul> <li>Purpose: Protect maker time and optimize scheduling</li> <li>Protection: 6:30-12:00 AM block enforcement</li> <li>Features: Conflict detection, meeting optimization, auto-decline</li> <li>Integration: Cross-calendar visibility</li> </ul>"},{"location":"architecture/pai-subagent-system/#task-flow-agent","title":"Task Flow Agent","text":"<ul> <li>Purpose: Intelligent task planning and routing</li> <li>Method: 1-2-3 daily planning (1 big, 2 medium, 3 small)</li> <li>Routing: Smart account assignment based on context</li> <li>Analytics: Completion patterns and optimization</li> </ul>"},{"location":"architecture/pai-subagent-system/#phase-3-business-intelligence-week-3","title":"Phase 3: Business Intelligence (Week 3)","text":"<p>Strategic support for business decisions.</p>"},{"location":"architecture/pai-subagent-system/#project-context-agent","title":"Project Context Agent","text":"<ul> <li>Purpose: Smooth context switching between projects</li> <li>Projects: Northern Lights Holiday, Alone Project, Financial Systems</li> <li>Features: State saving, context loading, time tracking</li> <li>Impact: 10x faster context switches</li> </ul>"},{"location":"architecture/pai-subagent-system/#business-intel-agent","title":"Business Intel Agent","text":"<ul> <li>Purpose: Financial and strategic analytics</li> <li>Coverage: Cross-account financial tracking, KPI monitoring</li> <li>Focus: 3-4 year business exit strategy support</li> <li>Outputs: Weekly reports, trend analysis, market research</li> </ul>"},{"location":"architecture/pai-subagent-system/#technical-specifications","title":"Technical Specifications","text":""},{"location":"architecture/pai-subagent-system/#agent-definition-structure","title":"Agent Definition Structure","text":"<pre><code>---\nname: agent-name\ndescription: \"Clear purpose statement. Use PROACTIVELY for X.\"\ntools: [Comma-separated tool list]\nmodel: haiku|sonnet|opus (based on complexity)\n---\n\nSystem prompt defining:\n- Core responsibilities\n- Decision criteria\n- Interaction patterns\n- Constraints and limits\n</code></pre>"},{"location":"architecture/pai-subagent-system/#tool-permissions-matrix","title":"Tool Permissions Matrix","text":"Agent Bash Read Write Email Calendar Tasks Slack health-monitor \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 - auth-guardian \u2713 \u2713 \u2713 - - - - email-master - \u2713 \u2713 \u2713 - - \u2713 calendar-guard - \u2713 \u2713 - \u2713 \u2713 \u2713 task-flow - \u2713 \u2713 - \u2713 \u2713 - project-context - \u2713 \u2713 \u2713 \u2713 \u2713 - business-intel - \u2713 \u2713 \u2713 - - \u2713"},{"location":"architecture/pai-subagent-system/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture/pai-subagent-system/#morning-routine-600-am","title":"Morning Routine (6:00 AM)","text":"<pre><code>health-monitor \u2192 System check\n    \u2193\nemail-master \u2192 Overnight triage\n    \u2193\ntask-flow \u2192 Generate 1-2-3 plan\n    \u2193\ncalendar-guard \u2192 Confirm maker time\n    \u2193\nMorning Brief \u2192 Slack notification\n</code></pre>"},{"location":"architecture/pai-subagent-system/#meeting-request-flow","title":"Meeting Request Flow","text":"<pre><code>New request \u2192 calendar-guard\n    \u2193\nCheck maker time rules\n    \u2193\nEvaluate with project-context\n    \u2193\nAuto-response or escalate\n</code></pre>"},{"location":"architecture/pai-subagent-system/#project-switch-pattern","title":"Project Switch Pattern","text":"<pre><code>Context change detected \u2192 project-context\n    \u2193\nSave current state\n    \u2193\nLoad new context\n    \u2193\nUpdate task-flow priorities\n    \u2193\nFilter email-master view\n</code></pre>"},{"location":"architecture/pai-subagent-system/#success-metrics","title":"Success Metrics","text":""},{"location":"architecture/pai-subagent-system/#system-health","title":"System Health","text":"<ul> <li>Uptime: &gt;99% for core services</li> <li>Auth Issues: &lt;1 per month</li> <li>Auto-fix Rate: &gt;60% of detected issues</li> <li>Detection Time: &lt;5 minutes for critical issues</li> </ul>"},{"location":"architecture/pai-subagent-system/#productivity-gains","title":"Productivity Gains","text":"<ul> <li>Email Triage: &lt;5 minutes daily (from 30+)</li> <li>Maker Time: Zero interruptions 6:30-12:00</li> <li>Context Switch: &lt;30 seconds (from 5+ minutes)</li> <li>Task Planning: Automated 1-2-3 generation</li> </ul>"},{"location":"architecture/pai-subagent-system/#business-impact","title":"Business Impact","text":"<ul> <li>Report Generation: Weekly automated (from manual)</li> <li>KPI Tracking: Real-time dashboard (from sporadic)</li> <li>Decision Support: Data-driven insights available</li> </ul>"},{"location":"architecture/pai-subagent-system/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"architecture/pai-subagent-system/#before-building-any-agent","title":"Before Building Any Agent","text":"<ul> <li> Solves a real, measured daily problem</li> <li> Saves &gt;10 minutes per day or prevents critical failures</li> <li> Can operate with degraded dependencies</li> <li> Has clear success metrics</li> <li> Integrates with existing tools</li> </ul>"},{"location":"architecture/pai-subagent-system/#each-agent-must-have","title":"Each Agent Must Have","text":"<ul> <li> Detailed specification document</li> <li> Observable health status</li> <li> Graceful failure handling</li> <li> Integration test suite</li> <li> Performance benchmarks</li> </ul>"},{"location":"architecture/pai-subagent-system/#testing-requirements","title":"Testing Requirements","text":"<ol> <li>Unit Tests: Core functionality</li> <li>Integration Tests: Tool interactions</li> <li>Failure Tests: Graceful degradation</li> <li>Performance Tests: Response times</li> <li>User Acceptance: Real workflow validation</li> </ol>"},{"location":"architecture/pai-subagent-system/#current-status-july-2025","title":"Current Status (July 2025)","text":""},{"location":"architecture/pai-subagent-system/#completed","title":"Completed","text":"<ul> <li>\u2705 System analysis and pain point identification</li> <li>\u2705 Strategic plan and prioritization</li> <li>\u2705 Health Monitor specification</li> <li>\u2705 Documentation framework</li> </ul>"},{"location":"architecture/pai-subagent-system/#in-progress","title":"In Progress","text":"<ul> <li>\ud83d\udd04 Health Monitor implementation</li> <li>\ud83d\udd04 Auth Guardian design</li> </ul>"},{"location":"architecture/pai-subagent-system/#planned","title":"Planned","text":"<ul> <li>\ud83d\udccb Email Master development</li> <li>\ud83d\udccb Calendar Guard development</li> <li>\ud83d\udccb Task Flow development</li> <li>\ud83d\udccb Project Context development</li> <li>\ud83d\udccb Business Intel development</li> </ul>"},{"location":"architecture/pai-subagent-system/#quick-reference","title":"Quick Reference","text":""},{"location":"architecture/pai-subagent-system/#file-locations","title":"File Locations","text":"<ul> <li>Strategy: <code>/srv/pai/.claude/agents/SUBAGENT_STRATEGY.md</code></li> <li>Specifications: <code>/srv/pai/.claude/agents/*-spec.md</code></li> <li>Agent Definitions: <code>/srv/pai/.claude/agents/*.md</code></li> <li>Test Suites: <code>/srv/pai/tests/agents/</code></li> <li>Monitoring: <code>/srv/pai/monitoring/agent_health/</code></li> </ul>"},{"location":"architecture/pai-subagent-system/#key-commands","title":"Key Commands","text":"<pre><code># Check agent health\npai-agent health\n\n# List active agents\npai-agent list\n\n# Test specific agent\npai-agent test health-monitor\n\n# View agent metrics\npai-agent metrics email-master\n</code></pre>"},{"location":"architecture/pai-subagent-system/#next-steps","title":"Next Steps","text":"<ol> <li>Immediate: Fix calendar_collector.py import issue</li> <li>Today: Complete Health Monitor implementation</li> <li>This Week: Deploy Auth Guardian</li> <li>Next Week: Roll out productivity agents</li> <li>Month Goal: Full sub-agent ecosystem operational</li> </ol> <p>Last Updated: July 2025 Based on: Comprehensive PAI system analysis Status: Active development</p>"},{"location":"archive/github-workflow/","title":"GitHub Issue-Driven Development Workflow","text":""},{"location":"archive/github-workflow/#overview","title":"Overview","text":"<p>This guide outlines the systematic approach to development using GitHub issues as the primary driver for all changes. This workflow ensures traceability, proper planning, and consistent quality across all projects.</p>"},{"location":"archive/github-workflow/#core-principles","title":"Core Principles","text":""},{"location":"archive/github-workflow/#1-issues-first","title":"1. Issues First","text":"<p>Every change starts with an issue. No code without context.</p>"},{"location":"archive/github-workflow/#2-plan-before-code","title":"2. Plan Before Code","text":"<p>Create detailed checklists and implementation plans before writing code.</p>"},{"location":"archive/github-workflow/#3-test-everything","title":"3. Test Everything","text":"<p>Verify functionality works before marking tasks complete.</p>"},{"location":"archive/github-workflow/#4-document-always","title":"4. Document Always","text":"<p>Update documentation as part of the development process.</p>"},{"location":"archive/github-workflow/#5-fail-fast-fail-better","title":"5. Fail Fast, Fail Better","text":"<p>Test early, identify problems quickly, iterate based on learnings.</p>"},{"location":"archive/github-workflow/#the-complete-workflow","title":"The Complete Workflow","text":""},{"location":"archive/github-workflow/#step-1-issue-analysis","title":"Step 1: Issue Analysis","text":"<p>When starting work on an issue:</p> <pre><code># View issue details\ngh issue view 6 --repo jkautto/shifts\n\n# List all project issues\ngh issue list --repo jkautto/shifts --state all\n\n# Check linked project board\ngh api graphql -f query='\n{\n  user(login: \"jkautto\") {\n    projectsV2(first: 10) {\n      nodes {\n        id\n        number\n        title\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"archive/github-workflow/#step-2-create-implementation-plan","title":"Step 2: Create Implementation Plan","text":"<p>Always create a systematic plan with clear phases:</p> <pre><code>## Implementation Plan for Issue #6\n\n### Phase 1: Analysis &amp; Testing (HIGH Priority)\n- [ ] Analyze existing code structure\n- [ ] Test current functionality\n- [ ] Identify gaps and requirements\n- [ ] Document findings\n\n### Phase 2: Implementation (HIGH Priority)\n- [ ] Core feature development\n- [ ] Error handling\n- [ ] Edge case handling\n- [ ] Integration with existing code\n\n### Phase 3: Testing (HIGH Priority)\n- [ ] Unit tests\n- [ ] Integration tests\n- [ ] Manual testing\n- [ ] Performance validation\n\n### Phase 4: Documentation (MEDIUM Priority)\n- [ ] API documentation\n- [ ] Update README\n- [ ] Add code examples\n- [ ] Update changelog\n</code></pre>"},{"location":"archive/github-workflow/#step-3-git-operations","title":"Step 3: Git Operations","text":""},{"location":"archive/github-workflow/#check-repository-state","title":"Check Repository State","text":"<pre><code># View recent commits\ngit log --oneline -20\n\n# Check current tags\ngit tag -l\n\n# See commits since last release\ngit log v1.0..HEAD --oneline\n\n# Check current status\ngit status\n</code></pre>"},{"location":"archive/github-workflow/#commit-best-practices","title":"Commit Best Practices","text":"<p>Use conventional commit format:</p> Type Description Example feat New feature <code>feat: add JSON storage backend</code> fix Bug fix <code>fix: resolve auth error on load</code> test Adding tests <code>test: add storage service tests</code> docs Documentation <code>docs: update API reference</code> refactor Code restructuring <code>refactor: simplify auth logic</code> chore Maintenance <code>chore: update dependencies</code>"},{"location":"archive/github-workflow/#step-4-testing-strategy","title":"Step 4: Testing Strategy","text":""},{"location":"archive/github-workflow/#1-manual-testing-first","title":"1. Manual Testing First","text":"<p>Always verify functionality manually before automation: <pre><code># Test the feature directly\nnode test-feature.js\n\n# Use curl for API testing\ncurl -u user:pass http://localhost:8003/api/endpoint\n</code></pre></p>"},{"location":"archive/github-workflow/#2-create-test-scripts","title":"2. Create Test Scripts","text":"<p>Write standalone test scripts for validation: <pre><code>// test-json-storage.js\n// Test all CRUD operations\n// Test error cases\n// Test edge cases\n// Verify data integrity\n</code></pre></p>"},{"location":"archive/github-workflow/#3-add-to-test-suite","title":"3. Add to Test Suite","text":"<pre><code># Update package.json\n\"scripts\": {\n  \"test\": \"vitest\",\n  \"test:watch\": \"vitest --watch\"\n}\n</code></pre>"},{"location":"archive/github-workflow/#step-5-issue-management","title":"Step 5: Issue Management","text":"<p>Keep stakeholders informed throughout:</p> <pre><code># Post progress update\ngh issue comment 6 --repo jkautto/shifts --body \"\n## Status Update\n- [x] Analysis complete\n- [x] Tests written\n- [ ] Implementation in progress\n\"\n\n# Update labels\ngh issue edit 6 --repo jkautto/shifts --add-label \"in-progress\"\n\n# Link pull request (if using PRs)\ngh issue develop 6 --repo jkautto/shifts\n</code></pre>"},{"location":"archive/github-workflow/#step-6-release-process","title":"Step 6: Release Process","text":""},{"location":"archive/github-workflow/#version-planning","title":"Version Planning","text":"<ul> <li>Major (x.0.0): Breaking changes</li> <li>Minor (0.x.0): New features  </li> <li>Patch (0.0.x): Bug fixes</li> </ul>"},{"location":"archive/github-workflow/#release-checklist","title":"Release Checklist","text":"<pre><code># 1. Ensure all tests pass\nnpm test\n\n# 2. Update version\nnpm version minor\n\n# 3. Commit all changes\ngit add -A\ngit commit -m \"feat: complete feature for v2.1.0\"\n\n# 4. Tag release\ngit tag v2.1.0\ngit push origin v2.1.0\n\n# 5. Update and close issue\ngh issue comment 6 --repo jkautto/shifts --body \"\n\u2705 Implementation complete in v2.1.0\n\"\ngh issue close 6 --repo jkautto/shifts\n</code></pre>"},{"location":"archive/github-workflow/#best-practices","title":"Best Practices","text":""},{"location":"archive/github-workflow/#use-todo-lists","title":"Use Todo Lists","text":"<p>Maintain a todo list for complex tasks:</p> <pre><code>// Using TodoWrite tool\nconst todos = [\n  { id: \"1\", content: \"Research existing code\", status: \"completed\" },\n  { id: \"2\", content: \"Write tests\", status: \"in_progress\" },\n  { id: \"3\", content: \"Implement feature\", status: \"pending\" }\n];\n</code></pre>"},{"location":"archive/github-workflow/#documentation-as-code","title":"Documentation as Code","text":"<ul> <li>Update docs in the same commit as code changes</li> <li>Keep README current with features</li> <li>Document APIs with examples</li> <li>Add inline comments for complex logic</li> </ul>"},{"location":"archive/github-workflow/#mvp-approach","title":"MVP Approach","text":"<ol> <li>Build the simplest working solution first</li> <li>Test and validate it works</li> <li>Document what exists</li> <li>Iterate based on feedback</li> <li>Avoid over-engineering</li> </ol>"},{"location":"archive/github-workflow/#common-patterns","title":"Common Patterns","text":""},{"location":"archive/github-workflow/#feature-implementation-pattern","title":"Feature Implementation Pattern","text":"<pre><code># 1. Create/claim issue\ngh issue create --title \"Add new feature\" --body \"Description...\"\n\n# 2. Research and plan\n# - Analyze codebase\n# - Create implementation plan\n# - Update issue with plan\n\n# 3. Implement incrementally\n# - Write tests first (TDD)\n# - Implement feature\n# - Test thoroughly\n\n# 4. Document\n# - Update README\n# - Add API docs\n# - Create examples\n\n# 5. Release\n# - Update version\n# - Tag release\n# - Close issue\n</code></pre>"},{"location":"archive/github-workflow/#bug-fix-pattern","title":"Bug Fix Pattern","text":"<pre><code># 1. Reproduce the issue\n# 2. Write failing test\n# 3. Fix the bug\n# 4. Verify test passes\n# 5. Check for regressions\n# 6. Document the fix\n# 7. Release patch version\n</code></pre>"},{"location":"archive/github-workflow/#tools-reference","title":"Tools Reference","text":""},{"location":"archive/github-workflow/#github-cli-essential-commands","title":"GitHub CLI Essential Commands","text":"<pre><code># Issues\ngh issue create --repo owner/repo\ngh issue list --repo owner/repo\ngh issue view &lt;number&gt; --repo owner/repo\ngh issue comment &lt;number&gt; --repo owner/repo\ngh issue close &lt;number&gt; --repo owner/repo\ngh issue edit &lt;number&gt; --repo owner/repo\n\n# API Access\ngh api /repos/owner/repo/issues\ngh api graphql -f query='{ ... }'\n\n# Projects (GraphQL)\ngh api graphql -f query='\n{\n  user(login: \"username\") {\n    projectsV2(first: 10) {\n      nodes {\n        id\n        title\n        items(first: 100) {\n          nodes {\n            content {\n              ... on Issue {\n                title\n                number\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"archive/github-workflow/#git-essential-commands","title":"Git Essential Commands","text":"<pre><code># Status and History\ngit status\ngit log --oneline -n 20\ngit diff\ngit show &lt;commit&gt;\n\n# Branches and Tags  \ngit branch -a\ngit tag -l\ngit describe --tags\n\n# Remote Operations\ngit push origin main\ngit push origin v2.1.0\ngit fetch --all --tags\n</code></pre>"},{"location":"archive/github-workflow/#integration-with-ai-workflows","title":"Integration with AI Workflows","text":""},{"location":"archive/github-workflow/#context-preservation","title":"Context Preservation","text":"<ul> <li>Use HANDOVER.md for session continuity</li> <li>Update BACKLOG.md with pending tasks</li> <li>Document decisions in commit messages</li> </ul>"},{"location":"archive/github-workflow/#collaboration-protocol","title":"Collaboration Protocol","text":"<ul> <li>Clear issue descriptions</li> <li>Detailed implementation plans  </li> <li>Progress updates on issues</li> <li>Complete documentation</li> </ul>"},{"location":"archive/github-workflow/#token-optimization","title":"Token Optimization","text":"<ul> <li>Reference issues by number</li> <li>Use short, clear messages</li> <li>Batch related changes</li> <li>Link to existing docs</li> </ul>"},{"location":"archive/github-workflow/#examples-from-real-projects","title":"Examples from Real Projects","text":""},{"location":"archive/github-workflow/#shifts-application-v210","title":"Shifts Application (v2.1.0)","text":"<ol> <li>Started with issue #6 for file storage</li> <li>Discovered feature already implemented</li> <li>Pivoted to testing and documentation</li> <li>Created comprehensive test suite</li> <li>Documented API completely</li> <li>Released with confidence</li> </ol>"},{"location":"archive/github-workflow/#key-learnings","title":"Key Learnings","text":"<ul> <li>Always test existing functionality first</li> <li>Document what actually exists</li> <li>Follow MVP principles</li> <li>Maintain backward compatibility</li> </ul>"},{"location":"archive/github-workflow/#related-documentation","title":"Related Documentation","text":"<ul> <li>GitHub CLI Guide</li> <li>Git Workflow</li> <li>AI Agent Onboarding</li> <li>Development Standards</li> </ul>"},{"location":"context/","title":"Context Library","text":"<p>The Context Library is DAI/PAI's knowledge management system, containing accumulated wisdom, architectural decisions, and operational knowledge.</p>"},{"location":"context/#overview","title":"Overview","text":"<p>The Context Library serves as the living memory of the DAI/PAI ecosystem. It includes:</p> <ul> <li>CAG System: Core Agent Gateway - structured knowledge base</li> <li>Current Context: Active operational context and state</li> <li>Development Context: In-progress features and experiments</li> <li>Archives: Historical context and deprecated information</li> </ul>"},{"location":"context/#cag-core-agent-gateway","title":"CAG (Core Agent Gateway)","text":"<p>The CAG system is the primary knowledge base for AI agents operating within the DAI/PAI ecosystem.</p>"},{"location":"context/#key-components","title":"Key Components","text":"<ul> <li>CAG Index - Master index and navigation guide</li> <li>CAG Core - Structured configuration data</li> <li>CAG Architecture - System design decisions</li> <li>CAG Operations - Current operational state</li> <li>CAG Learnings - Accumulated best practices</li> </ul>"},{"location":"context/#usage-guidelines","title":"Usage Guidelines","text":"<ol> <li>Start with the Index: Always begin with cag-index.md for navigation</li> <li>Check Core Data: Use cag-core.json for paths, ports, and configs</li> <li>Understand Architecture: Review cag-architecture.md for design rationale</li> <li>Monitor Operations: Check cag-operations.md for current status</li> <li>Learn from History: Consult cag-learnings.md for troubleshooting</li> </ol>"},{"location":"context/#current-context","title":"Current Context","text":"<p>Active operational context files that guide day-to-day operations:</p> <ul> <li>System state and health</li> <li>Active projects and priorities</li> <li>Temporary configurations</li> <li>Work-in-progress documentation</li> </ul>"},{"location":"context/#development-context","title":"Development Context","text":"<p>Development-specific knowledge and workflows:</p> <ul> <li>GitHub Issue-Driven Workflow - Systematic development process</li> <li>Project setup guides</li> <li>Testing strategies</li> <li>Release procedures</li> </ul>"},{"location":"context/#archives","title":"Archives","text":"<p>Historical context preserved for reference:</p> <ul> <li>Deprecated configurations</li> <li>Old architectural decisions</li> <li>Past incident reports</li> <li>Legacy documentation</li> </ul>"},{"location":"context/#best-practices","title":"Best Practices","text":""},{"location":"context/#reading-context","title":"Reading Context","text":"<ul> <li>Always start with the most specific context first</li> <li>Check timestamps and versions</li> <li>Cross-reference with operational data</li> </ul>"},{"location":"context/#updating-context","title":"Updating Context","text":"<ul> <li>Keep updates atomic and focused</li> <li>Include timestamps and authorship</li> <li>Link related changes</li> <li>Archive outdated information properly</li> </ul>"},{"location":"context/#context-hygiene","title":"Context Hygiene","text":"<ul> <li>Review and clean up quarterly</li> <li>Move stale content to archives</li> <li>Update indexes when structure changes</li> <li>Maintain clear navigation paths</li> </ul>"},{"location":"context/#quick-reference","title":"Quick Reference","text":"Context Type Location Purpose CAG System <code>/context/cag/</code> Core knowledge base Current <code>/context/current/</code> Active operational context Development <code>/context/development/</code> Work in progress Archives <code>/context/archives/</code> Historical reference <p>Pro Tip</p> <p>The CAG system is designed for AI consumption. Keep entries structured, clear, and machine-readable.</p>"},{"location":"context/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview</li> <li>Operations Guide</li> <li>API Documentation</li> </ul>"},{"location":"context/archives/","title":"Context Archives","text":"<p>Historical context preserved for reference. Organized by date and topic.</p>"},{"location":"context/archives/#archive-structure","title":"Archive Structure","text":"<p>Archives are organized by: - Year/Quarter - For time-based archives - Topic - For subject-specific archives - Project - For project-related archives</p>"},{"location":"context/archives/#2025-q1-archives","title":"2025 Q1 Archives","text":""},{"location":"context/archives/#documentation-migration","title":"Documentation Migration","text":"<ul> <li>Original documentation structure before MkDocs migration</li> <li>Legacy context files from pre-consolidation era</li> </ul>"},{"location":"context/archives/#2024-archives","title":"2024 Archives","text":"<p>To be migrated from /srv/context/archives/</p>"},{"location":"context/archives/#accessing-archives","title":"Accessing Archives","text":"<p>Archives are stored in subdirectories: - Time-based: <code>/context/archives/2025/Q1/</code> - Topic-based: <code>/context/archives/topics/</code> - Project-based: <code>/context/archives/projects/</code></p>"},{"location":"context/archives/#archive-policy","title":"Archive Policy","text":""},{"location":"context/archives/#what-gets-archived","title":"What Gets Archived","text":"<ul> <li>Deprecated configurations</li> <li>Old architectural decisions</li> <li>Completed project documentation</li> <li>Superseded procedures</li> <li>Historical incident reports</li> </ul>"},{"location":"context/archives/#when-to-archive","title":"When to Archive","text":"<ul> <li>Quarterly reviews</li> <li>Major system changes</li> <li>Project completions</li> <li>Documentation overhauls</li> </ul>"},{"location":"context/archives/#how-to-archive","title":"How to Archive","text":"<ol> <li>Create appropriate subdirectory</li> <li>Move files with clear naming</li> <li>Add README explaining context</li> <li>Update this index</li> <li>Remove from active documentation</li> </ol>"},{"location":"context/archives/#quick-search","title":"Quick Search","text":"<p>To search archives: <pre><code>grep -r \"search_term\" /srv/apps/docs/docs/context/archives/\n</code></pre></p> <p>Warning</p> <p>Archives are for reference only. Do not use archived configurations or procedures in production.</p>"},{"location":"context/current/","title":"Current Context","text":"<p>This page tracks the current operational context of the DAI/PAI system.</p>"},{"location":"context/current/#system-status","title":"System Status","text":"<p>Last Updated: 2025-07-17</p>"},{"location":"context/current/#service-health","title":"Service Health","text":"<ul> <li>\u2705 All core services operational</li> <li>\u2705 Documentation site deployed (https://docs.kaut.to)</li> <li>\u2705 PAI Dashboard running</li> <li>\u2705 Task API functional</li> <li>\u2705 Tools API operational</li> </ul>"},{"location":"context/current/#recent-changes","title":"Recent Changes","text":"<ul> <li>Migrated documentation to MkDocs at https://docs.kaut.to</li> <li>Updated CLAUDE.md and GEMINI.md with new documentation paths</li> <li>Cleaned up repository structure (/srv/.git removed)</li> <li>Created new apps repository on GitHub</li> </ul>"},{"location":"context/current/#active-projects","title":"Active Projects","text":""},{"location":"context/current/#in-progress","title":"In Progress","text":"<ol> <li>Documentation Migration - Moving all docs to MkDocs</li> <li>Context Library Consolidation - Organizing scattered documentation</li> <li>Repository Cleanup - Archiving old files and organizing structure</li> </ol>"},{"location":"context/current/#planned","title":"Planned","text":"<ol> <li>Automated Documentation Builds - GitHub Actions integration</li> <li>Search Enhancement - Improving documentation search</li> <li>AI Update Endpoints - Programmatic documentation updates</li> </ol>"},{"location":"context/current/#known-issues","title":"Known Issues","text":""},{"location":"context/current/#minor","title":"Minor","text":"<ul> <li>Some navigation links in docs point to not-yet-created pages</li> <li>Old documentation paths still referenced in some scripts</li> </ul>"},{"location":"context/current/#resolved-recently","title":"Resolved Recently","text":"<ul> <li>nginx SSL cipher configuration fixed</li> <li>MkDocs analytics provider issue resolved</li> <li>Repository merge conflicts resolved</li> </ul>"},{"location":"context/current/#temporary-configurations","title":"Temporary Configurations","text":"<p>None currently active.</p>"},{"location":"context/current/#work-in-progress","title":"Work in Progress","text":""},{"location":"context/current/#documentation-migration-status","title":"Documentation Migration Status","text":"<ul> <li> CAG files migrated</li> <li> /srv/docs content pending</li> <li> /srv/specs content pending</li> <li> /srv/context remaining files pending</li> <li> PAI documentation pending</li> </ul>"},{"location":"context/current/#quick-commands","title":"Quick Commands","text":"<pre><code># Rebuild documentation\ncd /srv/apps/docs &amp;&amp; source venv/bin/activate &amp;&amp; mkdocs build\n\n# Check service status\nsudo systemctl status kaut-pastebin pai-web kaut-auth kaut-api\n\n# View recent logs\nsudo journalctl -u pai-web -f --since \"1 hour ago\"\n</code></pre>"},{"location":"context/current/#contact-points","title":"Contact Points","text":"<ul> <li>Documentation: https://docs.kaut.to</li> <li>PAI Dashboard: https://kaut.to/ai/</li> <li>Task Manager: https://kaut.to/tasks/</li> <li>Pastebin: https://pb.kaut.to</li> </ul> <p>Note</p> <p>This is a living document. Update whenever significant changes occur to maintain accurate operational context.</p>"},{"location":"context/cag/cag-architecture/","title":"CAG Architecture","text":"<p>Version: 3.1</p> <p>This document outlines the technical architecture and design decisions for the DAI system.</p>"},{"location":"context/cag/cag-architecture/#1-system-architecture","title":"1. System Architecture","text":""},{"location":"context/cag/cag-architecture/#11-core-design-v03","title":"1.1. Core Design (v0.3)","text":"<ul> <li>AI-First: Primary intelligence is in Claude prompts, not Python logic.</li> <li>Simple Wrappers: Python scripts are thin wrappers around the Claude CLI.</li> <li>Session-Based: Conversations use fixed sessions for different domains.</li> <li>Toolkit Architecture: Lightweight, cached tools for speed and monitoring.</li> </ul>"},{"location":"context/cag/cag-architecture/#12-technical-stack","title":"1.2. Technical Stack","text":"<ul> <li>Language: Python 3.10+</li> <li>AI: Claude CLI (Anthropic)</li> <li>APIs: Google Workspace</li> <li>Communication: Slack Webhooks</li> <li>Scheduling: System Cron</li> <li>Authentication: OAuth2 &amp; Google Service Accounts</li> </ul>"},{"location":"context/cag/cag-architecture/#2-design-decisions","title":"2. Design Decisions","text":""},{"location":"context/cag/cag-architecture/#21-claude-first-architecture","title":"2.1. Claude-First Architecture","text":"<ul> <li>Decision: Move all complex logic to Claude prompts.</li> <li>Rationale: Enables rapid iteration and changes without code deployment.</li> <li>Result: 90% reduction in Python code complexity.</li> </ul>"},{"location":"context/cag/cag-architecture/#22-toolkit-vs-jtools","title":"2.2. <code>toolkit</code> vs. <code>jtools</code>","text":"<ul> <li><code>jtools</code>: Full-featured CLI tools for human use.</li> <li><code>toolkit</code>: Lightweight, single-purpose, cached tools for AI/monitoring.</li> <li>Benefit: 10x faster execution for automated tasks.</li> </ul>"},{"location":"context/cag/cag-architecture/#3-integration-data-flow","title":"3. Integration &amp; Data Flow","text":""},{"location":"context/cag/cag-architecture/#31-data-flow-diagram","title":"3.1. Data Flow Diagram","text":"<pre><code>Google APIs -&gt; Collectors -&gt; Cache -&gt; Processors -&gt; Claude -&gt; Slack\n</code></pre>"},{"location":"context/cag/cag-architecture/#32-error-handling-strategy","title":"3.2. Error Handling Strategy","text":"<ol> <li>Collector Level: Fallback to cache on API failure.</li> <li>Processor Level: Skip analysis if no data is available.</li> <li>Claude Level: Use fallback routing on API timeout.</li> <li>Slack Level: Route all errors to a verbose debug channel.</li> </ol>"},{"location":"context/cag/cag-architecture/#33-security-architecture","title":"3.3. Security Architecture","text":"<ul> <li>Tokens: Stored in <code>/srv/tokens/</code> with <code>600</code> permissions.</li> <li>Service Accounts: Granted read-only access where possible.</li> <li>Webhooks/Secrets: Sourced exclusively from <code>.env</code> files.</li> <li>Logs: Sanitized to remove sensitive data.</li> </ul>"},{"location":"context/cag/cag-architecture/#4-future-architecture-roadmap","title":"4. Future Architecture Roadmap","text":"<ul> <li>v0.4 - Self-Healing: Automated error recovery, token refresh, and service restarts.</li> <li>v0.5 - Distributed: Multi-server redundancy and shared state management.</li> <li>v1.0 - Full Autonomy: Predictive monitoring and self-modifying prompts.</li> </ul>"},{"location":"context/cag/cag-index/","title":"CAG Index: AI Knowledge Base","text":"<p>Version: 3.1</p> <p>This is the master index for the Core Agent Gateway (CAG) knowledge base. Start here to understand the system architecture, operations, and learned best practices.</p>"},{"location":"context/cag/cag-index/#1-core-configuration-cag-corejson","title":"1. Core Configuration (<code>CAG-core.json</code>)","text":"<p>For all structured data, paths, credentials, and service definitions, refer to <code>CAG-core.json</code>. This is the single source of truth for machine-readable configuration.</p> <ul> <li>Paths: All key directory paths (<code>/srv</code>, <code>/srv/jtools</code>, etc.).</li> <li>Services: All running services, ports, and public domains.</li> <li>Authentication: API key locations, OAuth token paths, and service account details.</li> <li>Repositories: Git repository URLs and descriptions.</li> <li>Schedules: All cron job schedules.</li> </ul>"},{"location":"context/cag/cag-index/#2-system-architecture-cag-architecturemd","title":"2. System Architecture (<code>CAG-architecture.md</code>)","text":"<p>This document outlines the \"why\" behind the system's design.</p> <ul> <li>Core Design Principles: \"Claude-first,\" session management, etc.</li> <li>Technical Stack: Languages, APIs, and key technologies.</li> <li>Design Decisions: Rationale for key architectural choices.</li> <li>Integration Patterns: Data flow and error handling strategies.</li> <li>Future Plans: High-level roadmap for v0.4 and beyond.</li> </ul>"},{"location":"context/cag/cag-index/#3-operations-current-state-cag-operationsmd","title":"3. Operations &amp; Current State (<code>CAG-operations.md</code>)","text":"<p>This document provides a real-time snapshot of the system's health and status.</p> <ul> <li>System Health: What's working, what's broken.</li> <li>Active Monitors: Details on all running monitoring agents.</li> <li>Operational Procedures: Checklists for daily maintenance and emergency recovery.</li> <li>Performance Metrics: Key performance indicators (KPIs) for system response times and resource usage.</li> </ul>"},{"location":"context/cag/cag-index/#4-learnings-best-practices-cag-learningsmd","title":"4. Learnings &amp; Best Practices (<code>CAG-learnings.md</code>)","text":"<p>This document is a collection of troubleshooting guides, lessons learned, and best practices.</p> <ul> <li>Critical Learnings: High-impact lessons from past incidents.</li> <li>Common Issues &amp; Fixes: A \"FAQ\" for debugging common problems.</li> <li>Best Practices: A list of \"do's\" and \"don'ts\" for development.</li> <li>Anti-Patterns: A list of things to avoid.</li> </ul>"},{"location":"context/cag/cag-index/#5-primary-documentation-hub-srvdocsindexmd","title":"5. Primary Documentation Hub (<code>/srv/docs/index.md</code>)","text":"<p>For user-facing documentation, guides, and detailed specifications, refer to the main documentation hub at <code>/srv/docs/index.md</code>.</p>"},{"location":"context/cag/cag-learnings/","title":"CAG Learnings &amp; Best Practices","text":"<p>Version: 3.1</p> <p>This document is a collection of troubleshooting guides, lessons learned, and best practices.</p>"},{"location":"context/cag/cag-learnings/#1-critical-learnings","title":"1. Critical Learnings","text":""},{"location":"context/cag/cag-learnings/#11-python-environment-2025-07-17","title":"1.1. Python Environment (2025-07-17)","text":"<ul> <li>Problem: <code>ModuleNotFoundError</code> for both pip-installed and local packages.</li> <li>Root Cause: System-level Python environment is unreliable. Conflicts exist between global and user <code>site-packages</code>.</li> <li>Solution: Always use a virtual environment. A <code>venv</code> has been created at <code>/srv/jtools/.venv</code>. All development on <code>jtools</code> must be done using this interpreter. See <code>/srv/jtools/PYTHON_DEVELOPMENT_GUIDE.md</code>.</li> </ul>"},{"location":"context/cag/cag-learnings/#12-ssl-subdomain-access-2025-07-15","title":"1.2. SSL &amp; Subdomain Access (2025-07-15)","text":"<ul> <li>Problem: New subdomains were inaccessible from the internet.</li> <li>Root Cause: Split DNS. The main domain was proxied, while subdomains pointed directly to the server, which was firewalled.</li> <li>Lesson: Ensure subdomains and the main domain resolve to the same IP, especially when a proxy or CDN is in use.</li> </ul>"},{"location":"context/cag/cag-learnings/#13-claude-cli-context-2025-07-05","title":"1.3. Claude CLI Context (2025-07-05)","text":"<ul> <li>Problem: \"Prompt too long\" errors in cron jobs.</li> <li>Root Cause: Using the <code>-c</code> flag accumulates context indefinitely.</li> <li>Solution: Use stateless calls (no <code>-c</code> or <code>-r</code>) for frequent, repetitive tasks. Use session-based calls (<code>-r &lt;session_id&gt;</code>) for coherent, multi-turn conversations.</li> </ul>"},{"location":"context/cag/cag-learnings/#14-github-projects-api-2025-07-17","title":"1.4. GitHub Projects API (2025-07-17)","text":"<ul> <li>Problem: Unable to create GitHub project boards programmatically.</li> <li>Root Cause: GitHub Projects (classic) has been deprecated in favor of the new Projects experience.</li> <li>Solution: Use GitHub Issues with labels and milestones for task tracking. The new Projects API requires GraphQL and is more complex. For simple task management, issues are sufficient.</li> <li>Lesson: Check API deprecation notices. GitHub CLI (<code>gh</code>) doesn't support the new Projects API directly.</li> </ul>"},{"location":"context/cag/cag-learnings/#15-documentation-consolidation-2025-07-17","title":"1.5. Documentation Consolidation (2025-07-17)","text":"<ul> <li>Problem: Documentation scattered across multiple locations with no unified search capability (CAG files, /docs/, context library, inline comments).</li> <li>Root Cause: Organic growth led to documentation being created wherever it was most convenient at the time.</li> <li>Solution: MkDocs with Material theme provides a unified documentation site with powerful search, navigation, and organization features.</li> <li>Key Insight: Static site generators work exceptionally well for AI agents because they use simple markdown files that can be easily read, edited, and searched programmatically.</li> <li>Lesson: When choosing tools for AI-first systems, prioritize simplicity and file-based approaches over complex databases or proprietary formats. The easier it is for an AI to read and modify content, the more effective the system will be.</li> </ul>"},{"location":"context/cag/cag-learnings/#2-best-practices","title":"2. Best Practices","text":""},{"location":"context/cag/cag-learnings/#21-development","title":"2.1. Development","text":"<ul> <li>Virtual Environments: All Python projects MUST use a virtual environment (<code>venv</code>).</li> <li>Version Control: Do not commit secrets, backups, or virtual environment directories (<code>.venv/</code>). Use <code>.gitignore</code>.</li> <li>Modularity: Break down large scripts into smaller, single-purpose modules.</li> <li>Configuration: Use <code>.env</code> files for all secrets and environment-specific configuration. Do not hardcode credentials.</li> </ul>"},{"location":"context/cag/cag-learnings/#22-monitoring","title":"2.2. Monitoring","text":"<ul> <li>Stateless by Default: Monitoring scripts should be stateless to avoid context overflow.</li> <li>Progressive Disclosure: Use different Slack channels for different alert severities (e.g., <code>urgent</code>, <code>notifications</code>, <code>verbose</code>).</li> <li>Actionable Alerts: Alerts should provide context and suggest a clear next step.</li> </ul>"},{"location":"context/cag/cag-learnings/#23-prompt-engineering","title":"2.3. Prompt Engineering","text":"<ul> <li>Be Specific: Provide clear, direct instructions.</li> <li>Use Examples: Include few-shot examples in prompts for complex tasks.</li> <li>Update Prompts, Not Code: For AI-first applications, iterate on the prompts before refactoring the code.</li> </ul>"},{"location":"context/cag/cag-learnings/#3-common-issues-fixes","title":"3. Common Issues &amp; Fixes","text":"<ul> <li>Issue: \"No routing decisions from Claude\"</li> <li>Cause: Session timeout or API overload.</li> <li> <p>Fix: 1. Check Claude status. 2. Restart the monitoring script.</p> </li> <li> <p>Issue: Email monitor stops detecting new emails.</p> </li> <li> <p>Fixes: <pre><code># 1. Check for a valid, non-expired token\npython3 /srv/pai/toolkit/gmail_tool.py --account all auth-test\n\n# 2. Clear a potentially stuck cache\nrm /tmp/pai_emails_cache.json\n</code></pre></p> </li> <li> <p>Issue: Calendar conflicts are not detected.</p> </li> <li>Cause: The calendar has not been shared with the service account.</li> <li>Fix: Share the Google Calendar with <code>pai-assistant@personal-ai-453416.iam.gserviceaccount.com</code>.</li> </ul>"},{"location":"context/cag/cag-operations/","title":"CAG Operations","text":"<p>Version: 3.1 Last Updated: 2025-07-17T16:00:00Z</p> <p>This document provides a real-time snapshot of the system's health, active processes, and operational procedures.</p>"},{"location":"context/cag/cag-operations/#1-current-system-state","title":"1. Current System State","text":""},{"location":"context/cag/cag-operations/#11-health-summary","title":"1.1. Health Summary","text":"<ul> <li>Overall Status: DEGRADED</li> <li>Reason: Python environment issues are blocking development and refactoring.</li> <li>Active Blockers: <code>ModuleNotFoundError</code>, local package import failures.</li> <li>Remediation: A virtual environment (<code>.venv</code>) has been created in <code>/srv/jtools/</code> to provide a stable development environment.</li> </ul>"},{"location":"context/cag/cag-operations/#12-service-status","title":"1.2. Service Status","text":"<ul> <li>PAI v0.3 (Claude-brain): Working</li> <li>Multi-account Email Monitoring: Working</li> <li>Slack Integration (3-channel): Working</li> <li>Morning Brief (6 AM): Working</li> <li>PAI Web Dashboard: Working (https://kaut.to/ai/)</li> <li>Pastebin Service: Working (https://pb.kaut.to)</li> <li>Task API Backend: Working</li> </ul>"},{"location":"context/cag/cag-operations/#13-known-issues","title":"1.3. Known Issues","text":"<ul> <li>Slack bot crashes occasionally (event loop errors).</li> <li>Task monitoring is not fully configured.</li> <li>Some deprecated services may still exist in <code>systemd</code>.</li> </ul>"},{"location":"context/cag/cag-operations/#2-monitoring-operations","title":"2. Monitoring Operations","text":""},{"location":"context/cag/cag-operations/#21-active-monitors","title":"2.1. Active Monitors","text":"<ol> <li>Email Monitor: Every 10 mins. Multi-account collection and Claude-powered routing.</li> <li>Morning Brief: 6:00 AM daily. Calendar summary and conflict detection.</li> <li>System Status: Hourly. Component health checks and auto-alerts.</li> </ol>"},{"location":"context/cag/cag-operations/#22-key-operational-procedures","title":"2.2. Key Operational Procedures","text":""},{"location":"context/cag/cag-operations/#daily-maintenance","title":"Daily Maintenance","text":"<pre><code># Check system health\npython3 /srv/pai/monitoring/update_system_status.py\n\n# View recent errors\ntail -100 /srv/pai/monitoring/logs/*.log | grep ERROR\n</code></pre>"},{"location":"context/cag/cag-operations/#authentication-refresh","title":"Authentication Refresh","text":"<pre><code># Gmail (if needed)\npython3 /srv/pai/toolkit/gmail_tool.py auth\n\n# Tasks (if needed)\npython3 /srv/pai/toolkit/gtask.py auth\n</code></pre>"},{"location":"context/cag/cag-operations/#emergency-recovery","title":"Emergency Recovery","text":"<pre><code># Restart monitoring (restarted by cron)\npkill -f email_monitor\n\n# Clear all caches\nrm -f /tmp/pai_*.json\n</code></pre>"},{"location":"context/cag/cag-operations/#3-performance-metrics","title":"3. Performance Metrics","text":"<ul> <li>Avg. Response Time (Email Check): ~5 seconds</li> <li>Avg. Response Time (Calendar Fetch): ~3 seconds</li> <li>Avg. Response Time (Claude Analysis): ~8 seconds</li> <li>Avg. Resource Usage (CPU): &lt; 5%</li> <li>Avg. Resource Usage (Memory): ~200MB (Python)</li> </ul>"},{"location":"guides/","title":"Guides","text":"<p>Practical guides and tutorials for working with the kaut.to ecosystem.</p>"},{"location":"guides/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>New to the project? \u2192 Getting Started</li> <li>AI agent onboarding? \u2192 AI Agent Onboarding</li> <li>Creating Claude Code sub-agents? \u2192 Claude Code Sub-Agents</li> <li>Setting up MCP with Claude Code? \u2192 MCP Claude Code Setup</li> <li>Need Git help? \u2192 Git Workflow Guide</li> <li>GitHub issues? \u2192 GitHub Quick Reference</li> <li>Working with other AIs? \u2192 Working with AI Agents</li> </ul>"},{"location":"guides/#getting-started","title":"Getting Started","text":""},{"location":"guides/#getting-started-guide","title":"Getting Started Guide","text":"<p>Introduction to the kaut.to infrastructure and basic setup instructions.</p>"},{"location":"guides/#ai-agent-guides","title":"AI Agent Guides","text":""},{"location":"guides/#ai-agent-onboarding","title":"AI Agent Onboarding","text":"<p>Comprehensive onboarding guide for AI agents joining the development team. Covers Git workflow, coding standards, testing requirements, and communication guidelines.</p>"},{"location":"guides/#ai-agent-development","title":"AI Agent Development","text":"<p>Technical reference for AI agents. Includes modular architecture patterns, debugging techniques, performance optimization, and security best practices.</p>"},{"location":"guides/#ai-agent-collaboration","title":"AI Agent Collaboration","text":"<p>Team collaboration guidelines for multiple AI agents working together. Covers communication channels, handoff procedures, and conflict resolution.</p>"},{"location":"guides/#claude-code-sub-agents-new","title":"Claude Code Sub-Agents \u2b50 NEW","text":"<p>Complete guide for creating Claude Code CLI native sub-agents with YAML frontmatter. Covers file structure, agent design, and the critical restart requirement. Essential for specialized AI assistants.</p>"},{"location":"guides/#pai-sub-agent-implementation","title":"PAI Sub-Agent Implementation","text":"<p>Complete guide for creating and deploying PAI sub-agents. Includes templates, testing procedures, deployment process, and best practices for specialized agent development.</p>"},{"location":"guides/#version-control-github","title":"Version Control &amp; GitHub","text":""},{"location":"guides/#git-workflow-guide","title":"Git Workflow Guide","text":"<p>Basic Git operations for daily development. Covers commits, pushes, pulls, and recovery procedures. Start here for Git basics.</p>"},{"location":"guides/#github-quick-reference-new","title":"GitHub Quick Reference \u2b50 NEW","text":"<p>Quick commands and solutions for common GitHub CLI errors. Includes project board management and essential operations. Perfect for quick lookups.</p>"},{"location":"guides/#github-cli-guide","title":"GitHub CLI Guide","text":"<p>Comprehensive GitHub CLI reference. Covers issues, PRs, GraphQL API, and advanced features. Use this for detailed GitHub operations.</p>"},{"location":"guides/#claude-code-pm-guide-new","title":"Claude Code PM Guide \u2b50 NEW","text":"<p>Optimized project management guide specifically for Claude Code CLI. Covers Git hygiene, issue tracking, codebase maintenance, and technical debt prevention.</p>"},{"location":"guides/#working-with-ai-agents-new","title":"Working with AI Agents \u2b50 NEW","text":"<p>Practical lessons from collaborating with various AI agents. Includes common behaviors, review processes, and coordination tips.</p>"},{"location":"guides/#mcp-claude-code-setup-new","title":"MCP Claude Code Setup \u2b50 NEW","text":"<p>Complete guide for setting up the PAI MCP Toolkit with Claude Code CLI. Includes installation, authentication, and usage examples for task management, email, calendar, Slack, and file operations.</p>"},{"location":"guides/#vite-deployment-guide-new","title":"Vite Deployment Guide \u2b50 NEW","text":"<p>Quick fixes for common Vite app deployment issues. Covers blank screens, CSS problems, and nginx configuration.</p>"},{"location":"guides/#testing","title":"Testing","text":""},{"location":"guides/#jtools-testing-guide","title":"JTools Testing Guide","text":"<p>Comprehensive guide to using the JTools Testing Toolkit for multi-language testing across Python, JavaScript, and Bash.</p>"},{"location":"guides/#browser-testing-guide","title":"Browser Testing Guide","text":"<p>Learn how to write and run browser automation tests using Playwright.</p>"},{"location":"guides/#development","title":"Development","text":""},{"location":"guides/#git-workflow","title":"Git Workflow","text":"<p>Best practices for version control: - Conventional commits with <code>jcommit</code> - Branch management - PR process</p>"},{"location":"guides/#api-development","title":"API Development","text":"<p>Building and testing APIs: - FastAPI patterns - Authentication - Testing strategies</p>"},{"location":"guides/#frontend-development","title":"Frontend Development","text":"<p>Web application development: - Modular architecture - ES6 modules - Testing with Playwright</p>"},{"location":"guides/#operations","title":"Operations","text":""},{"location":"guides/#deployment","title":"Deployment","text":"<p>Deploying applications: - Service configuration - Nginx setup - SSL certificates</p>"},{"location":"guides/#monitoring","title":"Monitoring","text":"<p>System monitoring setup: - Heartbeat checks - Log aggregation - Alert configuration</p>"},{"location":"guides/#backup-recovery","title":"Backup &amp; Recovery","text":"<p>Data protection strategies: - Automated backups - Recovery procedures - Testing restore process</p>"},{"location":"guides/#integration","title":"Integration","text":""},{"location":"guides/#google-workspace","title":"Google Workspace","text":"<p>Integrating with Google services: - OAuth setup - Service accounts - API usage</p>"},{"location":"guides/#slack-integration","title":"Slack Integration","text":""},{"location":"guides/#claude-cli-advanced-features","title":"Claude CLI Advanced Features","text":"<p>Dynamic system prompt customization for context-aware responses.</p>"},{"location":"guides/#slack-webhooks-guide","title":"Slack Webhooks Guide","text":"<p>Comprehensive guide to webhook configuration and usage.</p> <p>Setting up Slack notifications: - Bot configuration - Channel management - Alert routing</p>"},{"location":"guides/#third-party-apis","title":"Third-party APIs","text":"<p>Working with external services: - Perplexity AI - OpenAI - Custom integrations</p>"},{"location":"guides/#security","title":"Security","text":""},{"location":"guides/#authentication","title":"Authentication","text":"<p>Implementing authentication: - Basic auth setup - Cookie management - Token handling</p>"},{"location":"guides/#ssltls","title":"SSL/TLS","text":"<p>Certificate management: - Let's Encrypt setup - Auto-renewal - Troubleshooting</p>"},{"location":"guides/#secrets-management","title":"Secrets Management","text":"<p>Handling sensitive data: - Environment variables - Token storage - Key rotation</p>"},{"location":"guides/#maintenance","title":"Maintenance","text":""},{"location":"guides/#daily-tasks","title":"Daily Tasks","text":"<p>Routine maintenance: - Log rotation - Cache cleanup - Health checks</p>"},{"location":"guides/#updates","title":"Updates","text":"<p>Keeping systems current: - Dependency updates - Security patches - Version upgrades</p>"},{"location":"guides/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions: - Service failures - Performance issues - Debug techniques</p>"},{"location":"guides/#advanced-topics","title":"Advanced Topics","text":""},{"location":"guides/#performance-optimization","title":"Performance Optimization","text":"<p>Improving system performance: - Caching strategies - Database optimization - Load testing</p>"},{"location":"guides/#scaling","title":"Scaling","text":"<p>Growing the infrastructure: - Horizontal scaling - Load balancing - Resource planning</p>"},{"location":"guides/#automation","title":"Automation","text":"<p>Automating workflows: - Cron jobs - GitHub Actions - Custom scripts</p>"},{"location":"guides/#quick-references","title":"Quick References","text":"<ul> <li>Command Reference</li> <li>API Reference</li> <li>Configuration Files</li> <li>Environment Variables</li> </ul>"},{"location":"guides/ai-agent-collaboration/","title":"AI Agent Team Collaboration","text":"<p>Guidelines for effective collaboration between multiple AI agents on the same project.</p>"},{"location":"guides/ai-agent-collaboration/#communication-channels","title":"Communication Channels","text":""},{"location":"guides/ai-agent-collaboration/#github-issues","title":"GitHub Issues","text":"<p>Purpose: Task-specific discussions and progress tracking</p> <p>When to use: - Reporting bugs - Discussing implementation details - Asking task-specific questions - Providing status updates</p> <p>Format: <pre><code>## Progress Update\n\n### Completed \u2705\n- Implemented basic keyboard shortcuts\n- Added visual feedback\n\n### In Progress \ud83d\udd04\n- Writing tests for all shortcuts\n- Updating documentation\n\n### Blocked \u274c\n- Need clarification on mobile behavior\n\n### Next Steps \ud83d\udcdd\n- Complete test coverage\n- Create PR for review\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#github-discussions","title":"GitHub Discussions","text":"<p>Purpose: General team communication and knowledge sharing</p> <p>When to use: - Introducing yourself to the team - Discussing architecture decisions - Sharing learnings and tips - Asking general questions - Coordinating between issues</p> <p>Categories: - \ud83d\udcac General: Open discussions - \ud83d\udca1 Ideas: Feature proposals - \ud83d\ude4f Q&amp;A: Questions and answers - \ud83d\udce3 Announcements: Team updates - \ud83c\udfaf Planning: Sprint planning and coordination</p>"},{"location":"guides/ai-agent-collaboration/#project-board-workflow","title":"Project Board Workflow","text":""},{"location":"guides/ai-agent-collaboration/#issue-lifecycle","title":"Issue Lifecycle","text":"<pre><code>graph LR\n    A[To Do] --&gt; B[In Progress]\n    B --&gt; C[In Review]\n    B --&gt; D[Blocked]\n    D --&gt; B\n    C --&gt; E[Done]\n    C --&gt; B</code></pre>"},{"location":"guides/ai-agent-collaboration/#status-updates","title":"Status Updates","text":"<p>Starting work: <pre><code># Comment on issue\ngh issue comment 8 --body \"Starting work on this issue. Moving to In Progress.\n\nInitial plan:\n1. Research keyboard event handling\n2. Implement shortcuts\n3. Add tests\n4. Update documentation\"\n\n# Assign yourself\ngh issue edit 8 --add-assignee @me\n</code></pre></p> <p>Daily updates: <pre><code>gh issue comment 8 --body \"## Daily Update - $(date +%Y-%m-%d)\n\n### Progress\n- \u2705 Implemented W, R, X shortcuts\n- \ud83d\udd04 Working on O shortcut (conflict with browser)\n\n### Tomorrow\n- Complete O shortcut implementation\n- Start writing tests\"\n</code></pre></p> <p>When blocked: <pre><code>gh issue comment 8 --body \"## \ud83d\udea8 Blocked\n\n**Issue**: The 'O' key conflicts with browser shortcuts in Firefox.\n\n**Tried**:\n- preventDefault() - doesn't work for some browser shortcuts\n- Using Alt+O - feels unnatural\n\n**Need**: Guidance on alternative approach or acceptance of limitation\n\nMoving to Blocked status.\"\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#handoff-procedures","title":"Handoff Procedures","text":""},{"location":"guides/ai-agent-collaboration/#context-preservation","title":"Context Preservation","text":"<p>When handing off work to another agent:</p> <pre><code># Handoff Summary\n\n## Current State\n- Branch: `feature/issue-8-keyboard-shortcuts`\n- Last commit: `a1b2c3d feat: add W, R, X shortcuts`\n- Tests: 3/5 passing\n\n## Completed\n1. Basic keyboard event listener\n2. W, R, X shortcuts working\n3. Visual feedback for active mode\n\n## Remaining Work\n1. Fix O shortcut conflict\n2. Add remaining tests\n3. Update user documentation\n4. Mobile touch support (optional)\n\n## Key Files\n- `src/components/Controls/keyboard.js` - Main implementation\n- `tests/keyboard.spec.js` - Test file\n- `docs/user-guide.md` - Needs updating\n\n## Known Issues\n- Firefox blocks 'O' key even with preventDefault\n- Mobile needs different approach (long press?)\n\n## Suggested Next Steps\n1. Try modifier key approach (Shift+O)\n2. Or implement toggle mode (press again to deactivate)\n</code></pre>"},{"location":"guides/ai-agent-collaboration/#code-comments-for-handoff","title":"Code Comments for Handoff","text":"<pre><code>// TODO(next-agent): This approach doesn't work in Firefox\n// Tried: preventDefault, stopPropagation, capture phase\n// Consider: Using modifier keys or different key mapping\ndocument.addEventListener('keydown', (e) =&gt; {\n  if (e.key === 'o' || e.key === 'O') {\n    e.preventDefault(); // \u274c Doesn't work in Firefox\n    activatePaintMode('O');\n  }\n});\n\n// HANDOFF NOTE: Tests 4 and 5 are failing because of the above issue\n// They're marked as .skip() for now\n</code></pre>"},{"location":"guides/ai-agent-collaboration/#avoiding-conflicts","title":"Avoiding Conflicts","text":""},{"location":"guides/ai-agent-collaboration/#1-branch-protection","title":"1. Branch Protection","text":"<p>Always work on feature branches: <pre><code># Check for existing branches\ngit branch -r | grep issue-8\n\n# Create your own sub-branch if needed\ngit checkout -b feature/issue-8-tests\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#2-file-locking-informal","title":"2. File Locking (Informal)","text":"<p>Comment when starting major changes: <pre><code>gh issue comment 8 --body \"\ud83d\udcdd Working on keyboard.js for the next hour. Will update when done.\"\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#3-regular-pulls","title":"3. Regular Pulls","text":"<p>Stay synchronized: <pre><code># Every 30 minutes or before major changes\ngit pull origin main\ngit pull origin feature/issue-8-keyboard-shortcuts\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#code-review-etiquette","title":"Code Review Etiquette","text":""},{"location":"guides/ai-agent-collaboration/#for-reviewers","title":"For Reviewers","text":"<p>Be constructive: <pre><code>&lt;!-- Instead of --&gt;\nThis code is wrong.\n\n&lt;!-- Say --&gt;\nThis works, but consider using event delegation for better performance:\n\\```javascript\ncontainer.addEventListener('keydown', handleKeyPress);\n\\```\n</code></pre></p> <p>Test before approving: <pre><code># Checkout PR\ngh pr checkout 123\n\n# Run tests\njtest\n\n# Test manually\nnpm run dev\n# Actually try the feature!\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#for-authors","title":"For Authors","text":"<p>Make review easy: <pre><code>## PR Description\n\n### Changes\n- Added keyboard shortcuts (W, R, X, O)\n- Visual feedback when activated\n- Tests for all shortcuts\n\n### How to Test\n1. Run `npm run dev`\n2. Open http://localhost:5173\n3. Press W, R, X, or O keys\n4. Observe paint mode changes\n\n### Screenshots\n[Include screenshots or GIFs]\n\n### Related\nCloses #8\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#coordinating-multiple-agents","title":"Coordinating Multiple Agents","text":""},{"location":"guides/ai-agent-collaboration/#daily-standup-async","title":"Daily Standup (Async)","text":"<p>Post in team Discussion daily: <pre><code># Daily Update - @agent-name - 2025-07-18\n\n## Yesterday\n- \u2705 Completed save functionality fix (#6)\n- \u2705 All tests passing\n\n## Today\n- \ud83c\udfaf Starting keyboard shortcuts (#8)\n- \ud83d\udcda Review PR #124\n\n## Blockers\n- None\n\n## Questions\n- Should we support Vim-style navigation (hjkl)?\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#claiming-issues","title":"Claiming Issues","text":"<p>Before starting work: <pre><code># Check if someone is working on it\ngh issue view 8\n\n# If unassigned, claim it\ngh issue comment 8 --body \"I'll take this one! \ud83d\ude4b\"\ngh issue edit 8 --add-assignee @me\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#pair-programming-sequential","title":"Pair Programming (Sequential)","text":"<p>When complex issues need multiple perspectives:</p> <p>Agent 1: <pre><code>gh issue comment 8 --body \"## Pair Programming Session 1/2\n\nImplemented basic structure:\n- Event listener setup \u2705\n- Paint mode activation \u2705\n- Need help with: Browser compatibility\n\nPushing to branch: `feature/issue-8-keyboard-shortcuts`\nNext agent, please pull and continue with compatibility fixes.\"\n</code></pre></p> <p>Agent 2: <pre><code>gh issue comment 8 --body \"## Pair Programming Session 2/2\n\nPulled latest changes. Fixed compatibility:\n- Added Firefox workaround \u2705\n- Safari tested \u2705\n- Edge tested \u2705\n\nReady for final review and merge.\"\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#knowledge-sharing","title":"Knowledge Sharing","text":""},{"location":"guides/ai-agent-collaboration/#document-learnings","title":"Document Learnings","text":"<p>After solving difficult problems:</p> <p>In Discussions: <pre><code># TIL: Firefox Keyboard Shortcuts\n\n## Problem\nFirefox reserves certain keys and preventDefault() doesn't work.\n\n## Solution\nUse modifier keys or alternative key mappings:\n- Instead of 'O', use 'Shift+O'\n- Or use number keys: 1, 2, 3, 4\n\n## Code Example\n\\```javascript\nif (e.shiftKey &amp;&amp; e.key === 'O') {\n  activatePaintMode('O');\n}\n\\```\n\n## References\n- MDN: [Keyboard Events](https://developer.mozilla.org/...)\n- Stack Overflow: [Firefox preventDefault issue](https://...)\n</code></pre></p>"},{"location":"guides/ai-agent-collaboration/#share-useful-patterns","title":"Share Useful Patterns","text":"<pre><code># Pattern: Debounced Auto-save\n\nFound this useful pattern for the shifts app:\n\n\\```javascript\nconst saveDebounced = debounce(async () =&gt; {\n  await storageService.save(scheduleData);\n  showNotification('Saved');\n}, 2000);\n\n// Auto-save on changes\nscheduleElement.addEventListener('change', saveDebounced);\n\\```\n\nBenefits:\n- Reduces API calls\n- Better UX (no save button needed)\n- Prevents data loss\n</code></pre>"},{"location":"guides/ai-agent-collaboration/#conflict-resolution","title":"Conflict Resolution","text":""},{"location":"guides/ai-agent-collaboration/#technical-conflicts","title":"Technical Conflicts","text":"<p>When agents disagree on approach:</p> <ol> <li>Document both approaches in the issue</li> <li>List pros/cons objectively</li> <li>Test both if possible</li> <li>Ask for team input in Discussions</li> <li>Project owner makes final decision</li> </ol>"},{"location":"guides/ai-agent-collaboration/#merge-conflicts","title":"Merge Conflicts","text":"<pre><code># Always pull before pushing\ngit pull origin main\n\n# If conflicts occur\ngit status  # See conflicted files\n\n# Communicate immediately\ngh issue comment 8 --body \"\u26a0\ufe0f Merge conflict in keyboard.js\n\nConflicting changes:\n- My version: Uses event delegation\n- Main branch: Direct event listeners\n\nResolving now, will preserve both approaches and let tests decide.\"\n</code></pre>"},{"location":"guides/ai-agent-collaboration/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Communicate early and often</li> <li>Update issue status promptly</li> <li>Document decisions and learnings</li> <li>Test others' code before commenting</li> <li>Be helpful, not critical</li> <li>Share knowledge generously</li> <li>Ask for help when stuck</li> <li>Respect others' work</li> <li>Keep discussions professional</li> <li>Celebrate team successes</li> </ol>"},{"location":"guides/ai-agent-collaboration/#team-resources","title":"Team Resources","text":"<ul> <li>Onboarding Guide</li> <li>Development Guide</li> <li>Testing Guide</li> <li>GitHub Discussions</li> <li>Project Board</li> </ul>"},{"location":"guides/ai-agent-debugging-philosophy/","title":"AI Agent Debugging Philosophy","text":"<p>This guide captures key learnings and best practices for AI agents when debugging complex software issues. It is based on a real-world case study of a multi-layered bug in the Shifts application (Issue #12).</p>"},{"location":"guides/ai-agent-debugging-philosophy/#core-principles","title":"Core Principles","text":"<ol> <li>Trust Your Analysis: When you have systematically traced a problem to its root cause, have the confidence to implement the solution you've identified. Doubting a correct analysis is a common pitfall.</li> <li>Systematic Hypothesis Testing: Follow a structured approach. Form a hypothesis, test it, and document the result. If the hypothesis is wrong, form a new one based on what you've learned. This is not failure; it is progress.</li> <li>Look for Secondary Bugs: It is common for a primary bug to be masked by one or more secondary bugs. Fixing these is necessary progress, even if it doesn't immediately solve the main issue. In the case of Issue #12, a timezone error and a data loading order flaw were both real bugs that needed fixing.</li> <li>Trace the Full Data Lifecycle: Do not make assumptions about where data is being corrupted. Trace it from its point of creation to its final point of use (e.g., from <code>scheduleGenerator.js</code> to <code>storageService</code> to <code>main.js</code> to the UI).</li> <li>Implement the Simplest Fix: Once the root cause is found, implement the most direct and simple fix to verify it. In the case of Issue #12, the fix was a small, intelligent merge loop, not a complex library or refactor.</li> </ol>"},{"location":"guides/ai-agent-debugging-philosophy/#best-practices-for-visual-analysis","title":"Best Practices for Visual Analysis","text":"<p>When programmatic verification is insufficient, visual analysis of a UI screenshot can be used. However, this is prone to error if not done correctly.</p> <ol> <li>Do Not Assume: Never assume a successful screenshot command means the content is correct. The screenshot might be blank, show an error state, or be visually wrong.</li> <li>Use Multimodal Analysis: Use a tool like <code>gemini.py analyze</code> to programmatically analyze the content of the screenshot.</li> <li> <p>Construct a Specific, Context-Rich Prompt: Do not ask simple, open-ended questions. Provide detailed context to guide the vision model.</p> <ul> <li>Bad Prompt: <code>\"What's in this image?\"</code> (Leads to hallucination)</li> <li>Good Prompt: <code>\"This is a screenshot of a web application's user interface. The application is a shift scheduling tool. Focus your analysis on the grid for the project named 'Project Kaamanen'. Specifically, look at the rows for employees 'Niina' and 'Emilia'. Are there colored cells containing the letter 'W' in these two rows? Answer only with YES or NO.\"</code></li> </ul> </li> </ol> <p>This method provides a much higher degree of confidence than a flawed assumption.</p>"},{"location":"guides/ai-agent-debugging-philosophy/#a-case-study-the-shifts-app-scheduling-bug-issue-12","title":"A Case Study: The Shifts App Scheduling Bug (Issue #12)","text":"<p>This issue provides a perfect example of the debugging process.</p> <ul> <li>Symptom: A generated schedule was not appearing in the UI.</li> <li>Hypothesis 1 (Incorrect): The schedule generation algorithm was flawed.<ul> <li>Action: Wrote unit tests.</li> <li>Result: The algorithm was correct.</li> </ul> </li> <li>Hypothesis 2 (Partially Correct): Date/timezone calculations were incorrect.<ul> <li>Action: Corrected date logic to use UTC.</li> <li>Result: Fixed a real but secondary bug. The main symptom persisted.</li> </ul> </li> <li>Hypothesis 3 (Partially Correct): The data loading order was wrong.<ul> <li>Action: Refactored <code>main.js</code> to load the generated schedule before saved data.</li> <li>Result: Fixed a real architectural flaw. The main symptom persisted.</li> </ul> </li> <li>Hypothesis 4 (Root Cause): A shallow data merge was overwriting good data.<ul> <li>Analysis: An empty array (<code>[]</code>) from a saved file was overwriting the correctly generated schedule array.</li> <li>Correct Solution: Implement an intelligent merge that only overwrites the base data if the new data is valid and non-empty.</li> </ul> </li> </ul>"},{"location":"guides/ai-agent-debugging-philosophy/#practical-steps-for-gemini","title":"Practical Steps for Gemini","text":"<ol> <li>When you believe you have found the root cause, state it clearly.</li> <li>Propose the specific, minimal code change required to fix it.</li> <li>Proceed with implementing that change. Do not stop at the analysis phase.</li> <li>Verify the fix with a direct test (e.g., running the app and taking a screenshot).</li> <li>If the fix works, commit it with a clear message that explains the root cause and the solution.</li> </ol>"},{"location":"guides/ai-agent-development/","title":"AI Agent Development Guide","text":"<p>Technical reference for AI agents developing in the kaut.to ecosystem.</p>"},{"location":"guides/ai-agent-development/#development-philosophy","title":"Development Philosophy","text":""},{"location":"guides/ai-agent-development/#context-window-optimization","title":"Context Window Optimization","text":"<p>Design systems that fit within AI context windows:</p> <ol> <li>Modular Files: Keep files under 200 lines</li> <li>Clear Boundaries: One concept per file</li> <li>Self-Contained: Minimize cross-file dependencies</li> <li>Descriptive Names: File names should explain purpose</li> </ol>"},{"location":"guides/ai-agent-development/#example-modular-architecture","title":"Example: Modular Architecture","text":"<pre><code>shifts/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.js                 # Entry point (&lt; 50 lines)\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2514\u2500\u2500 index.js           # Configuration (&lt; 100 lines)\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Schedule/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.js       # Public API\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Schedule.js    # Main component (&lt; 200 lines)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PersonRow.js   # Sub-component\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils.js       # Helper functions\n\u2502   \u2502   \u2514\u2500\u2500 Controls/\n\u2502   \u2502       \u2514\u2500\u2500 index.js       # Control panel\n\u2502   \u2514\u2500\u2500 services/\n\u2502       \u251c\u2500\u2500 storage.js         # Data persistence\n\u2502       \u2514\u2500\u2500 export.js          # Export functionality\n</code></pre>"},{"location":"guides/ai-agent-development/#code-patterns-for-ai","title":"Code Patterns for AI","text":""},{"location":"guides/ai-agent-development/#1-entry-point-pattern","title":"1. Entry Point Pattern","text":"<p>Keep main files minimal:</p> <pre><code>// main.js - Application entry point\nimport { App } from './app/App.js';\nimport { config } from './config/index.js';\n\n// Initialize application\nconst app = new App(config);\napp.start();\n\n// Export for debugging\nwindow.app = app;\n</code></pre>"},{"location":"guides/ai-agent-development/#2-service-pattern","title":"2. Service Pattern","text":"<p>Encapsulate functionality:</p> <pre><code>// services/storage.js\nexport const storageService = {\n  async save(data) {\n    // Single responsibility: save data\n  },\n\n  async load() {\n    // Single responsibility: load data\n  },\n\n  async clear() {\n    // Single responsibility: clear data\n  }\n};\n</code></pre>"},{"location":"guides/ai-agent-development/#3-component-pattern","title":"3. Component Pattern","text":"<p>Self-contained UI components:</p> <pre><code>// components/Schedule/Schedule.js\nexport class Schedule {\n  constructor(options) {\n    this.container = options.container;\n    this.data = options.data;\n    this.onCellChange = options.onCellChange;\n  }\n\n  render() {\n    // Only handles rendering\n  }\n\n  bindEvents() {\n    // Only handles events\n  }\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#4-configuration-pattern","title":"4. Configuration Pattern","text":"<p>Centralized settings:</p> <pre><code>// config/index.js\nexport const config = {\n  api: {\n    baseUrl: process.env.API_URL || 'http://localhost:8003',\n    timeout: 5000\n  },\n  storage: {\n    key: 'app_data_v1',\n    version: 1\n  },\n  ui: {\n    theme: 'light',\n    animations: true\n  }\n};\n</code></pre>"},{"location":"guides/ai-agent-development/#testing-strategies","title":"Testing Strategies","text":""},{"location":"guides/ai-agent-development/#1-test-file-organization","title":"1. Test File Organization","text":"<p>Mirror source structure:</p> <pre><code>src/\n\u251c\u2500\u2500 components/Schedule/Schedule.js\n\u2514\u2500\u2500 services/storage.js\n\ntests/\n\u251c\u2500\u2500 components/Schedule/Schedule.test.js\n\u2514\u2500\u2500 services/storage.test.js\n</code></pre>"},{"location":"guides/ai-agent-development/#2-test-patterns","title":"2. Test Patterns","text":"<p>Unit Test Example: <pre><code>// Schedule.test.js\nimport { Schedule } from '../../src/components/Schedule/Schedule.js';\n\ndescribe('Schedule Component', () =&gt; {\n  test('renders with correct number of cells', () =&gt; {\n    const schedule = new Schedule({\n      container: document.createElement('div'),\n      data: mockData\n    });\n\n    schedule.render();\n    const cells = schedule.container.querySelectorAll('.day-cell');\n    expect(cells.length).toBe(825); // 11 employees \u00d7 75 days\n  });\n});\n</code></pre></p> <p>Integration Test Example: <pre><code>// save-flow.spec.js\ntest('complete save workflow', async ({ page }) =&gt; {\n  // 1. Navigate\n  await page.goto('https://kaut.to/shifts/');\n\n  // 2. Make change\n  await page.click('.day-cell:first-child');\n\n  // 3. Save\n  await page.click('button:has-text(\"Save\")');\n\n  // 4. Verify persistence\n  await page.reload();\n  const cell = page.locator('.day-cell:first-child');\n  await expect(cell).toHaveClass(/status-W/);\n});\n</code></pre></p>"},{"location":"guides/ai-agent-development/#3-test-driven-development","title":"3. Test-Driven Development","text":"<ol> <li> <p>Write test first: <pre><code>test('should validate email format', () =&gt; {\n  expect(isValidEmail('user@example.com')).toBe(true);\n  expect(isValidEmail('invalid')).toBe(false);\n});\n</code></pre></p> </li> <li> <p>Implement minimal code: <pre><code>function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n</code></pre></p> </li> <li> <p>Refactor if needed</p> </li> </ol>"},{"location":"guides/ai-agent-development/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"guides/ai-agent-development/#1-strategic-logging","title":"1. Strategic Logging","text":"<pre><code>// Use console groups for clarity\nconsole.group('Data Loading');\nconsole.log('Fetching from:', url);\nconsole.log('Response:', response);\nconsole.groupEnd();\n\n// Use console.table for data\nconsole.table(scheduleData);\n\n// Use console.time for performance\nconsole.time('render');\nrenderSchedule();\nconsole.timeEnd('render');\n</code></pre>"},{"location":"guides/ai-agent-development/#2-error-boundaries","title":"2. Error Boundaries","text":"<pre><code>class ErrorBoundary {\n  constructor(container) {\n    this.container = container;\n  }\n\n  try(fn, fallback) {\n    try {\n      return fn();\n    } catch (error) {\n      console.error('Error caught:', error);\n      this.showError(error);\n      if (fallback) fallback(error);\n    }\n  }\n\n  showError(error) {\n    this.container.innerHTML = `\n      &lt;div class=\"error-message\"&gt;\n        &lt;h3&gt;Something went wrong&lt;/h3&gt;\n        &lt;p&gt;${error.message}&lt;/p&gt;\n      &lt;/div&gt;\n    `;\n  }\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#3-development-helpers","title":"3. Development Helpers","text":"<pre><code>// Add debug mode\nif (window.location.search.includes('debug=true')) {\n  window.DEBUG = true;\n  window.app = app;  // Expose for console access\n\n  // Enhanced logging\n  const originalLog = console.log;\n  console.log = (...args) =&gt; {\n    originalLog(new Date().toISOString(), ...args);\n  };\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guides/ai-agent-development/#1-lazy-loading","title":"1. Lazy Loading","text":"<pre><code>// Only load when needed\nasync function loadFeature() {\n  const { AdvancedFeature } = await import('./features/Advanced.js');\n  return new AdvancedFeature();\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#2-debouncing","title":"2. Debouncing","text":"<pre><code>function debounce(fn, delay = 300) {\n  let timeoutId;\n  return (...args) =&gt; {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() =&gt; fn(...args), delay);\n  };\n}\n\n// Usage\nconst saveDebounced = debounce(saveData, 1000);\ninput.addEventListener('input', saveDebounced);\n</code></pre>"},{"location":"guides/ai-agent-development/#3-virtual-scrolling","title":"3. Virtual Scrolling","text":"<p>For large lists: <pre><code>class VirtualList {\n  constructor(container, items, rowHeight) {\n    this.container = container;\n    this.items = items;\n    this.rowHeight = rowHeight;\n    this.render();\n  }\n\n  render() {\n    const scrollTop = this.container.scrollTop;\n    const containerHeight = this.container.clientHeight;\n\n    const startIndex = Math.floor(scrollTop / this.rowHeight);\n    const endIndex = Math.ceil((scrollTop + containerHeight) / this.rowHeight);\n\n    const visibleItems = this.items.slice(startIndex, endIndex);\n    // Render only visible items\n  }\n}\n</code></pre></p>"},{"location":"guides/ai-agent-development/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guides/ai-agent-development/#1-input-validation","title":"1. Input Validation","text":"<pre><code>// Always validate user input\nfunction sanitizeInput(input) {\n  // Remove potential XSS\n  return input\n    .replace(/&lt;/g, '&amp;lt;')\n    .replace(/&gt;/g, '&amp;gt;')\n    .replace(/\"/g, '&amp;quot;')\n    .replace(/'/g, '&amp;#x27;');\n}\n\n// Validate data types\nfunction validateScheduleData(data) {\n  if (typeof data !== 'object') return false;\n\n  return Object.entries(data).every(([name, shifts]) =&gt; {\n    return typeof name === 'string' &amp;&amp; \n           Array.isArray(shifts) &amp;&amp;\n           shifts.every(shift =&gt; ['W', 'R', 'X', 'O'].includes(shift));\n  });\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#2-secure-api-calls","title":"2. Secure API Calls","text":"<pre><code>// services/api.js\nasync function authenticatedFetch(url, options = {}) {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Authorization': `Bearer ${getToken()}`,\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'  // Include cookies\n  });\n\n  if (!response.ok) {\n    throw new Error(`API error: ${response.status}`);\n  }\n\n  return response.json();\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#3-environment-variables","title":"3. Environment Variables","text":"<p>Never hardcode secrets: <pre><code>// config/index.js\nexport const config = {\n  api: {\n    key: process.env.API_KEY,  // From .env file\n    url: process.env.API_URL || 'http://localhost:8000'\n  }\n};\n\n// .env.example (commit this)\nAPI_KEY=your_api_key_here\nAPI_URL=https://api.example.com\n\n// .env (never commit)\nAPI_KEY=actual_secret_key\nAPI_URL=https://api.production.com\n</code></pre></p>"},{"location":"guides/ai-agent-development/#documentation-standards","title":"Documentation Standards","text":""},{"location":"guides/ai-agent-development/#1-jsdoc-comments","title":"1. JSDoc Comments","text":"<pre><code>/**\n * Processes schedule data for display\n * \n * @param {Object} rawData - Raw schedule data from API\n * @param {string} rawData.date - ISO date string\n * @param {Array&lt;Object&gt;} rawData.shifts - Array of shift objects\n * @returns {Object} Processed data ready for rendering\n * @throws {ValidationError} If data format is invalid\n * \n * @example\n * const processed = processScheduleData({\n *   date: '2025-07-18',\n *   shifts: [{ person: 'Alice', type: 'W' }]\n * });\n */\nfunction processScheduleData(rawData) {\n  // Implementation\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#2-readme-structure","title":"2. README Structure","text":"<p>Every project needs: <pre><code># Project Name\n\nBrief description of what this does.\n\n## Quick Start\n\n\\```bash\nnpm install\nnpm run dev\n\\```\n\n## Architecture\n\nDescribe the main components and how they interact.\n\n## API Reference\n\n### Endpoints\n\n- `GET /api/resource` - Get all resources\n- `POST /api/resource` - Create new resource\n\n## Testing\n\n\\```bash\nnpm test\n\\```\n\n## Deployment\n\n\\```bash\nnpm run build\nnpm run deploy\n\\```\n\n## Contributing\n\nSee [AI Agent Guide](https://docs.kaut.to/guides/ai-agent-onboarding/)\n</code></pre></p>"},{"location":"guides/ai-agent-development/#3-inline-documentation","title":"3. Inline Documentation","text":"<pre><code>// services/storage.js\n\n/**\n * Storage Service\n * \n * Handles all data persistence with automatic fallback:\n * 1. Try backend API first\n * 2. Fall back to localStorage if API fails\n * 3. Memory cache for performance\n */\nexport const storageService = {\n  cache: new Map(),\n\n  async save(key, data) {\n    // Cache immediately for optimistic updates\n    this.cache.set(key, data);\n\n    try {\n      // Attempt backend save\n      await api.save(key, data);\n    } catch (error) {\n      // Fallback to localStorage\n      console.warn('Backend save failed, using localStorage:', error);\n      localStorage.setItem(key, JSON.stringify(data));\n    }\n  }\n};\n</code></pre>"},{"location":"guides/ai-agent-development/#tool-integration","title":"Tool Integration","text":""},{"location":"guides/ai-agent-development/#1-using-pxpy-for-research","title":"1. Using px.py for Research","text":"<pre><code># Research before implementing\ncd /srv/jtools/px\npython3 px.py \"JavaScript event delegation best practices\"\npython3 px.py \"How to implement undo/redo in web app\"\npython3 px.py \"CORS error fixes for local development\"\n</code></pre>"},{"location":"guides/ai-agent-development/#2-continuous-testing","title":"2. Continuous Testing","text":"<pre><code># Run tests in watch mode\nnpx jest --watch\n\n# Or use our test runner\nwatch -n 5 /srv/jtools/jtest\n\n# Test specific features\n/srv/jtools/jtest --javascript keyboard.spec.js\n</code></pre>"},{"location":"guides/ai-agent-development/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<pre><code>// Add performance marks\nperformance.mark('render-start');\nrender();\nperformance.mark('render-end');\n\nperformance.measure('render', 'render-start', 'render-end');\n\n// Log performance\nconst entries = performance.getEntriesByType('measure');\nconsole.table(entries);\n</code></pre>"},{"location":"guides/ai-agent-development/#common-patterns-library","title":"Common Patterns Library","text":""},{"location":"guides/ai-agent-development/#state-management","title":"State Management","text":"<pre><code>class StateManager {\n  constructor(initialState = {}) {\n    this.state = initialState;\n    this.listeners = [];\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () =&gt; this.listeners = this.listeners.filter(l =&gt; l !== listener);\n  }\n\n  setState(updates) {\n    this.state = { ...this.state, ...updates };\n    this.listeners.forEach(listener =&gt; listener(this.state));\n  }\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#event-bus","title":"Event Bus","text":"<pre><code>class EventBus {\n  constructor() {\n    this.events = {};\n  }\n\n  on(event, handler) {\n    if (!this.events[event]) this.events[event] = [];\n    this.events[event].push(handler);\n  }\n\n  emit(event, data) {\n    if (!this.events[event]) return;\n    this.events[event].forEach(handler =&gt; handler(data));\n  }\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#api-client","title":"API Client","text":"<pre><code>class APIClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"guides/ai-agent-development/#next-steps","title":"Next Steps","text":"<ol> <li>Review the Testing Guide</li> <li>Study existing codebases for patterns</li> <li>Practice modular development</li> <li>Contribute to open issues</li> </ol> <p>Remember: The goal is to write code that other AI agents can easily understand, modify, and extend. Keep it simple, modular, and well-documented.</p>"},{"location":"guides/ai-agent-onboarding/","title":"AI Agent Onboarding Guide","text":"<p>Welcome to the kaut.to development team! This guide provides essential information for AI agents working on our projects.</p>"},{"location":"guides/ai-agent-onboarding/#quick-start-checklist","title":"Quick Start Checklist","text":"<ul> <li> Read this onboarding guide completely</li> <li> Understand Git workflow and conventions</li> <li> Learn about available tools and testing frameworks</li> <li> Review coding standards and documentation requirements</li> <li> Familiarize yourself with GitHub Issues and Project boards</li> <li> Join the team discussion on GitHub Discussions</li> </ul>"},{"location":"guides/ai-agent-onboarding/#core-principles","title":"Core Principles","text":""},{"location":"guides/ai-agent-onboarding/#1-fail-fast-fail-better","title":"1. Fail Fast, Fail Better","text":"<p>Always test your changes immediately: <pre><code># After ANY code change:\n1. Check syntax: node -c file.js OR python -m py_compile file.py\n2. Run tests: jtest\n3. Test deployment: python3 test-deployment.py\n4. Only then commit\n</code></pre></p> <p>If something breaks: - Don't hide it or try complex fixes - Report immediately in the issue - Revert to last working state - Try a different approach</p>"},{"location":"guides/ai-agent-onboarding/#2-small-atomic-changes","title":"2. Small, Atomic Changes","text":"<p>One change = One commit: <pre><code># BAD: Large commit with multiple changes\ngit commit -m \"fix everything\"\n\n# GOOD: Atomic commits\ngit commit -m \"fix: correct data format validation\"\ngit commit -m \"test: add save functionality test\"\ngit commit -m \"docs: update API documentation\"\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#3-communication-is-key","title":"3. Communication is Key","text":"<ul> <li>Issues: For specific tasks and bug reports</li> <li>Discussions: For general questions and team coordination</li> <li>Commit messages: Clear and descriptive</li> <li>Code comments: Explain WHY, not WHAT</li> </ul>"},{"location":"guides/ai-agent-onboarding/#git-workflow","title":"Git Workflow","text":""},{"location":"guides/ai-agent-onboarding/#basic-commands","title":"Basic Commands","text":"<pre><code># Always start by checking status\ngit status\n\n# Create a feature branch\ngit checkout -b feature/issue-8-keyboard-shortcuts\n\n# Make changes and test\n# ... edit files ...\nnode -c src/main.js  # Check syntax\njtest                # Run tests\n\n# Stage and commit\ngit add -p  # Review changes piece by piece\ngit commit -m \"feat: add keyboard shortcuts for paint modes\"\n\n# Push to GitHub\ngit push origin feature/issue-8-keyboard-shortcuts\n\n# Create PR via GitHub CLI\ngh pr create --title \"feat: add keyboard shortcuts\" --body \"Closes #8\"\n</code></pre>"},{"location":"guides/ai-agent-onboarding/#commit-message-format","title":"Commit Message Format","text":"<p>Follow Conventional Commits:</p> <ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation only</li> <li><code>style:</code> Code style (formatting, semicolons, etc)</li> <li><code>refactor:</code> Code restructuring without changing behavior</li> <li><code>test:</code> Adding or updating tests</li> <li><code>chore:</code> Maintenance tasks</li> </ul> <p>Examples: <pre><code>feat: add keyboard shortcuts for paint modes\nfix: correct schedule data validation\ndocs: update testing guide with new examples\ntest: add e2e tests for save functionality\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#branch-naming","title":"Branch Naming","text":"<p>Format: <code>type/issue-number-description</code></p> <p>Examples: - <code>feature/issue-8-keyboard-shortcuts</code> - <code>fix/issue-6-save-functionality</code> - <code>docs/improve-api-documentation</code></p>"},{"location":"guides/ai-agent-onboarding/#authentication-access","title":"Authentication &amp; Access","text":""},{"location":"guides/ai-agent-onboarding/#github-token","title":"GitHub Token","text":"<p>Located in <code>/srv/pai/.env</code>: <pre><code># Use for GitHub API calls\nGITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#http-basic-auth","title":"HTTP Basic Auth","text":"<p>Default for all kaut.to services: - Username: <code>kaut</code> - Password: <code>to</code></p> <p>Admin access (when needed): - Username: <code>joni</code> - Password: <code>Penacova</code></p>"},{"location":"guides/ai-agent-onboarding/#repository-access","title":"Repository Access","text":"<p>All repositories under: https://github.com/jkautto/ - Main app repos: shifts, pai, dai, jtools - Shared resources: kaut-shared - Documentation: docs</p>"},{"location":"guides/ai-agent-onboarding/#coding-standards","title":"Coding Standards","text":""},{"location":"guides/ai-agent-onboarding/#1-modular-architecture","title":"1. Modular Architecture","text":"<p>Bad: <pre><code>// 1000 lines of code in one file\nfunction doEverything() {\n  // ... massive function ...\n}\n</code></pre></p> <p>Good: <pre><code>// main.js\nimport { Schedule } from './components/Schedule.js';\nimport { storageService } from './services/storage.js';\n\n// components/Schedule.js\nexport class Schedule {\n  // Single responsibility: render schedule\n}\n\n// services/storage.js\nexport const storageService = {\n  // Single responsibility: handle data persistence\n}\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#2-ai-optimized-code","title":"2. AI-Optimized Code","text":"<p>Write code that AI agents can easily understand and modify:</p> <p>Use clear, descriptive names: <pre><code>// Bad\nconst d = new Date();\nconst u = users.filter(x =&gt; x.a);\n\n// Good\nconst currentDate = new Date();\nconst activeUsers = users.filter(user =&gt; user.isActive);\n</code></pre></p> <p>Add section comments: <pre><code>/**\n * Data Loading Section\n * Handles fetching and validating schedule data\n */\nasync loadScheduleData() {\n  // Implementation...\n}\n\n/**\n * Rendering Section\n * Manages DOM updates and user interface\n */\nrender() {\n  // Implementation...\n}\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#3-error-handling","title":"3. Error Handling","text":"<p>Always handle errors gracefully: <pre><code>try {\n  const data = await fetchData();\n  processData(data);\n} catch (error) {\n  console.error('Failed to fetch data:', error);\n  // Fallback behavior\n  showErrorMessage('Unable to load data. Please try again.');\n}\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#documentation-requirements","title":"Documentation Requirements","text":""},{"location":"guides/ai-agent-onboarding/#1-code-documentation","title":"1. Code Documentation","text":"<p>Every file needs a header: <pre><code>/**\n * Schedule Management Component\n * \n * Handles the visual display and interaction for shift schedules.\n * Part of the Shifts application.\n * \n * @module components/Schedule\n */\n</code></pre></p> <p>Document complex logic: <pre><code>/**\n * Validates schedule data format\n * \n * Expected format:\n * {\n *   \"PersonName\": [\"W\", \"O\", \"R\", ...],  // Array of shift codes\n *   ...\n * }\n * \n * @param {Object} data - Raw schedule data\n * @returns {boolean} True if valid, false otherwise\n */\nfunction validateScheduleData(data) {\n  // Implementation with inline comments for complex parts\n}\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#2-readme-updates","title":"2. README Updates","text":"<p>Always update README.md when: - Adding new features - Changing setup instructions - Modifying API endpoints - Adding dependencies</p>"},{"location":"guides/ai-agent-onboarding/#3-inline-comments","title":"3. Inline Comments","text":"<pre><code>// WHY comments (good):\n// We need to validate data here because the backend\n// might return legacy format from localStorage\nif (!isValidFormat(data)) {\n  data = convertLegacyFormat(data);\n}\n\n// WHAT comments (avoid):\n// Set x to 5\nx = 5;\n</code></pre>"},{"location":"guides/ai-agent-onboarding/#testing-requirements","title":"Testing Requirements","text":""},{"location":"guides/ai-agent-onboarding/#1-test-before-committing","title":"1. Test Before Committing","text":"<p>Always run tests: <pre><code># Run all tests\njtest\n\n# Run specific test type\njtest --javascript  # For web apps\njtest --python      # For Python tools\njtest --bash        # For shell scripts\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#2-write-tests-for-new-features","title":"2. Write Tests for New Features","text":"<p>Example JavaScript test: <pre><code>// keyboard-shortcuts.spec.js\ntest('should activate paint mode with keyboard', async ({ page }) =&gt; {\n  await page.goto('https://kaut.to/shifts/');\n\n  // Press 'W' key\n  await page.keyboard.press('w');\n\n  // Verify paint mode is active\n  const activeButton = page.locator('.paint-button.active');\n  await expect(activeButton).toHaveText('W');\n});\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#3-visual-testing","title":"3. Visual Testing","text":"<p>For UI changes: <pre><code># Capture before screenshot\npython3 test-deployment.py --screenshot before.png\n\n# Make changes\n\n# Capture after screenshot\npython3 test-deployment.py --screenshot after.png\n\n# Compare visually or use diff tools\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#available-tools","title":"Available Tools","text":""},{"location":"guides/ai-agent-onboarding/#1-research-with-perplexity-pxpy","title":"1. Research with Perplexity (px.py)","text":"<p>When you need to research something: <pre><code>cd /srv/jtools/px\npython3 px.py \"how to implement keyboard shortcuts in JavaScript\"\n</code></pre></p> <p>Use for: - Finding best practices - Researching error messages - Learning new APIs - Checking browser compatibility</p>"},{"location":"guides/ai-agent-onboarding/#2-testing-with-jtest","title":"2. Testing with jtest","text":"<pre><code># From any project directory\n/srv/jtools/jtest\n\n# Run continuously during development\nwatch -n 5 /srv/jtools/jtest\n</code></pre>"},{"location":"guides/ai-agent-onboarding/#3-git-helpers","title":"3. Git Helpers","text":"<pre><code># Commit with conventional format\n/srv/jtools/jcommit \"feat: add new feature\"\n\n# Check git history\ngit log --oneline -10\n</code></pre>"},{"location":"guides/ai-agent-onboarding/#github-project-board-workflow","title":"GitHub Project Board Workflow","text":""},{"location":"guides/ai-agent-onboarding/#issue-states","title":"Issue States","text":"<ol> <li>To Do: Issue created but not started</li> <li>In Progress: Actively working on it</li> <li>Blocked: Stuck and need help</li> <li>In Review: PR created and awaiting review</li> <li>Done: Completed and merged</li> </ol>"},{"location":"guides/ai-agent-onboarding/#moving-issues","title":"Moving Issues","text":"<p>When you start working: <pre><code># Comment on the issue\ngh issue comment 8 --body \"Starting work on keyboard shortcuts implementation\"\n\n# Move to In Progress (on project board)\n# This is usually done via GitHub UI\n</code></pre></p> <p>When blocked: <pre><code>gh issue comment 8 --body \"**Blocked**: Need clarification on which keys to use for shortcuts\"\n</code></pre></p> <p>When complete: <pre><code># Create PR\ngh pr create --title \"feat: add keyboard shortcuts\" --body \"Closes #8\n\n## Changes\n- Added keyboard event listeners\n- Implemented W, R, X, O shortcuts\n- Added visual feedback\n\n## Testing\n- Tested in Chrome, Firefox\n- Added automated tests\n- No visual regressions\"\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#communication-guidelines","title":"Communication Guidelines","text":""},{"location":"guides/ai-agent-onboarding/#github-issues","title":"GitHub Issues","text":"<p>Use for: - Specific bugs or features - Task tracking - Technical discussions - Progress updates</p> <p>Format: <pre><code>## Status Update\n\nCompleted:\n- \u2705 Research keyboard event handling\n- \u2705 Implement basic shortcuts\n\nIn Progress:\n- \ud83d\udd04 Adding visual feedback\n\nNext:\n- \ud83d\udcdd Write tests\n- \ud83d\udcdd Update documentation\n</code></pre></p>"},{"location":"guides/ai-agent-onboarding/#github-discussions","title":"GitHub Discussions","text":"<p>Use for: - General questions - Architecture discussions - Team coordination - Knowledge sharing - Introductions</p>"},{"location":"guides/ai-agent-onboarding/#code-reviews","title":"Code Reviews","text":"<p>When reviewing: 1. Test the changes locally 2. Check for syntax errors 3. Verify tests pass 4. Look for security issues 5. Suggest improvements kindly</p>"},{"location":"guides/ai-agent-onboarding/#environment-setup","title":"Environment Setup","text":""},{"location":"guides/ai-agent-onboarding/#local-development","title":"Local Development","text":"<ol> <li> <p>Clone repository: <pre><code>git clone https://github.com/jkautto/shifts.git\ncd shifts\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code># For Node.js projects\nnpm install\n\n# For Python projects\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Start development server: <pre><code># Check package.json for scripts\nnpm run dev\n</code></pre></p> </li> </ol>"},{"location":"guides/ai-agent-onboarding/#testing-environment","title":"Testing Environment","text":"<ul> <li>Local dev server: http://localhost:5173</li> <li>Production: https://kaut.to/shifts/</li> <li>Always test in both environments</li> </ul>"},{"location":"guides/ai-agent-onboarding/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":""},{"location":"guides/ai-agent-onboarding/#1-large-uncommitted-changes","title":"1. Large Uncommitted Changes","text":"<p>\u274c Don't: Work for hours without committing \u2705 Do: Commit every 15-30 minutes</p>"},{"location":"guides/ai-agent-onboarding/#2-ignoring-syntax-errors","title":"2. Ignoring Syntax Errors","text":"<p>\u274c Don't: Hope it works in production \u2705 Do: Always check syntax before committing</p>"},{"location":"guides/ai-agent-onboarding/#3-skipping-tests","title":"3. Skipping Tests","text":"<p>\u274c Don't: \"It works on my machine\" \u2705 Do: Run full test suite before pushing</p>"},{"location":"guides/ai-agent-onboarding/#4-poor-communication","title":"4. Poor Communication","text":"<p>\u274c Don't: Go silent when stuck \u2705 Do: Ask for help early and often</p>"},{"location":"guides/ai-agent-onboarding/#5-breaking-changes","title":"5. Breaking Changes","text":"<p>\u274c Don't: Change APIs without discussion \u2705 Do: Propose changes in issues first</p>"},{"location":"guides/ai-agent-onboarding/#getting-help","title":"Getting Help","text":"<ol> <li>Check documentation: https://docs.kaut.to</li> <li>GitHub CLI Guide: https://docs.kaut.to/guides/github-cli-guide/</li> <li>Search existing issues: <code>gh issue list --search \"keyword\"</code></li> <li>Ask in Discussions: For general questions</li> <li>Tag team members: @jkautto for urgent items</li> </ol>"},{"location":"guides/ai-agent-onboarding/#summary","title":"Summary","text":"<p>Remember the key principles: 1. Test everything before committing 2. Communicate progress and blockers 3. Write clear code that other agents can understand 4. Document your changes 5. Ask for help when needed</p> <p>Welcome to the team! We're excited to have you contributing to our projects. \ud83d\ude80</p>"},{"location":"guides/claude-cli-advanced/","title":"Claude CLI Advanced Features","text":""},{"location":"guides/claude-cli-advanced/#system-prompt-customization","title":"System Prompt Customization","text":"<p>The Claude CLI supports dynamic system prompt customization through command-line flags, enabling context-specific behavior without modifying code.</p>"},{"location":"guides/claude-cli-advanced/#available-flags","title":"Available Flags","text":""},{"location":"guides/claude-cli-advanced/#-system-prompt-override","title":"<code>--system-prompt</code> (Override)","text":"<p>Completely replaces the default system prompt.</p> <pre><code># Example: Technical expert\nclaude -p \"Review this Python code\" \\\n  --system-prompt \"You are a senior Python developer with 10 years of experience. Focus on performance, security, and maintainability.\"\n\n# Example: Content writer\nclaude -p \"Write product description for hiking boots\" \\\n  --system-prompt \"You are a professional copywriter specializing in outdoor gear. Write compelling, SEO-friendly descriptions that highlight features and benefits.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#-append-system-prompt-extend","title":"<code>--append-system-prompt</code> (Extend)","text":"<p>Adds instructions to the existing system prompt.</p> <pre><code># Example: Add formatting requirements\nclaude -p \"Analyze sales data\" \\\n  --append-system-prompt \"Always provide actionable recommendations. Format numbers with thousands separators. Keep analysis under 300 words.\"\n\n# Example: Add constraints\nclaude -p \"Draft email to team\" \\\n  --append-system-prompt \"Keep responses under 100 words. Use professional but friendly tone. Include a clear call-to-action.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#combined-usage","title":"Combined Usage","text":"<p>Both flags can be used together:</p> <pre><code>claude -p \"Create project timeline\" \\\n  --system-prompt \"You are an experienced project manager specializing in agile methodologies.\" \\\n  --append-system-prompt \"Include risk assessments for each milestone. Format as a table with dates.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#important-limitations","title":"Important Limitations","text":"<p>\u26a0\ufe0f These flags only work with <code>-p/--print</code> mode</p> <pre><code># \u2705 Correct - works with print mode\nclaude -p \"Your prompt\" --system-prompt \"Custom prompt\"\n\n# \u274c Wrong - won't work in interactive mode\nclaude --system-prompt \"Custom prompt\"  # Opens interactive session, ignores flag\n</code></pre>"},{"location":"guides/claude-cli-advanced/#paidai-integration-examples","title":"PAI/DAI Integration Examples","text":""},{"location":"guides/claude-cli-advanced/#monitoring-system-enhancement","title":"Monitoring System Enhancement","text":""},{"location":"guides/claude-cli-advanced/#morning-brief","title":"Morning Brief","text":"<pre><code>#!/bin/bash\nCALENDAR_DATA=$(gcal_tool today)\nTASK_DATA=$(task_tool today)\n\nclaude -p \"Create morning brief: Calendar: $CALENDAR_DATA Tasks: $TASK_DATA\" \\\n  --system-prompt \"You are Joni's personal morning assistant providing a warm, encouraging start to the day.\" \\\n  --append-system-prompt \"Highlight any conflicts. Mention family events prominently. Keep under 200 words. Use bullet points.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#email-triage","title":"Email Triage","text":"<pre><code>EMAIL_DATA=$(python3 /srv/pai/toolkit/gmail_tool.py unread)\n\nclaude -p \"Analyze emails for urgency: $EMAIL_DATA\" \\\n  --system-prompt \"You are an email triage specialist. Categorize emails by urgency and required action.\" \\\n  --append-system-prompt \"Flag emails from Riikka as VIP. Identify emails requiring response today. Summarize action items.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#slack-bot-integration","title":"Slack Bot Integration","text":"<p>In <code>/srv/pai/slack.py</code>:</p> <pre><code># Build command with Slack formatting\ncmd = [\n    '/home/joni/.npm-global/bin/claude', '-c', '-p',\n    f\"[Slack User: {user_id}] {text}\",\n    '--model', self.model,\n    '--append-system-prompt', \n    'Format your responses for Slack using Slack message formatting: Use *bold* (not **bold**), _italic_ (not *italic*), ~strikethrough~, `code`, ```code blocks```, and :emoji: syntax. Use \u2022 for bullet points.'\n]\n</code></pre>"},{"location":"guides/claude-cli-advanced/#context-aware-responses","title":"Context-Aware Responses","text":"<pre><code>def get_context_prompt(hour, stress_level):\n    \"\"\"Generate time and context-aware prompts\"\"\"\n\n    base_prompt = \"You are PAI, a helpful personal AI assistant.\"\n\n    if hour &lt; 9:\n        append = \"Morning context: Be energetic and motivating. Focus on the day ahead.\"\n    elif hour &lt; 17:\n        append = \"Workday context: Be focused and efficient. Prioritize urgent matters.\"\n    else:\n        append = \"Evening context: Help wind down. Focus on family time and relaxation.\"\n\n    if stress_level == \"high\":\n        append += \" User has a stressful day. Be extra supportive and suggest simplifications.\"\n\n    return base_prompt, append\n</code></pre>"},{"location":"guides/claude-cli-advanced/#prompt-engineering-best-practices","title":"Prompt Engineering Best Practices","text":""},{"location":"guides/claude-cli-advanced/#1-keep-prompts-concise","title":"1. Keep Prompts Concise","text":"<ul> <li>System prompts: Under 200 words</li> <li>Append prompts: Under 100 words</li> <li>Total combined: Under 500 words</li> </ul>"},{"location":"guides/claude-cli-advanced/#2-be-specific","title":"2. Be Specific","text":"<pre><code># \u274c Vague\n--append-system-prompt \"Be helpful\"\n\n# \u2705 Specific\n--append-system-prompt \"Provide step-by-step instructions. Number each step. Include time estimates.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#3-use-role-definitions","title":"3. Use Role Definitions","text":"<pre><code># Define expertise and perspective\n--system-prompt \"You are a senior DevOps engineer with expertise in Kubernetes and cloud architecture.\"\n\n# Add specific constraints\n--append-system-prompt \"Always consider security implications. Suggest monitoring strategies.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#4-format-instructions","title":"4. Format Instructions","text":"<pre><code># Specify output format\n--append-system-prompt \"Format response as: 1) Summary (2 sentences), 2) Details (bullet points), 3) Next steps (numbered list)\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#testing-prompts","title":"Testing Prompts","text":""},{"location":"guides/claude-cli-advanced/#quick-testing-script","title":"Quick Testing Script","text":"<pre><code>#!/bin/bash\n# test_prompts.sh\n\nTEST_INPUT=\"What are the top 3 priorities for today?\"\n\necho \"=== Testing Different Personalities ===\"\n\necho -e \"\\n1. Executive Assistant:\"\nclaude -p \"$TEST_INPUT\" \\\n  --system-prompt \"You are an executive assistant focused on productivity and efficiency.\"\n\necho -e \"\\n2. Life Coach:\"\nclaude -p \"$TEST_INPUT\" \\\n  --system-prompt \"You are a supportive life coach focused on work-life balance and wellbeing.\"\n\necho -e \"\\n3. Technical Advisor:\"\nclaude -p \"$TEST_INPUT\" \\\n  --system-prompt \"You are a technical advisor who relates everything to systems and optimization.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"guides/claude-cli-advanced/#dynamic-prompt-selection","title":"Dynamic Prompt Selection","text":"<pre><code># prompt_manager.py\nimport json\n\nclass PromptManager:\n    def __init__(self):\n        self.prompts = {\n            \"email\": {\n                \"urgent\": {\n                    \"system\": \"You are an email crisis manager.\",\n                    \"append\": \"Focus only on time-critical items. Be extremely concise.\"\n                },\n                \"normal\": {\n                    \"system\": \"You are an email assistant.\",\n                    \"append\": \"Summarize key points. Group by topic.\"\n                }\n            },\n            \"tasks\": {\n                \"planning\": {\n                    \"system\": \"You are a productivity coach.\",\n                    \"append\": \"Suggest time blocks. Consider energy levels.\"\n                },\n                \"review\": {\n                    \"system\": \"You are a project analyst.\",\n                    \"append\": \"Identify blockers. Suggest optimizations.\"\n                }\n            }\n        }\n\n    def get_prompt(self, category, mode):\n        prompt_config = self.prompts.get(category, {}).get(mode, {})\n        return (\n            prompt_config.get(\"system\", \"You are a helpful assistant.\"),\n            prompt_config.get(\"append\", \"\")\n        )\n</code></pre>"},{"location":"guides/claude-cli-advanced/#prompt-chaining","title":"Prompt Chaining","text":"<pre><code># First pass: Extract key information\nSUMMARY=$(claude -p \"Extract key points from: $LONG_TEXT\" \\\n  --system-prompt \"You are a summarization expert.\" \\\n  --append-system-prompt \"Output only bullet points. Maximum 5 points.\")\n\n# Second pass: Generate action items\nclaude -p \"Based on these points, what actions are needed: $SUMMARY\" \\\n  --system-prompt \"You are a project manager focused on execution.\" \\\n  --append-system-prompt \"Create specific, assignable tasks with deadlines.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#performance-considerations","title":"Performance Considerations","text":""},{"location":"guides/claude-cli-advanced/#token-usage","title":"Token Usage","text":"<ul> <li>Longer prompts = more tokens = higher cost</li> <li>System prompts are included in every request</li> <li>Balance specificity with efficiency</li> </ul>"},{"location":"guides/claude-cli-advanced/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Cache frequently used prompt combinations\nEMAIL_PROMPT=\"--system-prompt 'You are an email assistant.' --append-system-prompt 'Be concise.'\"\nclaude -p \"Process email\" $EMAIL_PROMPT\n</code></pre>"},{"location":"guides/claude-cli-advanced/#monitoring-prompt-effectiveness","title":"Monitoring Prompt Effectiveness","text":"<pre><code># Log prompt performance\nimport time\nimport json\n\ndef log_prompt_usage(prompt_type, system_prompt, append_prompt, response_time, quality_score):\n    log_entry = {\n        \"timestamp\": time.time(),\n        \"type\": prompt_type,\n        \"system_prompt_length\": len(system_prompt),\n        \"append_prompt_length\": len(append_prompt),\n        \"response_time\": response_time,\n        \"quality_score\": quality_score\n    }\n\n    with open(\"/srv/pai/logs/prompt_performance.jsonl\", \"a\") as f:\n        f.write(json.dumps(log_entry) + \"\\n\")\n</code></pre>"},{"location":"guides/claude-cli-advanced/#security-considerations","title":"Security Considerations","text":""},{"location":"guides/claude-cli-advanced/#never-include-sensitive-data","title":"Never Include Sensitive Data","text":"<pre><code># \u274c Wrong - exposes API key\n--system-prompt \"Use API key: sk-123456\"\n\n# \u2705 Right - reference without exposing\n--system-prompt \"You have access to approved APIs. Never expose credentials.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#sanitize-user-input","title":"Sanitize User Input","text":"<pre><code>def sanitize_prompt(user_input):\n    # Remove potential prompt injections\n    sanitized = user_input.replace(\"--system-prompt\", \"\")\n    sanitized = sanitized.replace(\"--append-system-prompt\", \"\")\n    return sanitized\n</code></pre>"},{"location":"guides/claude-cli-advanced/#integration-with-pai-monitoring","title":"Integration with PAI Monitoring","text":"<p>The Intelligence Stack can leverage these features:</p> <pre><code># /srv/pai/monitoring/email_processor.py\nasync def process_emails(self, email_data):\n    # Determine urgency level\n    urgent_count = sum(1 for e in email_data if 'urgent' in e.get('subject', '').lower())\n\n    if urgent_count &gt; 3:\n        system_prompt = \"You are in crisis management mode. Be extremely direct.\"\n        append_prompt = \"List only critical actions. Use @mentions for urgent items.\"\n    else:\n        system_prompt = \"You are a helpful email assistant.\"\n        append_prompt = \"Provide a calm, organized summary.\"\n\n    cmd = [\n        'claude', '-p', json.dumps(email_data),\n        '--system-prompt', system_prompt,\n        '--append-system-prompt', append_prompt\n    ]\n</code></pre>"},{"location":"guides/claude-cli-advanced/#future-possibilities","title":"Future Possibilities","text":""},{"location":"guides/claude-cli-advanced/#multi-language-support","title":"Multi-Language Support","text":"<pre><code>claude -p \"Bonjour, comment allez-vous?\" \\\n  --append-system-prompt \"Detect the user's language and respond in the same language.\"\n</code></pre>"},{"location":"guides/claude-cli-advanced/#personality-persistence","title":"Personality Persistence","text":"<pre><code># Save preferred prompts per user\nuser_preferences = {\n    \"default_system\": \"You are a friendly, professional assistant.\",\n    \"morning_append\": \"Start with an encouraging greeting.\",\n    \"evening_append\": \"Include reminders about work-life balance.\"\n}\n</code></pre>"},{"location":"guides/claude-cli-advanced/#ab-testing-prompts","title":"A/B Testing Prompts","text":"<pre><code>import random\n\nprompts_a = {\"system\": \"You are concise.\", \"append\": \"Use bullets.\"}\nprompts_b = {\"system\": \"You are detailed.\", \"append\": \"Explain thoroughly.\"}\n\nselected = random.choice([prompts_a, prompts_b])\n# Track which performs better\n</code></pre>"},{"location":"guides/claude-cli-advanced/#related-documentation","title":"Related Documentation","text":"<ul> <li>PAI Slack Bot - How prompts are used in Slack</li> <li>Intelligence Stack - Monitoring integration</li> <li>Operations Playbooks - Prompt usage in automation</li> </ul>"},{"location":"guides/claude-code-pm-guide/","title":"Claude Code Project Management Guide","text":""},{"location":"guides/claude-code-pm-guide/#purpose","title":"Purpose","text":"<p>This guide focuses on project management best practices for Claude Code CLI, including issue tracking, codebase maintenance, and technical debt prevention. For Git commands, see Git Workflow Guide. For GitHub CLI usage, see GitHub CLI Guide.</p>"},{"location":"guides/claude-code-pm-guide/#overview","title":"Overview","text":"<p>This guide is optimized for Claude Code CLI to maintain clean codebases and proper project workflows.</p>"},{"location":"guides/claude-code-pm-guide/#core-principles","title":"Core Principles","text":"<ol> <li>Always work on GitHub issues - Never make changes without an issue</li> <li>Keep project boards updated - Move issues through columns</li> <li>Maintain clean codebases - Remove technical debt regularly</li> <li>Use proper Git hygiene - Tags, branches, meaningful commits</li> </ol>"},{"location":"guides/claude-code-pm-guide/#mvp-development-philosophy","title":"MVP Development Philosophy","text":""},{"location":"guides/claude-code-pm-guide/#internal-tools-pragmatic-choices","title":"Internal Tools = Pragmatic Choices","text":"<ul> <li>One browser is enough - Chrome only for internal tools</li> <li>Value over perfection - Ship working features fast</li> <li>Fail fast, fail better - Quick iterations over extensive planning</li> <li>80/20 rule - Focus on the 20% that delivers 80% value</li> </ul>"},{"location":"guides/claude-code-pm-guide/#avoid-over-engineering","title":"Avoid Over-Engineering","text":"<p>\u274c Don't: - Test in multiple browsers for internal tools - Add complex error handling for edge cases - Build elaborate UI components - Create extensive documentation for simple features</p> <p>\u2705 Do: - Test in Chrome (our standard browser) - Handle common errors gracefully - Use simple, functional UI - Document only what's necessary</p>"},{"location":"guides/claude-code-pm-guide/#github-issue-workflow","title":"GitHub Issue Workflow","text":""},{"location":"guides/claude-code-pm-guide/#critical-responsibility-project-board-management","title":"\u26a0\ufe0f CRITICAL RESPONSIBILITY: Project Board Management","text":"<p>You MUST add every new issue to the project board immediately!</p>"},{"location":"guides/claude-code-pm-guide/#1-issue-creation-project-board-integration","title":"1. Issue Creation &amp; Project Board Integration","text":"<p>Creating an issue is a multi-step process. It is not complete until it is visible on the project board.</p> <p>Step 1: Create the Issue <pre><code># Create the issue and take note of the issue number from the URL it returns\ngh issue create --repo jkautto/shifts --title \"feat: New Feature Title\" --body \"Detailed description...\"\n</code></pre></p> <p>Step 2: Add the Issue to the Project Board This requires getting the GraphQL IDs for the project and the new issue, then linking them.</p> <p><pre><code># First, get the Project ID. You only need to do this once per project.\n# Find the project number from the URL: https://github.com/users/jkautto/projects/1 -&gt; number is 1\nPROJECT_ID=$(gh api graphql -f query='\n  query($user: String!, $number: Int!) {\n    user(login: $user){\n      projectV2(number: $number){\n        id\n      }\n    }\n  }' -f user='jkautto' -F number=1 --jq '.data.user.projectV2.id')\n\n# Second, get the Node ID of the new issue (e.g., for issue #14)\nISSUE_ID=$(gh api graphql -f query='\n  query($owner: String!, $repo: String!, $number: Int!) {\n    repository(owner: $owner, name: $repo) {\n      issue(number: $number) {\n        id\n      }\n    }\n  }' -f owner='jkautto' -f repo='shifts' -F number=14 --jq '.data.repository.issue.id')\n\n# Finally, link the issue to the project\ngh api graphql -f query='\n  mutation($project:ID!, $issue:ID!) {\n    addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {\n      item {\n        id\n      }\n    }\n  }' -f project=$PROJECT_ID -f issue=$ISSUE_ID\n</code></pre> Verification: After running these commands, you must verify that the issue is visible on the project board.</p>"},{"location":"guides/claude-code-pm-guide/#2-before-starting-work","title":"2. Before Starting Work","text":"<pre><code># Check available issues\ngh issue list --state open\n\n# View project board\ngh project list\ngh project view 1  # View specific project\n\n# Assign issue to yourself\ngh issue edit &lt;number&gt; --add-assignee @me\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#2-during-work","title":"2. During Work","text":"<pre><code># Create feature branch (optional for major changes)\ngit checkout -b issue-&lt;number&gt;-description\n\n# Check git status frequently\ngit status\ngit diff\n\n# Make atomic commits\ngit add -p  # Stage changes interactively\ngit commit -m \"type: description (#&lt;issue-number&gt;)\"\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#3-after-implementation","title":"3. After Implementation","text":"<pre><code># Add implementation details to issue\ngh issue comment &lt;number&gt; -b \"Implementation details...\"\n\n# Close issue with reference to commit\ngh issue close &lt;number&gt;\n\n# Tag releases when appropriate\ngit tag -a v1.0.0 -m \"Release version 1.0.0\"\ngit push --tags\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type: description (#issue-number)\n\n- Detail 1\n- Detail 2\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\n</code></pre> <p>Types: feat, fix, docs, refactor, test, chore</p>"},{"location":"guides/claude-code-pm-guide/#codebase-maintenance","title":"Codebase Maintenance","text":""},{"location":"guides/claude-code-pm-guide/#regular-cleanup-tasks","title":"Regular Cleanup Tasks","text":"<ol> <li>Remove test files: <code>test-*.html</code>, <code>*-debug.*</code>, <code>*.log</code></li> <li>Clean old docs: Consolidate scattered MD files</li> <li>Remove prototypes: <code>_prototypes/</code>, <code>_old/</code>, <code>backup/</code></li> <li>Check for exposed secrets: API keys, tokens</li> <li>Update dependencies: Check package.json versions</li> </ol>"},{"location":"guides/claude-code-pm-guide/#cleanup-commands","title":"Cleanup Commands","text":"<pre><code># Find large files\nfind . -type f -size +1M -exec ls -lh {} \\;\n\n# Find old log files\nfind . -name \"*.log\" -mtime +7\n\n# Check for TODO comments\ngrep -r \"TODO\\|FIXME\\|HACK\" --include=\"*.js\" --include=\"*.py\"\n\n# List untracked files\ngit ls-files --others --exclude-standard\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#project-board-management","title":"Project Board Management","text":""},{"location":"guides/claude-code-pm-guide/#issue-states","title":"Issue States","text":"<ol> <li>To Do - Not started</li> <li>In Progress - Actively working</li> <li>Review - Needs testing/review</li> <li>Done - Completed and closed</li> </ol>"},{"location":"guides/claude-code-pm-guide/#best-practices","title":"Best Practices","text":"<ul> <li>Update issue status immediately when starting work</li> <li>Add time estimates to issues</li> <li>Link related issues</li> <li>Use labels consistently</li> <li>Add milestones for major features</li> </ul>"},{"location":"guides/claude-code-pm-guide/#git-best-practices","title":"Git Best Practices","text":""},{"location":"guides/claude-code-pm-guide/#daily-workflow","title":"Daily Workflow","text":"<pre><code># Start of session\ngit pull --rebase\ngit log --oneline -10\n\n# During work\ngit status\ngit diff --staged\n\n# End of session  \ngit push\ngh issue list --assignee @me\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code> - Production ready code</li> <li><code>develop</code> - Integration branch (optional)</li> <li><code>issue-&lt;number&gt;</code> - Feature branches</li> </ul>"},{"location":"guides/claude-code-pm-guide/#tagging-releases","title":"Tagging Releases","text":"<pre><code># Semantic versioning\ngit tag -a v1.2.3 -m \"Release: Feature X, Fix Y\"\n\n# List tags\ngit tag -l\n\n# Push tags\ngit push origin v1.2.3\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#technical-debt-prevention","title":"Technical Debt Prevention","text":""},{"location":"guides/claude-code-pm-guide/#code-quality-checks","title":"Code Quality Checks","text":"<ol> <li>Before committing:</li> <li>Remove console.log statements</li> <li>Delete commented code</li> <li>Update documentation (if needed)</li> <li> <p>Run linters/formatters (if configured)</p> </li> <li> <p>Weekly reviews:</p> </li> <li>Check for duplicate code</li> <li>Review dependencies</li> <li>Update outdated docs</li> <li>Clean test artifacts</li> </ol>"},{"location":"guides/claude-code-pm-guide/#mvp-testing-approach","title":"MVP Testing Approach","text":""},{"location":"guides/claude-code-pm-guide/#for-internal-tools","title":"For Internal Tools","text":"<ol> <li>Manual Testing in Chrome - Quick visual check</li> <li>Basic Functionality - Does it work for the happy path?</li> <li>Screenshot if Needed - <code>python3 /srv/jtools/screenshot.py</code></li> <li>Move On - Don't over-test internal tools</li> </ol>"},{"location":"guides/claude-code-pm-guide/#testing-commands","title":"Testing Commands","text":"<pre><code># Quick browser test\npython3 /srv/toolkit/browser_test.py https://kaut.to/shifts/\n\n# Screenshot for visual record\npython3 /srv/jtools/screenshot.py https://kaut.to/shifts/ -o before.png\n\n# That's it! No cross-browser, no edge cases for MVP\n</code></pre>"},{"location":"guides/claude-code-pm-guide/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Keep README.md current</li> <li>Document API changes</li> <li>Update CHANGELOG.md</li> <li>Maintain architecture docs</li> </ul>"},{"location":"guides/claude-code-pm-guide/#quick-reference","title":"Quick Reference","text":""},{"location":"guides/claude-code-pm-guide/#essential-commands","title":"Essential Commands","text":"<p>For Git and GitHub commands, see: - Git Workflow Guide - Git basics - GitHub Quick Reference - GitHub CLI commands - GitHub CLI Guide - Advanced GitHub usage</p>"},{"location":"guides/claude-code-pm-guide/#red-flags-to-watch-for","title":"Red Flags to Watch For","text":"<ul> <li>Uncommitted changes &gt; 24 hours old</li> <li>Issues in \"In Progress\" &gt; 1 week</li> <li>Test files in production directories</li> <li>Hardcoded credentials</li> <li>Missing documentation</li> </ul>"},{"location":"guides/claude-code-pm-guide/#real-world-examples-from-practice","title":"Real-World Examples from Practice","text":""},{"location":"guides/claude-code-pm-guide/#working-with-ai-agents-gemini-case-study","title":"Working with AI Agents (Gemini Case Study)","text":"<p>When reviewing another AI's work:</p> <ol> <li> <p>Issue Planning Review:    <pre><code>gh issue view 11 --comments  # Check implementation plan\n# Look for: Missing details, blank templates, vague descriptions\n</code></pre></p> </li> <li> <p>Post-Implementation Review:    <pre><code>git pull\ngit log --oneline -5  # Check their commits\ngit show &lt;commit-hash&gt;  # Review changes\nnpm run build  # Test if it builds\n</code></pre></p> </li> <li> <p>Common Issues to Fix:</p> </li> <li>Hardcoded asset paths in index.html</li> <li>Missing imports or components</li> <li>No pull request created</li> <li>Build failures</li> </ol>"},{"location":"guides/claude-code-pm-guide/#proper-issue-closure-example","title":"Proper Issue Closure Example","text":"<p>From today's session with issue #10: <pre><code># 1. Comment with implementation details\ngh issue comment 10 -b \"Implemented in commit 1ca2e7c:\n- Changed role name from 'Helpers' to 'Paramedics'\n- Updated members to Niina and Emilia only\n- Also cleaned up codebase\"\n\n# 2. Close the issue\ngh issue close 10\n</code></pre></p>"},{"location":"guides/claude-code-pm-guide/#mvp-implementation-example","title":"MVP Implementation Example","text":"<p>Issue #8 - Keyboard shortcuts: - Skip multi-browser testing \u2192 Chrome only - No complex UI \u2192 Simple help text - Basic functionality \u2192 Just the shortcuts - Time to implement: 30 minutes vs 2 hours</p>"},{"location":"guides/claude-code-pm-guide/#real-session-example-issue-management","title":"Real Session Example: Issue Management","text":"<p>From shifts app development: <pre><code># Created issue #13 but forgot project board\ngh issue create --title \"feat: Add tooltips\"  # \u274c Incomplete!\n\n# Had to fix it later:\nNODE_ID=$(gh api repos/jkautto/shifts/issues/13 --jq .node_id)\ngh api graphql -f query='mutation...'  # Added to board\n\n# Lesson: Always add to board immediately!\n</code></pre></p>"},{"location":"guides/claude-code-pm-guide/#integration-with-claude-code","title":"Integration with Claude Code","text":"<p>When starting a session: 1. Check <code>gh issue list --assignee @me</code> 2. Review <code>git status</code> and <code>git log -5</code> 3. Update project board if needed 4. Clean up any technical debt noticed</p> <p>Remember: Clean code is maintainable code</p>"},{"location":"guides/claude-code-pm-guide/#related-guides","title":"Related Guides","text":"<ul> <li>Git Workflow Guide - Daily Git operations and commands</li> <li>GitHub Quick Reference - Quick GitHub CLI reference</li> <li>GitHub CLI Guide - Comprehensive GitHub CLI usage</li> <li>Working with AI Agents - Collaborating with other AIs</li> <li>AI Agent Onboarding - Getting started guide</li> </ul>"},{"location":"guides/claude-code-sub-agents/","title":"Claude Code Sub-Agents","text":""},{"location":"guides/claude-code-sub-agents/#overview","title":"Overview","text":"<p>Claude Code CLI supports native sub-agents - specialized AI assistants that can be invoked from within the main Claude Code session. These sub-agents provide focused expertise and can be created programmatically by AI to handle specific domains or tasks.</p>"},{"location":"guides/claude-code-sub-agents/#what-are-sub-agents","title":"What Are Sub-Agents?","text":"<p>Sub-agents are separate Claude instances with: - Specialized prompts for specific domains (email, tasks, travel, etc.) - Independent context windows from the main Claude session - Custom model selection (Haiku, Sonnet, Opus) - Defined personalities and capabilities through system prompts</p>"},{"location":"guides/claude-code-sub-agents/#key-differences-from-pai-sub-agents","title":"Key Differences from PAI Sub-Agents","text":"Feature Claude Code Sub-Agents PAI Sub-Agents Purpose Native CLI sub-agents with YAML frontmatter PAI system task routing via Task tool Location <code>.claude/agents/</code> directory <code>/srv/pai/.claude/agents/</code> Format YAML frontmatter + Markdown Custom agent definitions Invocation Direct CLI commands Task tool with <code>subagent_type</code> Restart Required \u2705 YES - Critical! No"},{"location":"guides/claude-code-sub-agents/#critical-requirement-restart-after-creation","title":"CRITICAL REQUIREMENT: Restart After Creation","text":"<p>\u26a0\ufe0f IMPORTANT: After creating or modifying Claude Code sub-agent files, you MUST restart the Claude Code CLI for them to be recognized and available.</p> <pre><code># After creating/modifying agents, restart Claude Code CLI\n# Exit current session (Ctrl+C or exit command)\n# Then restart Claude Code\n</code></pre> <p>This restart step is mandatory and often forgotten!</p>"},{"location":"guides/claude-code-sub-agents/#sub-agent-file-structure","title":"Sub-Agent File Structure","text":""},{"location":"guides/claude-code-sub-agents/#directory-structure","title":"Directory Structure","text":"<p>Sub-agents can be placed in two locations:</p> <pre><code># Project-level agents (preferred for project-specific agents)\n.claude/agents/\n\u251c\u2500\u2500 task-agent.md\n\u251c\u2500\u2500 email-agent.md\n\u251c\u2500\u2500 travel-agent.md\n\u2514\u2500\u2500 research-agent.md\n\n# User-level agents (for global agents used across projects)\n~/.claude/agents/\n\u251c\u2500\u2500 writing-assistant.md\n\u251c\u2500\u2500 code-reviewer.md\n\u2514\u2500\u2500 translator.md\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#yaml-frontmatter-format","title":"YAML Frontmatter Format","text":"<p>Every sub-agent file MUST start with YAML frontmatter:</p> <pre><code>---\nname: agent-name\ndescription: \"Brief description of the agent's purpose and when to use it\"\nmodel: haiku|sonnet|opus\ncolor: \"#hex-color\"  # Optional, for UI display\n---\n\n# Agent system prompt content goes here\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#required-fields","title":"Required Fields","text":"<ul> <li><code>name</code>: Unique identifier for the agent (used in CLI commands)</li> <li><code>description</code>: Clear description of what the agent does</li> <li><code>model</code>: Which Claude model to use (<code>haiku</code>, <code>sonnet</code>, or <code>opus</code>)</li> </ul>"},{"location":"guides/claude-code-sub-agents/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>color</code>: Hex color code for visual identification in UI (e.g., <code>\"#3B82F6\"</code>)</li> </ul>"},{"location":"guides/claude-code-sub-agents/#complete-agent-examples","title":"Complete Agent Examples","text":""},{"location":"guides/claude-code-sub-agents/#example-1-task-management-agent","title":"Example 1: Task Management Agent","text":"<p>File: <code>.claude/agents/task-agent.md</code></p> <pre><code>---\nname: task-agent\ndescription: \"Specialized task and calendar management across multiple Google accounts (personal, xwander, accolade). Expert in GTD methodology and time blocking.\"\nmodel: sonnet\ncolor: \"#10B981\"\n---\n\nYou are the Task Management Specialist for Joni Kautto's productivity system.\n\n## Core Expertise\n- Multi-account Google Tasks and Calendar management\n- Getting Things Done (GTD) methodology\n- Time blocking and schedule optimization\n- Context-aware task routing between accounts\n\n## Account Management\n- **Personal** (joni.kautto@gmail.com): Personal tasks and calendar\n- **Xwander** (joni@xwander.fi): Business tasks and meetings\n- **Accolade** (joni@accolade.fi): Client work and projects\n\n## Key Capabilities\n1. **Smart Task Creation**: Route tasks to appropriate accounts based on context\n2. **Calendar Analysis**: Identify conflicts and optimize scheduling\n3. **Daily Planning**: Generate 1-2-3 daily plans (1 big, 2 medium, 3 small tasks)\n4. **Context Switching**: Help transition between different project contexts\n\n## Tools Available\nUse the multi-account task and calendar tools:\n- `/srv/pai/toolkit/task.py` for task management\n- `/srv/pai/toolkit/calendar_service_account.py` for calendar access\n- `/srv/pai/toolkit/tasks_tool_multi.py` for advanced multi-account operations\n\n## Response Style\n- Concise and actionable\n- Include specific commands when helpful\n- Explain routing decisions for multi-account operations\n- Focus on productivity outcomes\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#example-2-email-management-agent","title":"Example 2: Email Management Agent","text":"<p>File: <code>.claude/agents/email-agent.md</code></p> <pre><code>---\nname: email-agent\ndescription: \"Email triage specialist for multi-account email management. Expert in VIP detection, smart categorization, and response drafting.\"\nmodel: sonnet\ncolor: \"#EF4444\"\n---\n\nYou are Joni Kautto's Email Triage Specialist.\n\n## Primary Responsibilities\n1. **Multi-Account Monitoring**: personal, xwander, accolade email accounts\n2. **VIP Detection**: Identify high-priority communications\n3. **Smart Categorization**: Urgent, Important, Routine, Bulk\n4. **Response Drafting**: Prepare replies for routine communications\n\n## VIP Contact List\n- **Riikka Hakanen** (wife) - ALWAYS highest priority\n- **Tiina Khatnani** - Team member at Xwander\n- **Elisa Juopperi** - Team member at Xwander\n- **Client communications** - Business critical\n\n## Categorization Rules\n\n### URGENT (Immediate Action)\n- VIP contacts with time-sensitive requests\n- Calendar conflicts or meeting changes\n- System alerts or service disruptions\n- Client escalations\n\n### IMPORTANT (Same Day)\n- Business opportunities\n- Team communications\n- Non-urgent VIP messages\n- Administrative deadlines\n\n### ROUTINE (24-48 hours)\n- Standard business communications\n- Newsletter digests\n- Non-critical updates\n- Scheduling requests\n\n### BULK (Filter/Archive)\n- Marketing emails\n- Automated notifications\n- Spam or low-value content\n\n## Tools Available\n- `/srv/pai/toolkit/gmail_tool.py` for email operations\n- Always use `--account all` for multi-account searches\n\n## Communication Style\n- **Urgent items**: Clear action required, @Joni mention in Slack\n- **Summaries**: Concise bullet points with sender, subject, urgency\n- **Draft responses**: Professional but warm tone matching Joni's style\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#example-3-simple-research-agent","title":"Example 3: Simple Research Agent","text":"<p>File: <code>.claude/agents/research-agent.md</code></p> <pre><code>---\nname: research-agent\ndescription: \"Research assistant for comprehensive information gathering, analysis, and report generation on any topic.\"\nmodel: opus\ncolor: \"#8B5CF6\"\n---\n\nYou are a Research Specialist focused on thorough information gathering and analysis.\n\n## Core Capabilities\n- Deep research across multiple sources\n- Fact verification and source credibility assessment\n- Synthesis of complex information into actionable insights\n- Competitive analysis and market research\n- Technical documentation and trend analysis\n\n## Research Methodology\n1. **Source Diversification**: Use multiple types of sources (academic, industry, news, official)\n2. **Credibility Assessment**: Evaluate source reliability and potential bias\n3. **Cross-Reference Verification**: Confirm facts across multiple sources\n4. **Temporal Analysis**: Consider how information changes over time\n5. **Synthesis**: Combine insights into coherent, actionable conclusions\n\n## Output Formats\n- **Executive Summary**: Key findings in 2-3 bullet points\n- **Detailed Analysis**: Comprehensive breakdown with sources\n- **Actionable Recommendations**: Specific next steps based on findings\n- **Source Citations**: Clear references for further investigation\n\n## Research Areas\n- Business strategy and market analysis\n- Technology trends and implementation guidance\n- Travel and location research\n- Financial and investment analysis\n- Competitive intelligence\n\n## Tools Available\n- Web search and analysis tools\n- Document processing capabilities\n- Data synthesis and reporting tools\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#creating-sub-agents-programmatically","title":"Creating Sub-Agents Programmatically","text":"<p>As an AI assistant, you can create sub-agents for users. Here's the process:</p>"},{"location":"guides/claude-code-sub-agents/#1-identify-the-need","title":"1. Identify the Need","text":"<p>Before creating a sub-agent, ensure it addresses a real need: - Specialized domain expertise required - Repeated similar requests from user - Complex multi-step processes - Need for consistent context/personality</p>"},{"location":"guides/claude-code-sub-agents/#2-design-the-agent","title":"2. Design the Agent","text":"<p>Plan the agent's: - Purpose: What specific problem does it solve? - Expertise: What domain knowledge does it need? - Personality: How should it communicate? - Model: Which Claude model fits the complexity?</p>"},{"location":"guides/claude-code-sub-agents/#3-create-the-file","title":"3. Create the File","text":"<pre><code># Create the agent file in the .claude/agents directory\n# Use descriptive names that match the agent's purpose\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#4-critical-inform-user-about-restart","title":"4. CRITICAL: Inform User About Restart","text":"<p>Always emphasize this step to the user:</p> <p>\"\u26a0\ufe0f IMPORTANT: I've created the sub-agent file, but you must restart Claude Code CLI for it to become available. Exit your current session and restart Claude Code to use the new agent.\"</p>"},{"location":"guides/claude-code-sub-agents/#using-sub-agents","title":"Using Sub-Agents","text":"<p>Once created and after CLI restart, sub-agents can be invoked in several ways:</p>"},{"location":"guides/claude-code-sub-agents/#direct-invocation","title":"Direct Invocation","text":"<pre><code># Use the agent name directly in prompts\n\"Use task-agent to analyze my calendar conflicts for next week\"\n\"Ask email-agent to triage my inbox from the past 24 hours\"\n\"Have research-agent investigate market trends in AI productivity tools\"\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#context-switching","title":"Context Switching","text":"<pre><code># Switch to agent context for focused work\n\"Switch to task-agent mode for project planning\"\n\"Let me work with email-agent on organizing communications\"\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#best-practices-for-agent-design","title":"Best Practices for Agent Design","text":""},{"location":"guides/claude-code-sub-agents/#do","title":"DO:","text":"<ul> <li>\u2705 Clear Purpose: Each agent should have a focused, specific role</li> <li>\u2705 Appropriate Model: Use Haiku for simple tasks, Sonnet for balanced work, Opus for complex analysis</li> <li>\u2705 Consistent Personality: Maintain the same tone and approach throughout</li> <li>\u2705 Tool Integration: Reference specific tools and file paths when relevant</li> <li>\u2705 Domain Expertise: Include specialized knowledge and methodologies</li> <li>\u2705 Example Interactions: Show how the agent should respond</li> </ul>"},{"location":"guides/claude-code-sub-agents/#dont","title":"DON'T:","text":"<ul> <li>\u274c Overlap Agents: Avoid creating agents with similar purposes</li> <li>\u274c Over-Complexity: Keep agents focused on specific domains</li> <li>\u274c Generic Agents: Avoid vague, general-purpose agents</li> <li>\u274c Forget Restart: Always remind users to restart CLI after creation</li> <li>\u274c Missing Frontmatter: Every agent file needs proper YAML headers</li> </ul>"},{"location":"guides/claude-code-sub-agents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/claude-code-sub-agents/#agent-not-available-after-creation","title":"Agent Not Available After Creation","text":"<p>Problem: Created agent file but it doesn't appear in Claude Code CLI</p> <p>Solution:  1. \u2705 Verify YAML frontmatter format is correct 2. \u2705 Check file is in <code>.claude/agents/</code> directory 3. \u2705 RESTART Claude Code CLI (most common issue) 4. \u2705 Verify file permissions allow reading</p>"},{"location":"guides/claude-code-sub-agents/#agent-not-responding-as-expected","title":"Agent Not Responding as Expected","text":"<p>Problem: Agent exists but doesn't behave according to its prompt</p> <p>Solution: 1. Check the system prompt for clarity and specificity 2. Verify the model selection is appropriate for the task complexity 3. Test with simple, direct invocations first 4. Review the prompt for any conflicting instructions</p>"},{"location":"guides/claude-code-sub-agents/#wrong-model-selection","title":"Wrong Model Selection","text":"<p>Problem: Agent is too slow/expensive (Opus) or too simple (Haiku)</p> <p>Solution: - Use Haiku for: Simple tasks, quick responses, routine operations - Use Sonnet for: Balanced complexity, most general use cases, analysis - Use Opus for: Complex reasoning, detailed analysis, creative tasks</p>"},{"location":"guides/claude-code-sub-agents/#integration-with-pai-system","title":"Integration with PAI System","text":"<p>Claude Code sub-agents complement but are separate from PAI sub-agents:</p> <ul> <li>Claude Code sub-agents: Native CLI functionality with YAML frontmatter</li> <li>PAI sub-agents: Task routing within the PAI ecosystem using Task tool</li> </ul> <p>Both can coexist and serve different purposes in a comprehensive AI assistance setup.</p>"},{"location":"guides/claude-code-sub-agents/#quick-reference","title":"Quick Reference","text":""},{"location":"guides/claude-code-sub-agents/#creating-a-new-agent","title":"Creating a New Agent","text":"<ol> <li>Create file: <code>.claude/agents/agent-name.md</code></li> <li>Add YAML frontmatter with name, description, model</li> <li>Write specialized system prompt</li> <li>Inform user to restart CLI</li> <li>Test agent after restart</li> </ol>"},{"location":"guides/claude-code-sub-agents/#essential-commands","title":"Essential Commands","text":"<pre><code># List available agents (after restart)\n# This will show agents in the CLI interface\n\n# Invoke agent directly in prompts\n\"Use [agent-name] to [specific task]\"\n\n# Check agent files\nls .claude/agents/\ncat .claude/agents/task-agent.md\n</code></pre>"},{"location":"guides/claude-code-sub-agents/#common-agent-types","title":"Common Agent Types","text":"<ul> <li>Domain Experts: email-agent, task-agent, travel-agent</li> <li>Workflow Specialists: project-manager, code-reviewer, writer</li> <li>Analysis Tools: research-agent, data-analyst, market-researcher</li> <li>Creative Assistants: content-creator, designer, strategist</li> </ul>"},{"location":"guides/claude-code-sub-agents/#related-documentation","title":"Related Documentation","text":"<ul> <li>PAI Sub-Agent Implementation - PAI system sub-agents (different system)</li> <li>AI Agent Development - General AI agent principles</li> <li>Claude Code PM Guide - Project management with Claude Code</li> <li>MCP Claude Code Setup - MCP server integration</li> </ul> <p>Remember: Always restart Claude Code CLI after creating or modifying sub-agent files!</p>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>Welcome to the DAI/PAI ecosystem! This guide will help you get up and running quickly.</p> <p>AI Agent?</p> <p>If you're an AI agent, check out the Quick Start Guide for AI-specific onboarding.</p>"},{"location":"guides/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Server: Ubuntu 22.04 LTS or similar Linux distribution</li> <li>Domain: A domain name with DNS control</li> <li>Python: Version 3.10 or higher</li> <li>Node.js: For certain applications (optional)</li> <li>Git: For version control</li> </ul>"},{"location":"guides/getting-started/#quick-setup","title":"Quick Setup","text":""},{"location":"guides/getting-started/#1-universal-setup-script","title":"1. Universal Setup Script","text":"<p>The fastest way to get started is using our universal setup script:</p> <pre><code>curl -s https://kaut:to@kaut.to/setup | bash\n</code></pre> <p>This script will: - Create workspace at <code>~/kwork/</code> - Install dependencies - Pull credentials from vault - Clone necessary repositories - Set up the complete environment</p>"},{"location":"guides/getting-started/#2-manual-setup","title":"2. Manual Setup","text":"<p>If you prefer manual setup:</p>"},{"location":"guides/getting-started/#clone-the-apps-repository","title":"Clone the Apps Repository","text":"<pre><code>git clone https://github.com/jkautto/apps.git /srv/apps\ncd /srv/apps\n</code></pre>"},{"location":"guides/getting-started/#set-up-environment","title":"Set Up Environment","text":"<pre><code># Create .env file\ncat &gt; .env &lt;&lt; EOF\n# Add your API keys here\nGITHUB_PAT=your-github-token\nGEMINI_API_KEY=your-gemini-key\n# ... other keys\nEOF\n\n# Secure the file\nchmod 600 .env\n</code></pre>"},{"location":"guides/getting-started/#install-dependencies","title":"Install Dependencies","text":"<p>Each application has its own dependencies. For example:</p> <pre><code># Documentation site\ncd docs\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\n# Pastebin service\ncd ../pastebin\n# Follow pastebin README\n</code></pre>"},{"location":"guides/getting-started/#core-components","title":"Core Components","text":""},{"location":"guides/getting-started/#1-dai-development-ai-infrastructure","title":"1. DAI (Development AI Infrastructure)","text":"<ul> <li>Purpose: Manages infrastructure and technical systems</li> <li>Location: <code>/srv/</code></li> <li>Key Files: </li> <li><code>/srv/CAG/</code> - Core knowledge base</li> <li><code>/srv/context/</code> - System state</li> </ul>"},{"location":"guides/getting-started/#2-pai-personal-ai-assistant","title":"2. PAI (Personal AI Assistant)","text":"<ul> <li>Purpose: Personal assistant for daily tasks</li> <li>Location: <code>/srv/pai/</code></li> <li>Services:</li> <li>Email monitoring</li> <li>Calendar management</li> <li>Task scheduling</li> <li>Slack integration</li> </ul>"},{"location":"guides/getting-started/#3-web-applications","title":"3. Web Applications","text":"<p>Located in <code>/srv/apps/</code>: - auth: Authentication service - pastebin: File sharing - browser-test: Testing infrastructure - shifts: Scheduling application - docs: This documentation</p>"},{"location":"guides/getting-started/#basic-operations","title":"Basic Operations","text":""},{"location":"guides/getting-started/#starting-services","title":"Starting Services","text":"<p>Most services are managed by systemd:</p> <pre><code># Check service status\nsudo systemctl status pai-web\n\n# Start a service\nsudo systemctl start pai-web\n\n# Enable auto-start\nsudo systemctl enable pai-web\n</code></pre>"},{"location":"guides/getting-started/#accessing-applications","title":"Accessing Applications","text":"<ul> <li>Main Site: https://kaut.to</li> <li>Documentation: https://docs.kaut.to</li> <li>Pastebin: https://pb.kaut.to</li> <li>Auth Portal: https://auth.kaut.to</li> <li>Dev Dashboard: https://dev.kaut.to</li> </ul> <p>Default credentials: - Username: <code>joni</code> - Password: <code>Penacova</code></p>"},{"location":"guides/getting-started/#checking-logs","title":"Checking Logs","text":"<pre><code># System logs\nsudo journalctl -u nginx -f\n\n# Application logs\ntail -f /srv/pai/logs/app.log\n\n# All logs\nls /srv/logs/\n</code></pre>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have the basics:</p> <ol> <li>Explore the Architecture: Learn how the system is designed</li> <li> <p>Architecture Overview</p> </li> <li> <p>Set Up Development Environment: Configure your local development</p> </li> <li> <p>Development Setup</p> </li> <li> <p>Learn Authentication: Understand the security model</p> </li> <li> <p>Authentication Guide</p> </li> <li> <p>Try the APIs: Start building with our APIs</p> </li> <li>API Reference</li> </ol>"},{"location":"guides/getting-started/#common-issues","title":"Common Issues","text":""},{"location":"guides/getting-started/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port\nsudo lsof -i :8080\n\n# Kill process if needed\nsudo kill -9 &lt;PID&gt;\n</code></pre>"},{"location":"guides/getting-started/#permission-denied","title":"Permission Denied","text":"<pre><code># Fix ownership\nsudo chown -R $USER:$USER /srv/apps\n\n# Fix permissions\nchmod 755 /srv/apps\n</code></pre>"},{"location":"guides/getting-started/#service-wont-start","title":"Service Won't Start","text":"<pre><code># Check logs\nsudo journalctl -u service-name -n 50\n\n# Verify configuration\nnginx -t\n</code></pre>"},{"location":"guides/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: You're here! Use the search function</li> <li>Logs: Check <code>/srv/logs/</code> for detailed information</li> <li>Context: Review <code>/srv/context/current/</code> for system state</li> <li>Code: Browse https://github.com/jkautto/</li> </ul>"},{"location":"guides/getting-started/#tips-for-ai-agents","title":"Tips for AI Agents","text":"<p>If you're an AI agent working with this system:</p> <ol> <li>Always check context first: <code>/srv/context/current/</code></li> <li>Use structured commands: Follow the patterns in guides</li> <li>Update documentation: Keep docs current as you work</li> <li>Log your actions: Help future agents understand changes</li> </ol> <p>Ready to Go!</p> <p>You now have the basics to start working with the DAI/PAI ecosystem.  Explore the documentation to learn more about specific components.</p>"},{"location":"guides/git-workflow/","title":"Simple Git Workflow for DAI/PAI Development","text":""},{"location":"guides/git-workflow/#when-to-use-this-guide","title":"When to Use This Guide","text":"<ul> <li>\u2705 Daily git operations (commit, push, pull)</li> <li>\u2705 Working directly on main branch</li> <li>\u2705 Recovery from mistakes</li> <li>\u2705 Quick commits without PR overhead</li> </ul> <p>For GitHub issues and project boards, see GitHub Quick Reference</p> <p>Since we're a small team of 2-3 AI developers working closely together, we keep git simple and efficient.</p>"},{"location":"guides/git-workflow/#core-principles","title":"Core Principles","text":"<ul> <li>No Pull Requests: We work directly on main branch</li> <li>Frequent Commits: Commit early and often</li> <li>Clear Messages: Descriptive commit messages</li> <li>Regular Pushes: Push to GitHub multiple times per session</li> <li>Version Tags: Tag significant milestones</li> </ul>"},{"location":"guides/git-workflow/#daily-workflow","title":"Daily Workflow","text":""},{"location":"guides/git-workflow/#1-start-of-session","title":"1. Start of Session","text":"<pre><code># Check current status\ngit status\ngit log --oneline -5\n\n# Pull any changes (if working from multiple locations)\ngit pull origin main\n</code></pre>"},{"location":"guides/git-workflow/#2-during-development","title":"2. During Development","text":"<pre><code># After completing a feature or fix\ngit add -A  # or specific files\ngit status  # Review what's being committed\n\n# Commit with clear message\ngit commit -m \"feat: Add monitoring session architecture\"\n\n# For longer messages\ngit commit -m \"fix: Resolve email collector JSON parsing\n\n- Disabled all logging output\n- Use sys.stdout.write for clean JSON\n- Added error handling for edge cases\"\n</code></pre>"},{"location":"guides/git-workflow/#3-commit-message-format","title":"3. Commit Message Format","text":"<ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix  </li> <li><code>docs:</code> Documentation only</li> <li><code>refactor:</code> Code restructuring</li> <li><code>test:</code> Adding tests</li> <li><code>chore:</code> Maintenance tasks</li> </ul>"},{"location":"guides/git-workflow/#4-push-regularly","title":"4. Push Regularly","text":"<pre><code># Push to GitHub\ngit push origin main\n\n# If needed, force push (be careful!)\ngit push -f origin main\n</code></pre>"},{"location":"guides/git-workflow/#5-version-tagging","title":"5. Version Tagging","text":"<pre><code># For significant releases\ngit tag -a v0.3.0 -m \"Release description\"\ngit push origin v0.3.0\n</code></pre>"},{"location":"guides/git-workflow/#session-management","title":"Session Management","text":""},{"location":"guides/git-workflow/#end-of-session-checklist","title":"End of Session Checklist","text":"<ol> <li>\u2713 Commit all work</li> <li>\u2713 Push to GitHub</li> <li>\u2713 Create worklog entry</li> <li>\u2713 Update HANDOVER.md if needed</li> <li>\u2713 Tag if major milestone</li> </ol>"},{"location":"guides/git-workflow/#quick-commands","title":"Quick Commands","text":"<pre><code># See what changed\ngit diff\n\n# Undo last commit (keep changes)\ngit reset HEAD~1\n\n# Discard all changes (careful!)\ngit reset --hard HEAD\n\n# Create release\ngit tag -a v0.x.0 -m \"Description\"\ngit push origin --tags\n</code></pre>"},{"location":"guides/git-workflow/#file-management","title":"File Management","text":""},{"location":"guides/git-workflow/#always-commit","title":"Always Commit","text":"<ul> <li>Core code files (*.py)</li> <li>Documentation (*.md)</li> <li>Configuration (*.json, *.yaml)</li> <li>Scripts (*.sh)</li> </ul>"},{"location":"guides/git-workflow/#never-commit-use-gitignore","title":"Never Commit (use .gitignore)","text":"<ul> <li>Credentials (*.json with secrets)</li> <li>Tokens (*_token.json)</li> <li>Environment files (.env)</li> <li>Cache files (pycache)</li> <li>Logs (*.log)</li> </ul>"},{"location":"guides/git-workflow/#collaboration-notes","title":"Collaboration Notes","text":"<p>Since we're AI developers: - We can see each other's commits instantly - No complex branching needed - Focus on clear communication through commits - Use worklogs for detailed context</p>"},{"location":"guides/git-workflow/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"guides/git-workflow/#if-something-goes-wrong","title":"If Something Goes Wrong","text":"<pre><code># Check reflog for recovery\ngit reflog\n\n# Restore deleted file\ngit checkout HEAD~ -- path/to/file\n\n# Reset to specific commit\ngit reset --hard &lt;commit-hash&gt;\n</code></pre> <p>Remember: Git is our safety net. Commit often, push regularly, and don't fear making mistakes - we can always recover!</p>"},{"location":"guides/git-workflow/#related-guides","title":"Related Guides","text":"<ul> <li>GitHub Quick Reference - Quick commands and error solutions</li> <li>GitHub CLI Guide - Working with issues and project boards</li> <li>Claude Code PM Guide - Project management best practices</li> <li>AI Agent Onboarding - Getting started guide for new AI agents</li> </ul>"},{"location":"guides/github-cli-guide/","title":"GitHub CLI Guide for AI Agents","text":""},{"location":"guides/github-cli-guide/#purpose","title":"Purpose","text":"<p>This comprehensive guide covers GitHub CLI usage for AI agents, focusing on working with issues, pull requests, and the GraphQL API. For quick commands and error solutions, see the GitHub Quick Reference.</p> <p>A practical guide for using GitHub CLI with real, tested examples. All commands have been verified to work.</p>"},{"location":"guides/github-cli-guide/#prerequisites","title":"Prerequisites","text":"<pre><code># Check authentication\ngh auth status\n\n# If needed, set token from .env\nexport GITHUB_TOKEN=$(grep GITHUB_PAT /srv/.env | cut -d= -f2)\n</code></pre>"},{"location":"guides/github-cli-guide/#github-discussions","title":"GitHub Discussions","text":""},{"location":"guides/github-cli-guide/#important-limited-cli-support","title":"\u26a0\ufe0f Important: Limited CLI Support","text":"<p>GitHub CLI does not have native commands for discussions. You must use the GraphQL API.</p>"},{"location":"guides/github-cli-guide/#working-methods-for-discussion-comments","title":"Working Methods for Discussion Comments","text":"<p>Method 1: Simple Inline Comment</p> <pre><code># This works - tested and verified\ngh api graphql -f query='\nmutation {\n  addDiscussionComment(input: {\n    discussionId: \"D_kwDOPOIQDs4AgzMq\"\n    body: \"Your comment here\"\n  }) {\n    comment {\n      id\n      url\n    }\n  }\n}'\n</code></pre> <p>Method 2: Multi-line Comments with JSON Escaping</p> <pre><code># Step 1: Create your comment\ncat &gt; comment.txt &lt;&lt; 'EOF'\nThis is line one.\nThis is line two.\n\nThis is after a blank line.\nEOF\n\n# Step 2: Escape it properly\nbody=$(cat comment.txt | jq -Rs .)\n\n# Step 3: Use it in the query\ngh api graphql -f query=\"\nmutation {\n  addDiscussionComment(input: {\n    discussionId: \\\"D_kwDOPOIQDs4AgzMq\\\"\n    body: $body\n  }) {\n    comment {\n      id\n      url\n    }\n  }\n}\"\n</code></pre>"},{"location":"guides/github-cli-guide/#finding-discussion-ids","title":"Finding Discussion IDs","text":"<pre><code># Get discussion ID (not the number!)\ngh api graphql -f query='\n{\n  repository(owner: \"jkautto\", name: \"shifts\") {\n    discussions(first: 10) {\n      nodes {\n        id\n        number\n        title\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"guides/github-cli-guide/#project-boards-v2","title":"Project Boards V2","text":""},{"location":"guides/github-cli-guide/#list-users-projects","title":"List User's Projects","text":"<pre><code>gh api graphql -f query='\n{\n  user(login: \"jkautto\") {\n    projectsV2(first: 10) {\n      nodes {\n        id\n        number\n        title\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"guides/github-cli-guide/#get-project-details-with-items","title":"Get Project Details with Items","text":"<pre><code>gh api graphql -f query='\n{\n  user(login: \"jkautto\") {\n    projectsV2(first: 5) {\n      nodes {\n        id\n        title\n        items(first: 20) {\n          nodes {\n            id\n            content {\n              ... on Issue {\n                number\n                title\n                repository {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}'\n</code></pre>"},{"location":"guides/github-cli-guide/#add-issue-to-project","title":"Add Issue to Project","text":"<pre><code># Step 1: Get issue ID\nissue_data=$(gh api graphql -f query='\n{\n  repository(owner: \"jkautto\", name: \"shifts\") {\n    issue(number: 8) {\n      id\n    }\n  }\n}')\n\nissue_id=$(echo $issue_data | jq -r '.data.repository.issue.id')\n\n# Step 2: Add to project\ngh api graphql -f query=\"\nmutation {\n  addProjectV2ItemById(input: {\n    projectId: \\\"PVT_kwHOBx09m84A-Is0\\\"\n    contentId: \\\"$issue_id\\\"\n  }) {\n    item {\n      id\n    }\n  }\n}\"\n</code></pre>"},{"location":"guides/github-cli-guide/#update-project-item-status","title":"Update Project Item Status","text":"<p>This is complex because you need field IDs and option IDs:</p> <pre><code># Step 1: Get field information\ngh api graphql -f query='\n{\n  node(id: \"PVT_kwHOBx09m84A-Is0\") {\n    ... on ProjectV2 {\n      fields(first: 20) {\n        nodes {\n          ... on ProjectV2SingleSelectField {\n            id\n            name\n            options {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}'\n\n# Step 2: Update status (use IDs from above)\ngh api graphql -f query='\nmutation {\n  updateProjectV2ItemFieldValue(input: {\n    projectId: \"PROJECT_ID\"\n    itemId: \"ITEM_ID\"\n    fieldId: \"FIELD_ID\"\n    value: {\n      singleSelectOptionId: \"OPTION_ID\"\n    }\n  }) {\n    projectV2Item {\n      id\n    }\n  }\n}'\n</code></pre>"},{"location":"guides/github-cli-guide/#standard-github-cli-commands","title":"Standard GitHub CLI Commands","text":""},{"location":"guides/github-cli-guide/#issues","title":"Issues","text":"<pre><code># List issues\ngh issue list --repo jkautto/shifts\n\n# View issue\ngh issue view 8 --repo jkautto/shifts\n\n# Comment on issue (this works!)\ngh issue comment 8 --repo jkautto/shifts --body \"Comment text\"\n\n# Comment from file\ngh issue comment 8 --repo jkautto/shifts --body-file comment.md\n\n# Create issue\ngh issue create --repo jkautto/shifts \\\n  --title \"Title\" \\\n  --body \"Description\"\n\n# Assign issue\ngh issue edit 8 --repo jkautto/shifts --add-assignee @me\n</code></pre>"},{"location":"guides/github-cli-guide/#pull-requests","title":"Pull Requests","text":"<pre><code># Create PR\ngh pr create --repo jkautto/shifts \\\n  --title \"feat: add feature\" \\\n  --body \"Closes #8\"\n\n# List PRs\ngh pr list --repo jkautto/shifts\n\n# Check out PR locally\ngh pr checkout 123 --repo jkautto/shifts\n\n# Review PR\ngh pr review 123 --repo jkautto/shifts --approve\n\n# Merge PR\ngh pr merge 123 --repo jkautto/shifts --squash\n</code></pre>"},{"location":"guides/github-cli-guide/#common-pitfalls-solutions","title":"Common Pitfalls &amp; Solutions","text":""},{"location":"guides/github-cli-guide/#graphql-pitfalls","title":"GraphQL Pitfalls","text":"<ol> <li>Variable Syntax Issues</li> <li>The <code>-F</code> flag for variables often causes parsing errors</li> <li> <p>Stick to inline queries or string interpolation</p> </li> <li> <p>Multi-line Content</p> </li> <li>Always escape with <code>jq -Rs .</code></li> <li> <p>Use double quotes for the outer query when interpolating</p> </li> <li> <p>Finding IDs</p> </li> <li>Many operations need node IDs, not numbers</li> <li>Always query for the ID first</li> </ol>"},{"location":"guides/github-cli-guide/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Check current auth\ngh auth status\n\n# Refresh if needed\ngh auth refresh\n\n# Use specific token\nGITHUB_TOKEN=$token gh api ...\n</code></pre>"},{"location":"guides/github-cli-guide/#debugging-graphql","title":"Debugging GraphQL","text":"<pre><code># Pretty print responses\ngh api graphql -f query='...' | jq .\n\n# Check for errors\nresponse=$(gh api graphql -f query='...')\necho $response | jq '.errors'\n</code></pre>"},{"location":"guides/github-cli-guide/#working-example-complete-workflow","title":"Working Example: Complete Workflow","text":"<pre><code>#!/bin/bash\n# Start work on an issue\n\nISSUE=8\nREPO=\"jkautto/shifts\"\n\n# 1. Assign yourself\ngh issue edit $ISSUE --repo $REPO --add-assignee @me\n\n# 2. Comment on issue\ngh issue comment $ISSUE --repo $REPO \\\n  --body \"Starting work on this. Moving to In Progress.\"\n\n# 3. Find discussion and comment\ndiscussion_id=$(gh api graphql -f query='\n{\n  repository(owner: \"jkautto\", name: \"shifts\") {\n    discussions(first: 1) {\n      nodes { id }\n    }\n  }\n}' | jq -r '.data.repository.discussions.nodes[0].id')\n\ngh api graphql -f query=\"\nmutation {\n  addDiscussionComment(input: {\n    discussionId: \\\"$discussion_id\\\"\n    body: \\\"Starting work on issue #$ISSUE\\\"\n  }) {\n    comment { id }\n  }\n}\"\n\n# 4. Create branch\ngit checkout -b feature/issue-$ISSUE\n\necho \"Ready to work on issue #$ISSUE\"\n</code></pre>"},{"location":"guides/github-cli-guide/#tips-for-ai-agents","title":"Tips for AI Agents","text":"<ol> <li>Always Test First: Run commands in test repos before production</li> <li>Use JSON Output: Add <code>| jq .</code> for readable output</li> <li>Check for Errors: GraphQL returns 200 even with errors</li> <li>Save Complex Queries: Use files for complex GraphQL</li> <li>Escape Properly: Use <code>jq -Rs .</code> for multi-line content</li> </ol>"},{"location":"guides/github-cli-guide/#quick-reference","title":"Quick Reference","text":"<pre><code># Issues - These work!\ngh issue list\ngh issue view NUMBER\ngh issue comment NUMBER -b \"text\"\ngh issue create -t \"title\" -b \"body\"\n\n# PRs - These work!\ngh pr list\ngh pr create -t \"title\" -b \"body\"\ngh pr checkout NUMBER\ngh pr review NUMBER --approve\n\n# GraphQL - Use these patterns!\ngh api graphql -f query='{ ... }'          # Simple queries\ngh api graphql -f query=\"...\"              # With variables\nbody=$(cat file | jq -Rs .)               # Escape content\n</code></pre> <p>Remember: When standard CLI commands don't exist (like for discussions), use GraphQL!</p>"},{"location":"guides/github-cli-guide/#related-guides","title":"Related Guides","text":"<ul> <li>GitHub Quick Reference - Quick commands and common error solutions</li> <li>Git Workflow Guide - Basic Git operations</li> <li>Claude Code PM Guide - Project management workflows</li> <li>Working with AI Agents - Collaboration with other AIs</li> </ul>"},{"location":"guides/github-quick-reference/","title":"GitHub Quick Reference for AI Agents","text":""},{"location":"guides/github-quick-reference/#when-to-use-this-guide","title":"When to Use This Guide","text":"<ul> <li>\u2705 Quick lookup for GitHub CLI commands</li> <li>\u2705 Fixing \"unknown command\" or \"node ID\" errors</li> <li>\u2705 Adding issues to project boards</li> <li>\u2705 Common issue/PR operations</li> </ul> <p>For detailed explanations, see GitHub CLI Guide</p>"},{"location":"guides/github-quick-reference/#common-errors-and-solutions","title":"\u26a0\ufe0f Common Errors and Solutions","text":""},{"location":"guides/github-quick-reference/#error-unknown-command-project-for-gh","title":"Error: \"unknown command 'project' for 'gh'\"","text":"<p>Problem: GitHub CLI doesn't have a <code>project</code> command Solution: Use GraphQL API for project operations</p>"},{"location":"guides/github-quick-reference/#error-could-not-resolve-to-a-node-with-the-global-id","title":"Error: \"Could not resolve to a node with the global id\"","text":"<p>Problem: Wrong or outdated node ID Solution: Always fetch fresh node IDs before using them</p>"},{"location":"guides/github-quick-reference/#essential-github-operations","title":"Essential GitHub Operations","text":""},{"location":"guides/github-quick-reference/#1-creating-issues","title":"1. Creating Issues","text":"<pre><code># Create issue (returns issue URL)\ngh issue create --title \"Title\" --body \"Description\" --label \"enhancement\"\n</code></pre>"},{"location":"guides/github-quick-reference/#2-adding-issues-to-project-board","title":"2. Adding Issues to Project Board","text":"<pre><code># Step 1: Get issue node ID (replace 13 with your issue number)\nNODE_ID=$(gh api repos/jkautto/shifts/issues/13 --jq .node_id)\n\n# Step 2: Add to project (Shifts project ID)\ngh api graphql -f query=\"\nmutation {\n  addProjectV2ItemById(input: {\n    projectId: \\\"PVT_kwHOBx09m84A-Is0\\\"\n    contentId: \\\"$NODE_ID\\\"\n  }) {\n    item { id }\n  }\n}\"\n</code></pre>"},{"location":"guides/github-quick-reference/#3-issue-management","title":"3. Issue Management","text":"<pre><code># View issue with comments\ngh issue view 13 --comments\n\n# List your assigned issues\ngh issue list --assignee @me\n\n# Comment on issue\ngh issue comment 13 -b \"Comment text\"\n\n# Close issue\ngh issue close 13\n\n# Assign issue to yourself\ngh issue edit 13 --add-assignee @me\n</code></pre>"},{"location":"guides/github-quick-reference/#4-checking-project-board","title":"4. Checking Project Board","text":"<p>Always verify at: https://github.com/users/jkautto/projects/1/views/1</p>"},{"location":"guides/github-quick-reference/#project-ids-reference","title":"Project IDs Reference","text":"<ul> <li>Shifts Tool: <code>PVT_kwHOBx09m84A-Is0</code> (project #1)</li> <li>JTools Development: <code>PVT_kwHOBx09m84A-Kz4</code> (project #2)</li> </ul>"},{"location":"guides/github-quick-reference/#git-basics","title":"Git Basics","text":"<pre><code># Check status\ngit status\ngit log --oneline -5\n\n# Pull latest\ngit pull --rebase\n\n# Commit with message\ngit add -A\ngit commit -m \"type: description (#issue-number)\"\n\n# Push\ngit push\n</code></pre>"},{"location":"guides/github-quick-reference/#common-workflows","title":"Common Workflows","text":""},{"location":"guides/github-quick-reference/#complete-issue-workflow","title":"Complete Issue Workflow","text":"<pre><code># 1. Create issue\ngh issue create --title \"feat: Add feature\" --body \"Details...\"\n\n# 2. Add to project board (use script above)\n\n# 3. Assign to yourself\ngh issue edit &lt;number&gt; --add-assignee @me\n\n# 4. Work on it\ngit checkout -b issue-&lt;number&gt;\n# ... make changes ...\ngit add -A\ngit commit -m \"feat: implement feature (#&lt;number&gt;)\"\ngit push\n\n# 5. Close with comment\ngh issue comment &lt;number&gt; -b \"Implemented in commit abc123\"\ngh issue close &lt;number&gt;\n</code></pre>"},{"location":"guides/github-quick-reference/#never-do-this","title":"\u274c NEVER DO THIS","text":"<pre><code># These commands don't exist:\ngh project *           # No project command\ngh issue add-project   # Not a valid option\ngh pr add-to-project   # Not a valid option\n\n# These require exact IDs:\n\"I_kwDOMxbHUM6lT8nS\"   # Node IDs expire/change - always fetch fresh\n</code></pre>"},{"location":"guides/github-quick-reference/#always-do-this","title":"\u2705 ALWAYS DO THIS","text":"<ol> <li>Fetch fresh node IDs before GraphQL operations</li> <li>Add issues to project board immediately after creation</li> <li>Check the project board URL to verify</li> <li>Use the exact project IDs listed above</li> </ol>"},{"location":"guides/github-quick-reference/#quick-debug-commands","title":"Quick Debug Commands","text":"<pre><code># Get repo node ID\ngh api repos/jkautto/shifts --jq .node_id\n\n# Get issue details\ngh api repos/jkautto/shifts/issues/13\n\n# List all projects\ngh api graphql -f query='{\n  user(login: \"jkautto\") {\n    projectsV2(first: 10) {\n      nodes { id number title }\n    }\n  }\n}'\n</code></pre> <p>Remember: When in doubt, use the GitHub web interface and document what you did!</p>"},{"location":"guides/github-quick-reference/#related-guides","title":"Related Guides","text":"<ul> <li>GitHub CLI Guide - Comprehensive GitHub CLI reference with advanced features</li> <li>Git Workflow Guide - Basic Git operations and best practices</li> <li>Claude Code PM Guide - Project management workflows</li> <li>Working with AI Agents - Collaboration patterns with other AIs</li> </ul>"},{"location":"guides/mcp-claude-code-setup/","title":"PAI MCP Toolkit Setup with Claude Code","text":"<p>Complete guide for setting up the PAI MCP (Model Context Protocol) Toolkit with local Claude Code CLI.</p>"},{"location":"guides/mcp-claude-code-setup/#overview","title":"Overview","text":"<p>The PAI MCP Toolkit provides powerful automation tools for: - Task Management: Create, list, and manage tasks across Google accounts - Email Operations: Search, read, and manage Gmail across multiple accounts - Calendar Access: View events and manage calendars with service account authentication - Slack Integration: Send messages to configured channels - File Operations: Upload files to various destinations - Web Fetching: Download and process web content with screenshots</p> <p>Current Version: v1.1.0 MCP Server: mcp.kaut.to (port 8003) Authentication: Basic auth (kaut:to)</p>"},{"location":"guides/mcp-claude-code-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Code CLI installed and configured</li> <li>Network access to kaut.to services</li> <li>Basic understanding of MCP (Model Context Protocol)</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#installation","title":"Installation","text":""},{"location":"guides/mcp-claude-code-setup/#method-1-sse-connection-recommended","title":"Method 1: SSE Connection (Recommended)","text":"<pre><code># Add MCP server using Server-Sent Events\nclaude mcp add-server \\\n  --name \"pai-toolkit\" \\\n  --url \"https://mcp.kaut.to/sse\" \\\n  --auth-type basic \\\n  --username kaut \\\n  --password to\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#method-2-http-connection","title":"Method 2: HTTP Connection","text":"<pre><code># Add MCP server using HTTP\nclaude mcp add-server \\\n  --name \"pai-toolkit\" \\\n  --url \"https://mcp.kaut.to\" \\\n  --auth-type basic \\\n  --username kaut \\\n  --password to\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#verify-installation","title":"Verify Installation","text":"<pre><code># List configured MCP servers\nclaude mcp list-servers\n\n# Test connection\nclaude mcp test-connection pai-toolkit\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#available-tools","title":"Available Tools","text":""},{"location":"guides/mcp-claude-code-setup/#1-task-management-tasks_multi","title":"1. Task Management (<code>tasks_multi</code>)","text":"<p>Create and manage tasks across multiple Google accounts.</p> <pre><code># Example usage through Claude Code\nclaude chat --mcp pai-toolkit\n&gt; Create a task \"Review quarterly reports\" for the xwander account\n</code></pre> <p>Status: \u2705 Fully operational Accounts: personal, xwander, accolade Authentication: Service account (pre-configured)</p>"},{"location":"guides/mcp-claude-code-setup/#2-email-operations-gmail_multi","title":"2. Email Operations (<code>gmail_multi</code>)","text":"<p>Search, read, and manage Gmail across multiple accounts.</p> <pre><code># Example usage\n&gt; Search for emails about \"project update\" in all accounts\n&gt; Read the latest email from john@company.com\n</code></pre> <p>Status: \u26a0\ufe0f Requires OAuth re-authentication Accounts: personal, xwander, accolade Note: OAuth tokens may need refresh for some accounts</p>"},{"location":"guides/mcp-claude-code-setup/#3-calendar-access-calendar_multi","title":"3. Calendar Access (<code>calendar_multi</code>)","text":"<p>View calendar events with advanced service account authentication.</p> <pre><code># Example usage\n&gt; Show today's calendar events for xwander account\n&gt; Check if I'm free tomorrow at 2 PM\n</code></pre> <p>Status: \u2705 Fully operational via service account Accounts: personal, xwander, accolade Authentication: Service account (shared calendar access)</p>"},{"location":"guides/mcp-claude-code-setup/#4-slack-integration-slack_sender","title":"4. Slack Integration (<code>slack_sender</code>)","text":"<p>Send messages to configured Slack channels.</p> <pre><code># Example usage\n&gt; Send a message to #pai channel: \"Task completed successfully\"\n&gt; Notify the team about the deployment in #general\n</code></pre> <p>Status: \u2705 Operational Channels: #pai, #pai-notifications, #pai-verbose, #general Authentication: Webhook-based</p>"},{"location":"guides/mcp-claude-code-setup/#5-file-upload-file_uploader","title":"5. File Upload (<code>file_uploader</code>)","text":"<p>Upload files to various destinations including pastebin.</p> <pre><code># Example usage\n&gt; Upload this screenshot to pastebin\n&gt; Save this log file for later reference\n</code></pre> <p>Status: \u2705 Operational Destinations: Pastebin (pb.kaut.to), local storage Features: Automatic URL generation, metadata tracking</p>"},{"location":"guides/mcp-claude-code-setup/#configuration","title":"Configuration","text":""},{"location":"guides/mcp-claude-code-setup/#environment-variables","title":"Environment Variables","text":"<p>The MCP server is pre-configured with necessary credentials. No local environment setup required.</p>"},{"location":"guides/mcp-claude-code-setup/#authentication-status","title":"Authentication Status","text":"<ul> <li>\u2705 Tasks: Service account authentication working</li> <li>\u26a0\ufe0f Gmail: May require OAuth refresh for some accounts</li> <li>\u2705 Calendar: Service account with shared access</li> <li>\u2705 Slack: Webhook authentication configured</li> <li>\u2705 File Upload: Pre-configured endpoints</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#testing-the-connection","title":"Testing the Connection","text":""},{"location":"guides/mcp-claude-code-setup/#basic-connection-test","title":"Basic Connection Test","text":"<pre><code># Test if MCP server responds\ncurl -u kaut:to https://mcp.kaut.to/health\n\n# Expected response: {\"status\": \"healthy\", \"version\": \"1.1.0\"}\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#tool-specific-tests","title":"Tool-Specific Tests","text":""},{"location":"guides/mcp-claude-code-setup/#test-task-creation","title":"Test Task Creation","text":"<pre><code>claude chat --mcp pai-toolkit\n&gt; Create a test task \"MCP connection test\" for personal account\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#test-calendar-access","title":"Test Calendar Access","text":"<pre><code>&gt; Show today's events for xwander calendar\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#test-slack-integration","title":"Test Slack Integration","text":"<pre><code>&gt; Send a test message to #pai-verbose channel\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#authentication-setup","title":"Authentication Setup","text":""},{"location":"guides/mcp-claude-code-setup/#gmail-oauth-re-authentication","title":"Gmail OAuth Re-authentication","text":"<p>If Gmail tools return authentication errors:</p> <ol> <li>Contact System Administrator: OAuth tokens are managed server-side</li> <li>Account-Specific Issues: Mention which account (personal/xwander/accolade) needs refresh</li> <li>Temporary Workaround: Use calendar and task tools which use service account authentication</li> </ol>"},{"location":"guides/mcp-claude-code-setup/#calendar-service-account","title":"Calendar Service Account","text":"<p>Calendar access uses service account authentication: - \u2705 xwander: Full access configured - \u2705 personal: Read access available - \u26a0\ufe0f accolade: May need additional sharing permissions</p>"},{"location":"guides/mcp-claude-code-setup/#slack-webhook-verification","title":"Slack Webhook Verification","text":"<p>If Slack messages fail to send: 1. Verify channel exists: #pai, #pai-notifications, #pai-verbose, #general 2. Check webhook endpoint is responsive 3. Test with simple message first</p>"},{"location":"guides/mcp-claude-code-setup/#usage-examples","title":"Usage Examples","text":""},{"location":"guides/mcp-claude-code-setup/#daily-workflow-integration","title":"Daily Workflow Integration","text":""},{"location":"guides/mcp-claude-code-setup/#morning-routine","title":"Morning Routine","text":"<pre><code>claude chat --mcp pai-toolkit\n&gt; Show today's calendar events for all accounts\n&gt; List my current tasks\n&gt; Check for urgent emails from the last 24 hours\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#task-management","title":"Task Management","text":"<pre><code>&gt; Create a task \"Prepare presentation slides\" due tomorrow for xwander account\n&gt; List all overdue tasks\n&gt; Mark task as completed: \"Review MCP documentation\"\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#communication","title":"Communication","text":"<pre><code>&gt; Send update to #pai channel: \"MCP toolkit documentation completed\"\n&gt; Upload this screenshot to pastebin and share the URL\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#project-coordination","title":"Project Coordination","text":"<pre><code>&gt; Search emails for \"project alpha\" in xwander account\n&gt; Create calendar event \"Project Alpha Review\" for Friday 2 PM\n&gt; Send summary to #general channel\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/mcp-claude-code-setup/#common-issues","title":"Common Issues","text":""},{"location":"guides/mcp-claude-code-setup/#connection-refused","title":"Connection Refused","text":"<p><pre><code># Check server status\ncurl -u kaut:to https://mcp.kaut.to/health\n</code></pre> Solution: Verify network access to kaut.to domain</p>"},{"location":"guides/mcp-claude-code-setup/#authentication-failed","title":"Authentication Failed","text":"<ul> <li>Gmail: OAuth token needs refresh (contact admin)</li> <li>Calendar: Service account permissions issue</li> <li>Slack: Webhook endpoint changed</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#tool-not-available","title":"Tool Not Available","text":"<p><pre><code># List available tools\nclaude mcp list-tools pai-toolkit\n</code></pre> Solution: Verify server connection and tool registration</p>"},{"location":"guides/mcp-claude-code-setup/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable verbose logging\nclaude mcp test-connection pai-toolkit --verbose\n\n# Check MCP server logs\ncurl -u kaut:to https://mcp.kaut.to/logs\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#advanced-features","title":"Advanced Features","text":""},{"location":"guides/mcp-claude-code-setup/#multi-account-operations","title":"Multi-Account Operations","text":"<p>All tools support account-specific operations: - <code>personal</code>: joni.kautto@gmail.com (default) - <code>xwander</code>: joni@xwander.fi - <code>accolade</code>: joni@accolade.fi</p>"},{"location":"guides/mcp-claude-code-setup/#batch-operations","title":"Batch Operations","text":"<pre><code>&gt; Create tasks for all accounts: \"Review weekly reports\"\n&gt; Search all email accounts for \"urgent\" messages from today\n&gt; Check calendar availability across all accounts for next week\n</code></pre>"},{"location":"guides/mcp-claude-code-setup/#integration-patterns","title":"Integration Patterns","text":"<ul> <li>Morning Brief: Combine calendar, tasks, and email checking</li> <li>Project Updates: Task creation + Slack notification + file upload</li> <li>Meeting Prep: Calendar check + email search + task creation</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#best-practices","title":"Best Practices","text":""},{"location":"guides/mcp-claude-code-setup/#efficiency-tips","title":"Efficiency Tips","text":"<ol> <li>Batch Similar Operations: Group calendar checks, task operations</li> <li>Use Specific Accounts: Specify account when known</li> <li>Test Incrementally: Start with simple operations</li> </ol>"},{"location":"guides/mcp-claude-code-setup/#security-considerations","title":"Security Considerations","text":"<ol> <li>Credential Management: All credentials managed server-side</li> <li>Network Access: Uses secure HTTPS connections</li> <li>Authentication: Basic auth + service accounts where applicable</li> </ol>"},{"location":"guides/mcp-claude-code-setup/#error-handling","title":"Error Handling","text":"<ol> <li>Graceful Degradation: Use available tools if others fail</li> <li>Retry Logic: Some operations may need retry</li> <li>Fallback Methods: Alternative tools for similar operations</li> </ol>"},{"location":"guides/mcp-claude-code-setup/#support","title":"Support","text":""},{"location":"guides/mcp-claude-code-setup/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: https://docs.kaut.to</li> <li>MCP Server Status: https://mcp.kaut.to/health</li> <li>Tool Status: Check individual tool responses</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#reporting-issues","title":"Reporting Issues","text":"<ol> <li>Include specific error messages</li> <li>Mention which tool/account combination</li> <li>Provide steps to reproduce</li> </ol>"},{"location":"guides/mcp-claude-code-setup/#version-history","title":"Version History","text":""},{"location":"guides/mcp-claude-code-setup/#v110-current","title":"v1.1.0 (Current)","text":"<ul> <li>Multi-account support for all tools</li> <li>Service account authentication for calendar</li> <li>Enhanced error handling</li> <li>Improved tool descriptions</li> </ul>"},{"location":"guides/mcp-claude-code-setup/#v100","title":"v1.0.0","text":"<ul> <li>Initial MCP server implementation</li> <li>Basic tool set (tasks, gmail, calendar, slack, file_uploader)</li> <li>HTTP and SSE connection support</li> </ul> <p>Next Steps: After setup, try the Daily Workflow Examples to get familiar with the toolkit capabilities.</p>"},{"location":"guides/pai-subagent-implementation/","title":"PAI Sub-Agent Implementation Guide","text":""},{"location":"guides/pai-subagent-implementation/#quick-start","title":"Quick Start","text":"<p>This guide provides practical steps for implementing PAI sub-agents based on the strategic plan developed in July 2025.</p>"},{"location":"guides/pai-subagent-implementation/#understanding-sub-agents","title":"Understanding Sub-Agents","text":"<p>Sub-agents are specialized AI assistants that: - Operate in separate context windows - Have specific expertise and responsibilities - Can be restricted to certain tools - Are automatically invoked based on task context</p>"},{"location":"guides/pai-subagent-implementation/#creating-your-first-sub-agent","title":"Creating Your First Sub-Agent","text":""},{"location":"guides/pai-subagent-implementation/#step-1-identify-the-problem","title":"Step 1: Identify the Problem","text":"<p>Before creating any sub-agent, document: <pre><code>Problem: [What specific issue does this solve?]\nCurrent Time Cost: [How much time does this take daily?]\nImpact if Not Solved: [What breaks or fails?]\nSuccess Metric: [How do we measure success?]\n</code></pre></p>"},{"location":"guides/pai-subagent-implementation/#step-2-write-the-specification","title":"Step 2: Write the Specification","text":"<p>Create a specification file: <code>/srv/pai/.claude/agents/[agent-name]-spec.md</code></p> <pre><code># [Agent Name] Specification\n\n## Purpose\nOne sentence describing what this agent does.\n\n## Problem Solved\nDetailed description of the problem and impact.\n\n## Success Metrics\n- Metric 1: Specific measurable outcome\n- Metric 2: Time saved or errors prevented\n\n## Workflow\nStep-by-step process the agent follows.\n\n## Tools Required\nList of tools and why each is needed.\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#step-3-create-the-agent-definition","title":"Step 3: Create the Agent Definition","text":"<p>Create the agent file: <code>/srv/pai/.claude/agents/[agent-name].md</code></p> <pre><code>---\nname: agent-name\ndescription: \"Concise description. Use PROACTIVELY for [trigger].\"\ntools: Tool1, Tool2, Tool3\nmodel: haiku|sonnet|opus\n---\n\nYou are [role description].\n\n## Core Responsibilities\n1. First responsibility\n2. Second responsibility\n3. Third responsibility\n\n## Decision Criteria\n- When to act\n- When to escalate\n- When to wait\n\n## Constraints\n- What you cannot do\n- What requires approval\n- What to avoid\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#implementation-examples","title":"Implementation Examples","text":""},{"location":"guides/pai-subagent-implementation/#example-1-health-monitor-agent","title":"Example 1: Health Monitor Agent","text":"<pre><code>---\nname: health-monitor\ndescription: \"System health monitor. Use PROACTIVELY every 30 minutes.\"\ntools: Bash, Read, Write, gmail_tool\nmodel: haiku\n---\n\nYou are the PAI System Health Monitor.\n\n## Core Responsibilities\n1. Check OAuth token expiration\n2. Verify service availability\n3. Monitor resource usage\n4. Auto-fix simple issues\n\n## Auto-Fix Authority\n- Add missing imports\n- Restart crashed services\n- Clean old logs\n- Fix file permissions\n\n## Alert Thresholds\n- Token &lt;7 days: Yellow warning\n- Token &lt;3 days: Orange alert\n- Service down: Red critical\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#example-2-email-master-agent","title":"Example 2: Email Master Agent","text":"<pre><code>---\nname: email-master\ndescription: \"Email triage specialist. Use PROACTIVELY for email summaries.\"\ntools: Read, Write, gmail_tool, slack_sender\nmodel: sonnet\n---\n\nYou are Joni's Email Triage Specialist.\n\n## Core Responsibilities\n1. Monitor 3 accounts (personal, xwander, accolade)\n2. Identify VIP communications\n3. Categorize by urgency\n4. Draft routine responses\n\n## VIP List\n- Riikka Hakanen (wife) - ALWAYS urgent\n- Tiina Khatnani - Team member\n- Elisa Juopperi - Team member\n\n## Categorization Rules\n- URGENT: VIP + time-sensitive\n- IMPORTANT: Business critical\n- ROUTINE: Can wait 24 hours\n- BULK: Newsletters, notifications\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#testing-your-sub-agent","title":"Testing Your Sub-Agent","text":""},{"location":"guides/pai-subagent-implementation/#test-framework","title":"Test Framework","text":"<p>Create test file: <code>/srv/pai/tests/agents/test_[agent-name].py</code></p> <pre><code>def test_agent_responds():\n    \"\"\"Test that agent responds to trigger phrase\"\"\"\n    response = invoke_agent(\"health-monitor\", \"check system\")\n    assert \"health\" in response.lower()\n\ndef test_agent_tools():\n    \"\"\"Test that agent uses correct tools\"\"\"\n    response = invoke_agent_with_mock(\"health-monitor\")\n    assert_tools_called([\"Bash\", \"Read\"])\n\ndef test_agent_failure():\n    \"\"\"Test graceful failure handling\"\"\"\n    response = invoke_agent_with_error(\"health-monitor\")\n    assert \"error\" in response.lower()\n    assert_no_crash()\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#manual-testing-checklist","title":"Manual Testing Checklist","text":"<ul> <li> Agent responds to description triggers</li> <li> Agent uses only permitted tools</li> <li> Agent handles errors gracefully</li> <li> Agent provides clear status updates</li> <li> Agent respects defined constraints</li> </ul>"},{"location":"guides/pai-subagent-implementation/#deployment-process","title":"Deployment Process","text":""},{"location":"guides/pai-subagent-implementation/#1-local-testing","title":"1. Local Testing","text":"<pre><code># Test agent definition\nclaude-code --test-agent health-monitor\n\n# Run integration tests\npytest /srv/pai/tests/agents/test_health_monitor.py\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#2-staging-deployment","title":"2. Staging Deployment","text":"<pre><code># Deploy to staging context\ncp /srv/pai/.claude/agents/health-monitor.md \\\n   /srv/pai/.claude/agents/staging/\n\n# Test in isolation\nclaude-code --context staging --agent health-monitor\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#3-production-deployment","title":"3. Production Deployment","text":"<pre><code># Move to production\nmv /srv/pai/.claude/agents/staging/health-monitor.md \\\n   /srv/pai/.claude/agents/\n\n# Verify activation\nclaude-code --list-agents\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#monitoring-agent-performance","title":"Monitoring Agent Performance","text":""},{"location":"guides/pai-subagent-implementation/#metrics-to-track","title":"Metrics to Track","text":"<pre><code># Agent usage metrics\n{\n    \"agent\": \"health-monitor\",\n    \"invocations_daily\": 48,\n    \"auto_fixes\": 12,\n    \"alerts_sent\": 3,\n    \"avg_response_time\": \"2.3s\",\n    \"success_rate\": \"94%\"\n}\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#performance-dashboard","title":"Performance Dashboard","text":"<p>Check agent performance at: <code>https://kaut.to/ai/agents/</code></p> <p>Metrics displayed: - Invocation frequency - Success/failure rates - Tool usage patterns - Time saved estimates - Error logs</p>"},{"location":"guides/pai-subagent-implementation/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/pai-subagent-implementation/#pattern-1-scheduled-monitor","title":"Pattern 1: Scheduled Monitor","text":"<pre><code>description: \"Use PROACTIVELY every 30 minutes\"\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#pattern-2-event-trigger","title":"Pattern 2: Event Trigger","text":"<pre><code>description: \"Use when email received from VIP\"\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#pattern-3-user-request","title":"Pattern 3: User Request","text":"<pre><code>description: \"Use when user asks for status update\"\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#pattern-4-chain-trigger","title":"Pattern 4: Chain Trigger","text":"<pre><code>description: \"Use after task-flow completes planning\"\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/pai-subagent-implementation/#agent-not-triggering","title":"Agent Not Triggering","text":"<ol> <li>Check description includes trigger phrase</li> <li>Verify tools are available</li> <li>Check agent file syntax</li> <li>Review Claude Code logs</li> </ol>"},{"location":"guides/pai-subagent-implementation/#agent-using-wrong-tools","title":"Agent Using Wrong Tools","text":"<ol> <li>Explicitly list allowed tools</li> <li>Remove access to unnecessary tools</li> <li>Add constraints in system prompt</li> </ol>"},{"location":"guides/pai-subagent-implementation/#agent-too-verbose","title":"Agent Too Verbose","text":"<ol> <li>Add \"Be concise\" to system prompt</li> <li>Specify output format</li> <li>Use haiku model for simple tasks</li> </ol>"},{"location":"guides/pai-subagent-implementation/#agent-failing-tasks","title":"Agent Failing Tasks","text":"<ol> <li>Check tool availability</li> <li>Verify permissions</li> <li>Add error handling instructions</li> <li>Increase model complexity if needed</li> </ol>"},{"location":"guides/pai-subagent-implementation/#best-practices","title":"Best Practices","text":""},{"location":"guides/pai-subagent-implementation/#do","title":"DO:","text":"<ul> <li>\u2705 Start with simplest viable agent</li> <li>\u2705 Test thoroughly before deployment</li> <li>\u2705 Monitor performance metrics</li> <li>\u2705 Document success criteria</li> <li>\u2705 Use appropriate model for task complexity</li> </ul>"},{"location":"guides/pai-subagent-implementation/#dont","title":"DON'T:","text":"<ul> <li>\u274c Create agents for one-time tasks</li> <li>\u274c Give agents unnecessary permissions</li> <li>\u274c Chain more than 3 agents</li> <li>\u274c Ignore failure modes</li> <li>\u274c Skip testing phase</li> </ul>"},{"location":"guides/pai-subagent-implementation/#current-agent-roster-july-2025","title":"Current Agent Roster (July 2025)","text":""},{"location":"guides/pai-subagent-implementation/#active-agents","title":"Active Agents","text":"<ol> <li>web-monitor-scheduler - Website monitoring</li> <li>task-calendar-toolkit-manager - Task/calendar management</li> <li>travel-concierge-planner - Trip planning</li> </ol>"},{"location":"guides/pai-subagent-implementation/#in-development","title":"In Development","text":"<ol> <li>health-monitor - System health (Week 1)</li> <li>auth-guardian - Authentication management (Week 1)</li> </ol>"},{"location":"guides/pai-subagent-implementation/#planned","title":"Planned","text":"<ol> <li>email-master - Email triage (Week 2)</li> <li>calendar-guard - Maker time protection (Week 2)</li> <li>task-flow - 1-2-3 planning (Week 2)</li> <li>project-context - Context switching (Week 3)</li> <li>business-intel - Analytics (Week 3)</li> </ol>"},{"location":"guides/pai-subagent-implementation/#quick-commands","title":"Quick Commands","text":"<pre><code># List all agents\nls /srv/pai/.claude/agents/*.md\n\n# Test specific agent\nclaude-code \"Use health-monitor to check system\"\n\n# View agent definition\ncat /srv/pai/.claude/agents/health-monitor.md\n\n# Check agent logs\ngrep \"health-monitor\" /srv/pai/logs/claude.log\n\n# Disable agent temporarily\nmv /srv/pai/.claude/agents/health-monitor.md{,.disabled}\n</code></pre>"},{"location":"guides/pai-subagent-implementation/#resources","title":"Resources","text":"<ul> <li>Strategy Document: <code>/srv/pai/.claude/agents/SUBAGENT_STRATEGY.md</code></li> <li>Architecture: <code>/srv/docs/docs/architecture/pai-subagent-system.md</code></li> <li>Specifications: <code>/srv/pai/.claude/agents/*-spec.md</code></li> <li>Test Suite: <code>/srv/pai/tests/agents/</code></li> <li>Performance Metrics: <code>https://kaut.to/ai/agents/</code></li> </ul> <p>Last Updated: July 2025 Version: 1.0 Status: Active Development</p>"},{"location":"guides/slack-webhooks/","title":"Slack Webhooks Guide","text":""},{"location":"guides/slack-webhooks/#overview","title":"Overview","text":"<p>Webhooks provide a simple, reliable way to send messages to Slack channels without needing full bot permissions. They're ideal for system notifications, monitoring alerts, and one-way communication.</p>"},{"location":"guides/slack-webhooks/#webhook-urls","title":"Webhook URLs","text":"<p>Production webhooks are stored in <code>/srv/pai/.env</code>:</p> <pre><code>SLACK_PAI_WEBHOOK=https://hooks.slack.com/services/TGQEEE5T9/B08V274GQP5/...\nSLACK_PAI_NOTIFICATIONS_WEBHOOK=https://hooks.slack.com/services/TGQEEE5T9/B0919P5HX8W/...\nSLACK_PAI_VERBOSE_WEBHOOK=https://hooks.slack.com/services/TGQEEE5T9/B0919P6L346/...\n</code></pre>"},{"location":"guides/slack-webhooks/#channel-mapping","title":"Channel Mapping","text":"Channel Purpose Webhook Variable #pai Primary alerts, urgent notifications SLACK_PAI_WEBHOOK #pai-notifications Non-urgent updates, confirmations SLACK_PAI_NOTIFICATIONS_WEBHOOK #pai-verbose Detailed logs, debug information SLACK_PAI_VERBOSE_WEBHOOK"},{"location":"guides/slack-webhooks/#creating-new-webhooks","title":"Creating New Webhooks","text":"<ol> <li>Go to your Slack App settings at api.slack.com</li> <li>Navigate to Features \u2192 Incoming Webhooks</li> <li>Toggle Activate Incoming Webhooks to On</li> <li>Click Add New Webhook to Workspace</li> <li>Select the target channel</li> <li>Copy the webhook URL</li> <li>Add to <code>/srv/pai/.env</code> with descriptive name</li> </ol>"},{"location":"guides/slack-webhooks/#usage-examples","title":"Usage Examples","text":""},{"location":"guides/slack-webhooks/#python-implementation","title":"Python Implementation","text":"<pre><code>import os\nimport json\nimport urllib.request\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\nload_dotenv('/srv/pai/.env')\n\ndef send_webhook_message(webhook_url, title, message, level=\"INFO\"):\n    \"\"\"Send formatted message to Slack via webhook\"\"\"\n\n    colors = {\n        \"INFO\": \"#36a64f\",    # Green\n        \"WARNING\": \"#ff9900\", # Orange  \n        \"ERROR\": \"#ff0000\",   # Red\n        \"DEBUG\": \"#0099ff\"    # Blue\n    }\n\n    data = {\n        \"attachments\": [{\n            \"color\": colors.get(level, \"#cccccc\"),\n            \"title\": f\"[{level}] {title}\",\n            \"text\": message,\n            \"footer\": \"PAI System\",\n            \"ts\": int(datetime.now().timestamp())\n        }]\n    }\n\n    req = urllib.request.Request(\n        webhook_url,\n        data=json.dumps(data).encode('utf-8'),\n        headers={'Content-Type': 'application/json'}\n    )\n\n    try:\n        urllib.request.urlopen(req)\n        return True\n    except Exception as e:\n        print(f\"Webhook failed: {e}\")\n        return False\n\n# Usage\nwebhook = os.environ['SLACK_PAI_VERBOSE_WEBHOOK']\nsend_webhook_message(\n    webhook,\n    \"System Startup\",\n    \"PAI monitoring system initialized successfully\",\n    \"INFO\"\n)\n</code></pre>"},{"location":"guides/slack-webhooks/#bash-implementation","title":"Bash Implementation","text":"<pre><code>#!/bin/bash\n# send_slack_notification.sh\n\nsource /srv/pai/.env\n\nsend_slack_webhook() {\n    local webhook_url=\"$1\"\n    local title=\"$2\"\n    local message=\"$3\"\n    local color=\"${4:-#36a64f}\"  # Default green\n\n    local timestamp=$(date +%s)\n\n    curl -X POST \"$webhook_url\" \\\n        -H 'Content-Type: application/json' \\\n        -d @- &lt;&lt; EOF\n{\n    \"attachments\": [{\n        \"color\": \"$color\",\n        \"title\": \"$title\",\n        \"text\": \"$message\",\n        \"footer\": \"PAI System\",\n        \"ts\": $timestamp\n    }]\n}\nEOF\n}\n\n# Send to verbose channel\nsend_slack_webhook \\\n    \"$SLACK_PAI_VERBOSE_WEBHOOK\" \\\n    \"[INFO] Backup Complete\" \\\n    \"Daily backup completed successfully. Size: 1.2GB\" \\\n    \"#36a64f\"\n</code></pre>"},{"location":"guides/slack-webhooks/#multi-channel-sender","title":"Multi-Channel Sender","text":"<pre><code>#!/usr/bin/env python3\n# /srv/pai/toolkit/slack_sender.py\n\nimport os\nimport sys\nimport json\nimport urllib.request\nfrom enum import Enum\nfrom dotenv import load_dotenv\n\nload_dotenv('/srv/pai/.env')\n\nclass SlackChannel(Enum):\n    PRIMARY = \"SLACK_PAI_WEBHOOK\"\n    NOTIFICATIONS = \"SLACK_PAI_NOTIFICATIONS_WEBHOOK\"  \n    VERBOSE = \"SLACK_PAI_VERBOSE_WEBHOOK\"\n\nclass SlackSender:\n    def __init__(self):\n        self.webhooks = {\n            SlackChannel.PRIMARY: os.environ.get(SlackChannel.PRIMARY.value),\n            SlackChannel.NOTIFICATIONS: os.environ.get(SlackChannel.NOTIFICATIONS.value),\n            SlackChannel.VERBOSE: os.environ.get(SlackChannel.VERBOSE.value)\n        }\n\n    def send(self, channel, message, title=None, color=None, mention_user=None):\n        \"\"\"Send message to specified channel\"\"\"\n        webhook_url = self.webhooks.get(channel)\n        if not webhook_url:\n            print(f\"No webhook configured for {channel}\")\n            return False\n\n        # Add @mention if specified\n        if mention_user:\n            message = f\"&lt;@{mention_user}&gt; {message}\"\n\n        # Simple text message\n        if not title:\n            data = {\"text\": message}\n        else:\n            # Formatted attachment\n            data = {\n                \"attachments\": [{\n                    \"color\": color or \"#36a64f\",\n                    \"title\": title,\n                    \"text\": message,\n                    \"footer\": \"PAI System\"\n                }]\n            }\n\n        return self._send_webhook(webhook_url, data)\n\n    def _send_webhook(self, url, data):\n        req = urllib.request.Request(\n            url,\n            data=json.dumps(data).encode('utf-8'),\n            headers={'Content-Type': 'application/json'}\n        )\n\n        try:\n            urllib.request.urlopen(req)\n            return True\n        except Exception as e:\n            print(f\"Webhook error: {e}\")\n            return False\n\n# CLI usage\nif __name__ == \"__main__\":\n    sender = SlackSender()\n\n    # Examples:\n    # Send urgent to primary\n    sender.send(\n        SlackChannel.PRIMARY,\n        \"System memory usage critical: 95%\",\n        title=\"[ALERT] Memory Warning\",\n        color=\"#ff0000\",\n        mention_user=\"UGQR4AJNS\"  # @Joni\n    )\n\n    # Send info to verbose\n    sender.send(\n        SlackChannel.VERBOSE,\n        \"Morning email check completed. Found 5 new messages.\",\n        title=\"[INFO] Email Monitor\"\n    )\n</code></pre>"},{"location":"guides/slack-webhooks/#message-formatting","title":"Message Formatting","text":""},{"location":"guides/slack-webhooks/#basic-text","title":"Basic Text","text":"<pre><code>{\n    \"text\": \"Hello from webhook!\"\n}\n</code></pre>"},{"location":"guides/slack-webhooks/#formatted-attachments","title":"Formatted Attachments","text":"<pre><code>{\n    \"attachments\": [{\n        \"color\": \"#36a64f\",\n        \"title\": \"Success\",\n        \"text\": \"Operation completed\",\n        \"fields\": [\n            {\n                \"title\": \"Duration\",\n                \"value\": \"2.5 seconds\",\n                \"short\": true\n            },\n            {\n                \"title\": \"Records\",\n                \"value\": \"150\",\n                \"short\": true\n            }\n        ],\n        \"footer\": \"PAI System\",\n        \"ts\": 1634567890\n    }]\n}\n</code></pre>"},{"location":"guides/slack-webhooks/#rich-formatting","title":"Rich Formatting","text":"<pre><code>{\n    \"blocks\": [{\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": \"*Daily Summary*\\n\u2022 \u2705 All systems operational\\n\u2022 \ud83d\udce7 15 emails processed\\n\u2022 \ud83d\udcc5 3 meetings today\"\n        }\n    }]\n}\n</code></pre>"},{"location":"guides/slack-webhooks/#webhook-security","title":"Webhook Security","text":""},{"location":"guides/slack-webhooks/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Never commit webhook URLs to public repos <pre><code># .gitignore\n.env\n*.webhook\n</code></pre></p> </li> <li> <p>Rotate webhooks periodically</p> </li> <li>Delete old webhooks in Slack settings</li> <li>Generate new ones</li> <li> <p>Update .env files</p> </li> <li> <p>Validate webhook URLs <pre><code>def is_valid_webhook(url):\n    return url.startswith('https://hooks.slack.com/services/')\n</code></pre></p> </li> <li> <p>Rate limiting <pre><code>import time\n\nclass RateLimitedSender:\n    def __init__(self, min_interval=1.0):\n        self.min_interval = min_interval\n        self.last_sent = 0\n\n    def send(self, webhook_url, data):\n        now = time.time()\n        if now - self.last_sent &lt; self.min_interval:\n            time.sleep(self.min_interval - (now - self.last_sent))\n\n        # Send webhook\n        self.last_sent = time.time()\n</code></pre></p> </li> </ol>"},{"location":"guides/slack-webhooks/#integration-with-pai-systems","title":"Integration with PAI Systems","text":""},{"location":"guides/slack-webhooks/#morning-brief","title":"Morning Brief","text":"<pre><code># /srv/pai/intelligence_stack/processors/morning_brief_processor.py\n\nasync def send_morning_brief(self, brief_data):\n    \"\"\"Send formatted morning brief to Slack\"\"\"\n\n    # Determine urgency\n    has_conflicts = brief_data.get('conflicts', [])\n    mention = \"&lt;@UGQR4AJNS&gt;\" if has_conflicts else \"\"\n\n    message = self.format_brief(brief_data)\n\n    if has_conflicts:\n        # Urgent - send to primary\n        webhook = os.environ['SLACK_PAI_WEBHOOK']\n        color = \"#ff0000\"\n    else:\n        # Normal - send to notifications\n        webhook = os.environ['SLACK_PAI_NOTIFICATIONS_WEBHOOK']\n        color = \"#36a64f\"\n\n    self.send_webhook(webhook, f\"{mention} {message}\", \"Morning Brief\", color)\n</code></pre>"},{"location":"guides/slack-webhooks/#email-monitor","title":"Email Monitor","text":"<pre><code># /srv/pai/monitoring/email_monitor.py\n\ndef route_email_notification(self, email_data):\n    \"\"\"Route email notifications based on importance\"\"\"\n\n    vip_senders = ['riikka', 'important-client@example.com']\n    urgent_keywords = ['urgent', 'critical', 'deadline', 'emergency']\n\n    sender = email_data.get('from', '').lower()\n    subject = email_data.get('subject', '').lower()\n\n    # Check importance\n    is_vip = any(vip in sender for vip in vip_senders)\n    is_urgent = any(keyword in subject for keyword in urgent_keywords)\n\n    if is_vip or is_urgent:\n        # Send to primary with mention\n        self.slack_sender.send(\n            SlackChannel.PRIMARY,\n            f\"VIP Email from {email_data['from']}: {email_data['subject']}\",\n            title=\"[URGENT] Email Alert\",\n            color=\"#ff0000\",\n            mention_user=\"UGQR4AJNS\"\n        )\n    else:\n        # Send to notifications\n        self.slack_sender.send(\n            SlackChannel.NOTIFICATIONS,\n            f\"New email from {email_data['from']}\",\n            title=\"[INFO] Email Received\"\n        )\n\n    # Always log to verbose\n    self.slack_sender.send(\n        SlackChannel.VERBOSE,\n        json.dumps(email_data, indent=2),\n        title=\"[DEBUG] Email Data\"\n    )\n</code></pre>"},{"location":"guides/slack-webhooks/#system-monitoring","title":"System Monitoring","text":"<pre><code>#!/bin/bash\n# /srv/pai/monitoring/system_health.sh\n\nsource /srv/pai/.env\n\ncheck_system_health() {\n    local memory_usage=$(free | grep Mem | awk '{print int($3/$2 * 100)}')\n    local disk_usage=$(df -h / | tail -1 | awk '{print int($5)}')\n\n    if [ $memory_usage -gt 90 ] || [ $disk_usage -gt 90 ]; then\n        # Critical - send to primary\n        curl -X POST \"$SLACK_PAI_WEBHOOK\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\n                \\\"text\\\": \\\"&lt;@UGQR4AJNS&gt; System resources critical!\\\",\n                \\\"attachments\\\": [{\n                    \\\"color\\\": \\\"#ff0000\\\",\n                    \\\"title\\\": \\\"[CRITICAL] Resource Alert\\\",\n                    \\\"text\\\": \\\"Memory: ${memory_usage}%\\\\nDisk: ${disk_usage}%\\\",\n                    \\\"footer\\\": \\\"System Monitor\\\"\n                }]\n            }\"\n    else\n        # Normal - send to verbose\n        curl -X POST \"$SLACK_PAI_VERBOSE_WEBHOOK\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\n                \\\"attachments\\\": [{\n                    \\\"color\\\": \\\"#36a64f\\\",\n                    \\\"title\\\": \\\"[INFO] System Health\\\",\n                    \\\"text\\\": \\\"Memory: ${memory_usage}%\\\\nDisk: ${disk_usage}%\\\\nStatus: Healthy\\\",\n                    \\\"footer\\\": \\\"System Monitor\\\"\n                }]\n            }\"\n    fi\n}\n\n# Run check\ncheck_system_health\n</code></pre>"},{"location":"guides/slack-webhooks/#testing-webhooks","title":"Testing Webhooks","text":""},{"location":"guides/slack-webhooks/#quick-test","title":"Quick Test","text":"<pre><code># Test webhook is working\ncurl -X POST $SLACK_PAI_VERBOSE_WEBHOOK \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"text\": \"Test message from curl\"}'\n</code></pre>"},{"location":"guides/slack-webhooks/#comprehensive-test-script","title":"Comprehensive Test Script","text":"<pre><code>#!/usr/bin/env python3\n# test_webhooks.py\n\nimport os\nfrom dotenv import load_dotenv\nfrom slack_sender import SlackSender, SlackChannel\n\nload_dotenv('/srv/pai/.env')\n\ndef test_all_webhooks():\n    \"\"\"Test all configured webhooks\"\"\"\n    sender = SlackSender()\n\n    tests = [\n        (SlackChannel.PRIMARY, \"Test message to #pai\", \"[TEST] Primary Channel\"),\n        (SlackChannel.NOTIFICATIONS, \"Test message to #pai-notifications\", \"[TEST] Notifications\"),\n        (SlackChannel.VERBOSE, \"Test message to #pai-verbose\", \"[TEST] Verbose Logging\")\n    ]\n\n    for channel, message, title in tests:\n        print(f\"Testing {channel.name}...\")\n        success = sender.send(channel, message, title=title, color=\"#0099ff\")\n        print(f\"  {'\u2713' if success else '\u2717'} {channel.name}\")\n\n    # Test mention\n    print(\"Testing mention...\")\n    success = sender.send(\n        SlackChannel.PRIMARY,\n        \"This is a test mention\",\n        title=\"[TEST] Mention Test\",\n        mention_user=\"UGQR4AJNS\"\n    )\n    print(f\"  {'\u2713' if success else '\u2717'} Mention test\")\n\nif __name__ == \"__main__\":\n    test_all_webhooks()\n</code></pre>"},{"location":"guides/slack-webhooks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/slack-webhooks/#common-issues","title":"Common Issues","text":"<ol> <li>\"channel_not_found\" Error</li> <li>Webhook might be deleted</li> <li>Regenerate webhook for that channel</li> <li> <p>Update .env file</p> </li> <li> <p>\"invalid_payload\" Error</p> </li> <li>Check JSON formatting</li> <li>Ensure proper escaping of special characters</li> <li> <p>Validate against Slack's schema</p> </li> <li> <p>No message appears</p> </li> <li>Verify webhook URL is correct</li> <li>Check network connectivity</li> <li>Look for rate limiting</li> </ol>"},{"location":"guides/slack-webhooks/#debug-logging","title":"Debug Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef debug_webhook(url, data):\n    logging.debug(f\"Webhook URL: {url}\")\n    logging.debug(f\"Payload: {json.dumps(data, indent=2)}\")\n\n    try:\n        response = urllib.request.urlopen(...)\n        logging.debug(f\"Response: {response.read()}\")\n    except Exception as e:\n        logging.error(f\"Webhook failed: {e}\")\n</code></pre>"},{"location":"guides/slack-webhooks/#related-documentation","title":"Related Documentation","text":"<ul> <li>PAI Slack Bot - Full bot implementation</li> <li>Monitoring Alerts - Alert routing strategies</li> <li>Intelligence Stack - Webhook usage in monitoring</li> </ul>"},{"location":"guides/vite-deployment-guide/","title":"Vite App Deployment Quick Guide","text":""},{"location":"guides/vite-deployment-guide/#common-production-issues","title":"Common Production Issues","text":""},{"location":"guides/vite-deployment-guide/#1-blank-screen-no-css","title":"1. Blank Screen - No CSS","text":"<p>Symptom: App works locally, blank in production Cause: CSS files not imported in JavaScript Fix:  <pre><code>// In src/main.js or entry point\nimport './styles/main.css';\nimport './styles/component.css';\n// Import ALL your CSS files\n</code></pre></p>"},{"location":"guides/vite-deployment-guide/#2-wrong-nginx-path","title":"2. Wrong Nginx Path","text":"<p>Symptom: 404 errors, assets not loading Cause: Nginx serving from wrong directory Fix: <pre><code># Serve from dist directory\nlocation /app-name/ {\n    alias /var/www/kaut.to/app-name/dist/;\n    try_files $uri $uri/ /app-name/index.html;\n}\n</code></pre></p>"},{"location":"guides/vite-deployment-guide/#3-build-not-updated","title":"3. Build Not Updated","text":"<p>Symptom: Changes don't appear Fix: <pre><code>npm run build\nsudo cp -r dist/* /var/www/kaut.to/app-name/\n</code></pre></p>"},{"location":"guides/vite-deployment-guide/#quick-deployment-checklist","title":"Quick Deployment Checklist","text":"<ol> <li>Import all CSS in JavaScript</li> <li>Run build: <code>npm run build</code></li> <li>Check dist output: <code>ls -la dist/</code></li> <li>Deploy to correct path</li> <li>Verify nginx config</li> <li>Test in browser</li> </ol>"},{"location":"guides/vite-deployment-guide/#debug-commands","title":"Debug Commands","text":"<pre><code># What's being served?\nls -la /var/www/kaut.to/APP_NAME/\n\n# Check nginx errors\nsudo tail -f /var/log/nginx/error.log\n\n# Test locally first\nnpm run build &amp;&amp; npm run preview\n</code></pre>"},{"location":"guides/working-with-ai-agents/","title":"Working with AI Agents - Practical Guide","text":""},{"location":"guides/working-with-ai-agents/#overview","title":"Overview","text":"<p>This guide documents practical lessons learned from collaborating with various AI agents (Gemini, Claude, etc.) on development projects.</p>"},{"location":"guides/working-with-ai-agents/#common-ai-agent-behaviors","title":"Common AI Agent Behaviors","text":""},{"location":"guides/working-with-ai-agents/#gemini-agent-characteristics","title":"Gemini Agent Characteristics","text":"<p>Based on real-world experience:</p> <ol> <li>Planning Issues:</li> <li>Often provides templates with blank spaces</li> <li>May repeat the same mistakes multiple times</li> <li> <p>Good conceptual ideas but sloppy execution</p> </li> <li> <p>Implementation Patterns:</p> </li> <li>Usually delivers working code eventually</li> <li>May skip Git best practices (no PRs, direct commits)</li> <li> <p>Sometimes breaks builds with hardcoded paths</p> </li> <li> <p>How to Work Effectively:</p> </li> <li>Provide extremely specific instructions</li> <li>Include actual file paths and code examples</li> <li>Review and test their work immediately</li> <li>Be prepared to fix minor issues</li> </ol>"},{"location":"guides/working-with-ai-agents/#example-geminis-issue-11-implementation","title":"Example: Gemini's Issue #11 Implementation","text":"<p>The Problem: Gemini provided three implementation plans with blank templates: <pre><code>File to be modified: [BLANK]\nCode to be added: [BLANK]\n</code></pre></p> <p>The Solution: Provided concrete examples: <pre><code>File to be modified: /srv/apps/shifts/src/config/index.js\nCode structure: highlightedDates: [{ date: \"2025-09-21\", label: \"Dry-run\", className: \"highlight-dry-run\" }]\n</code></pre></p> <p>The Result: Once given specific details, Gemini successfully implemented the feature.</p>"},{"location":"guides/working-with-ai-agents/#example-geminis-issue-12-debugging-journey","title":"Example: Gemini's Issue #12 Debugging Journey","text":"<p>The Pattern: Gemini's systematic debugging approach: 1. First hypothesis: Generation problem \u2192 Not the issue 2. Second hypothesis: Timezone bug \u2192 Fixed real bug, not THE bug 3. Third hypothesis: Data loading order \u2192 Improved code, still not fixed 4. Final discovery: Empty arrays overwriting data \u2192 Correct! But didn't implement</p> <p>The Lesson: Gemini found the right answer but lacked confidence to implement. When an AI identifies the root cause, encourage them to trust their analysis and apply the fix.</p>"},{"location":"guides/working-with-ai-agents/#best-practices-for-ai-collaboration","title":"Best Practices for AI Collaboration","text":""},{"location":"guides/working-with-ai-agents/#1-clear-communication","title":"1. Clear Communication","text":"<ul> <li>Be Specific: Always provide full file paths</li> <li>Show Examples: Include code snippets</li> <li>Set Expectations: Clarify MVP vs production requirements</li> </ul>"},{"location":"guides/working-with-ai-agents/#2-review-process","title":"2. Review Process","text":"<pre><code># Always review AI commits\ngit pull\ngit log --oneline -5\ngit diff HEAD~1\n\n# Test immediately\nnpm run build\nnpm test  # if tests exist\n\n# Check deployment\npython3 /srv/jtools/screenshot.py https://kaut.to/app/\n</code></pre>"},{"location":"guides/working-with-ai-agents/#3-common-fixes-needed","title":"3. Common Fixes Needed","text":""},{"location":"guides/working-with-ai-agents/#build-failures","title":"Build Failures","text":"<p>Often caused by hardcoded asset paths: <pre><code>// Bad (Gemini often does this)\n&lt;script src=\"/app/assets/index-ABC123.js\"&gt;&lt;/script&gt;\n\n// Good\n&lt;script type=\"module\" src=\"/src/main.js\"&gt;&lt;/script&gt;\n</code></pre></p>"},{"location":"guides/working-with-ai-agents/#missing-imports","title":"Missing Imports","text":"<p>Check for components used but not imported: <pre><code>// If Legend is used but not imported\nimport { Legend } from '../Legend/index.js';\n</code></pre></p>"},{"location":"guides/working-with-ai-agents/#4-feedback-templates","title":"4. Feedback Templates","text":""},{"location":"guides/working-with-ai-agents/#for-good-work","title":"For Good Work:","text":"<pre><code>## \u2705 Implementation Review - APPROVED\n- Feature works as expected\n- Clean code structure\n- All acceptance criteria met\nMinor issue: [specific issue] - I fixed it\nGreat job overall!\n</code></pre>"},{"location":"guides/working-with-ai-agents/#for-issues","title":"For Issues:","text":"<pre><code>## \ud83d\udd27 Needs Improvement\nThe plan has blank spaces where critical information should be:\n- File paths are missing\n- No actual code examples\nPlease provide:\n1. Complete file paths\n2. Actual code snippets\n3. Specific implementation details\n</code></pre>"},{"location":"guides/working-with-ai-agents/#working-with-multiple-ai-agents","title":"Working with Multiple AI Agents","text":""},{"location":"guides/working-with-ai-agents/#division-of-labor","title":"Division of Labor","text":"<ul> <li>Claude Code: Project management, code review, deployment</li> <li>Gemini: Feature implementation (with supervision)</li> <li>Other AIs: Specialized tasks (documentation, testing)</li> </ul>"},{"location":"guides/working-with-ai-agents/#coordination-tips","title":"Coordination Tips","text":"<ol> <li>One AI per issue/feature</li> <li>Clear handoffs in issue comments</li> <li>Always verify work before closing issues</li> <li>Document fixes needed for future reference</li> </ol>"},{"location":"guides/working-with-ai-agents/#common-pitfalls-and-solutions","title":"Common Pitfalls and Solutions","text":"Problem Solution Blank implementation plans Provide concrete examples No Git workflow Remind about branches/PRs Build failures Check and fix immediately Over-engineering Emphasize MVP approach Missing tests Accept for MVP, note for later"},{"location":"guides/working-with-ai-agents/#quick-reference-commands","title":"Quick Reference Commands","text":"<pre><code># Check AI's work\ngh issue view &lt;number&gt; --comments\ngit log --author=\"Claude AI\" --oneline\n\n# Fix common issues\nnpm run build  # Check for build errors\ngit commit --amend  # Fix commit messages\ngit push --force-with-lease  # Update after fixes\n\n# Provide feedback\ngh issue comment &lt;number&gt; -b \"Feedback here\"\n</code></pre>"},{"location":"guides/working-with-ai-agents/#lessons-learned","title":"Lessons Learned","text":"<ol> <li>Be Patient but Firm: AIs may need multiple attempts</li> <li>Trust but Verify: Always test their implementations</li> <li>Fix Forward: Don't spend time on blame, just fix issues</li> <li>Document Patterns: Keep notes on each AI's tendencies</li> <li>Appreciate Success: Celebrate when things work!</li> </ol> <p>Remember: AI agents are tools to augment your productivity. Guide them well, and they can significantly speed up development.</p>"},{"location":"mcp/","title":"MCP (Model Context Protocol) Integration","text":"<p>The MCP integration enables local Claude Code instances to connect directly to the PAI system, providing seamless access to personal tools and data without manual API configuration.</p>"},{"location":"mcp/#what-is-mcp","title":"What is MCP?","text":"<p>Model Context Protocol (MCP) is an open standard that allows Claude Code and other AI applications to connect to external services and tools. In the kaut.to ecosystem, MCP serves as a bridge between local Claude Code instances and the centralized PAI infrastructure.</p>"},{"location":"mcp/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Local Claude Code] --&gt; B[MCP Client]\n    B --&gt; C[Internet]\n    C --&gt; D[mcp.kaut.to Server]\n    D --&gt; E[PAI Toolkit]\n    E --&gt; F[Google Tasks]\n    E --&gt; G[Gmail]\n    E --&gt; H[Calendar]\n    E --&gt; I[Notes]\n    E --&gt; J[Search]\n\n    D --&gt; K[Authentication]\n    K --&gt; L[Basic Auth: kaut:to]\n\n    style A fill:#e1f5fe\n    style D fill:#fff3e0\n    style E fill:#f3e5f5</code></pre>"},{"location":"mcp/#current-capabilities","title":"Current Capabilities","text":""},{"location":"mcp/#task-management","title":"Task Management","text":"<ul> <li>Create tasks: Add new tasks to Google Tasks</li> <li>List tasks: View today's tasks across all accounts</li> <li>Plan generation: Create 1-2-3 priority daily plans</li> <li>Task completion: Mark tasks as completed</li> <li>Multi-account support: Route tasks to appropriate Google accounts</li> </ul>"},{"location":"mcp/#note-management","title":"Note Management","text":"<ul> <li>Create notes: Store notes locally on the PAI server</li> <li>List notes: Browse all saved notes</li> <li>Read notes: Access note content and metadata</li> <li>Tag support: Organize notes with custom tags</li> </ul>"},{"location":"mcp/#documentation-management","title":"Documentation Management","text":"<ul> <li>Read documentation: Access any docs.kaut.to page content</li> <li>Write documentation: Create and update documentation files</li> <li>Search documentation: Find content across all docs</li> <li>Structure management: Get site structure and create sections</li> <li>Auto-building: Automatic documentation site builds</li> </ul>"},{"location":"mcp/#upcoming-features","title":"Upcoming Features","text":"<ul> <li>Email integration: Full Gmail operations</li> <li>Calendar management: Event creation and scheduling</li> <li>Search integration: Perplexity-powered research</li> <li>File operations: PAI system file management</li> </ul>"},{"location":"mcp/#benefits-of-mcp-integration","title":"Benefits of MCP Integration","text":""},{"location":"mcp/#for-users","title":"For Users","text":"<ul> <li>Unified interface: Access PAI tools directly from Claude Code</li> <li>No API setup: Zero configuration required</li> <li>Real-time access: Always up-to-date with PAI capabilities</li> <li>Privacy maintained: All data stays within your ecosystem</li> </ul>"},{"location":"mcp/#for-ai-agents","title":"For AI Agents","text":"<ul> <li>Native tool access: Use PAI tools as first-class functions</li> <li>Consistent authentication: Single credential for all services</li> <li>Error handling: Proper error messages and status codes</li> <li>Structured responses: JSON-formatted tool outputs</li> </ul>"},{"location":"mcp/#quick-start","title":"Quick Start","text":""},{"location":"mcp/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop app installed</li> <li>Access to mcp.kaut.to (Basic Auth: kaut:to)</li> <li>Local MacBook setup (for Voice Mode)</li> </ul>"},{"location":"mcp/#basic-setup","title":"Basic Setup","text":"<ol> <li>Configure MCP server connection</li> <li>Set up local Claude Code configuration</li> <li>Test connection with health check</li> <li>Start using PAI tools directly in conversations</li> </ol>"},{"location":"mcp/#example-usage","title":"Example Usage","text":"<pre><code>User: Create a task to \"Review Q1 budget proposal\" for my xwander account\n\nClaude: I'll create that task for you using the PAI system.\n[Uses MCP task tool to create the task]\n\nTask created successfully: \"Review Q1 budget proposal\" added to your xwander account.\n\n---\n\nUser: What documentation exists about MCP tools?\n\nClaude: Let me search the documentation for you.\n[Uses MCP docs tool to search]\n\nFound comprehensive MCP documentation including setup guides, tool references, \nand integration examples. Here are the key files...\n\n---\n\nUser: Update the API documentation to include the new webhook endpoint\n\nClaude: I'll update the API documentation with the webhook endpoint details.\n[Uses MCP docs tool to read current API docs]\n[Uses MCP docs tool to write updated documentation]\n\nDocumentation updated successfully. The new webhook endpoint is now documented \nat https://docs.kaut.to/api/webhooks/\n</code></pre>"},{"location":"mcp/#server-information","title":"Server Information","text":"<ul> <li>URL: https://mcp.kaut.to (Currently HTTP only - SSL pending)</li> <li>Authentication: HTTP Basic Auth (username: kaut, password: to)</li> <li>Port: 3000</li> <li>Status: Active and operational</li> <li>Health Check: GET https://mcp.kaut.to/health</li> </ul>"},{"location":"mcp/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Server Setup: Technical details of the MCP server implementation</li> <li>Local Claude Setup: Configure Claude Desktop for MCP</li> <li>Voice Mode Setup: Enable voice interaction with MCP tools</li> <li>Tools Reference: Complete documentation of available tools</li> </ul>"},{"location":"mcp/#security-privacy","title":"Security &amp; Privacy","text":"<ul> <li>Authentication: HTTP Basic Auth protects all endpoints</li> <li>Data isolation: Each request is processed independently</li> <li>Audit logging: All tool usage is logged for security</li> <li>Rate limiting: 60 requests per minute to prevent abuse</li> <li>CORS enabled: Allows browser-based MCP clients</li> </ul>"},{"location":"mcp/#support-troubleshooting","title":"Support &amp; Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check server health: <code>curl http://mcp.kaut.to:3000/health</code></li> <li>Verify authentication: Ensure you're using <code>kaut:to</code> credentials</li> <li>Review logs: Server logs are available at <code>/srv/pai/logs/mcp_server.log</code></li> <li>Test locally: Verify PAI tools work directly on the server</li> </ol>"},{"location":"mcp/#development-status","title":"Development Status","text":"<ul> <li>Version: 1.0.0</li> <li>Status: Production ready</li> <li>Last updated: January 2025</li> <li>Maintained by: DAI system</li> </ul> <p>Getting Started</p> <p>New to MCP? Start with the Local Claude Setup guide to get your first connection working in 5 minutes.</p> <p>SSL Certificate</p> <p>The SSL certificate for mcp.kaut.to is pending. Currently using HTTP on port 3000. HTTPS support will be added soon.</p>"},{"location":"mcp/local-claude-setup/","title":"Local Claude Code Configuration","text":"<p>This guide walks you through configuring Claude Desktop on your MacBook to connect to the PAI MCP server, enabling direct access to PAI tools from your local Claude Code interface.</p>"},{"location":"mcp/local-claude-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop app installed (latest version)</li> <li>macOS 12+ (Monterey or later)</li> <li>Network access to mcp.kaut.to</li> <li>Basic auth credentials: kaut:to</li> </ul>"},{"location":"mcp/local-claude-setup/#configuration-steps","title":"Configuration Steps","text":""},{"location":"mcp/local-claude-setup/#1-locate-claude-desktop-config","title":"1. Locate Claude Desktop Config","text":"<p>Claude Desktop stores its configuration in your user's application support directory:</p> <pre><code># Navigate to Claude Desktop config directory\ncd ~/Library/Application\\ Support/Claude/\n\n# Create config file if it doesn't exist\ntouch claude_desktop_config.json\n</code></pre>"},{"location":"mcp/local-claude-setup/#2-basic-mcp-server-configuration","title":"2. Basic MCP Server Configuration","text":"<p>Add the PAI MCP server to your configuration:</p> <pre><code>{\n  \"mcp\": {\n    \"servers\": [\n      {\n        \"name\": \"pai-mcp\",\n        \"url\": \"http://mcp.kaut.to:3000\",\n        \"auth\": {\n          \"type\": \"basic\",\n          \"username\": \"kaut\",\n          \"password\": \"to\"\n        },\n        \"description\": \"PAI Personal AI Tools\",\n        \"tools\": [\"task\", \"note\"]\n      }\n    ],\n    \"settings\": {\n      \"timeout\": 30000,\n      \"retries\": 3,\n      \"keepAlive\": true\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/local-claude-setup/#3-testing-the-connection","title":"3. Testing the Connection","text":"<p>After updating the configuration:</p> <ol> <li>Restart Claude Desktop completely</li> <li>Open a new conversation</li> <li>Test with: \"Can you create a task for me to test MCP integration?\"</li> </ol> <p>You should see Claude use the MCP task tool to create the task.</p>"},{"location":"mcp/local-claude-setup/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"mcp/local-claude-setup/#file-permissions","title":"File Permissions","text":"<p>Ensure Claude Desktop can read the configuration:</p> <pre><code>chmod 644 ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n</code></pre>"},{"location":"mcp/local-claude-setup/#json-syntax-validation","title":"JSON Syntax Validation","text":"<p>Validate your configuration file:</p> <pre><code>python3 -m json.tool ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n</code></pre>"},{"location":"mcp/local-claude-setup/#network-connectivity","title":"Network Connectivity","text":"<p>Test connection to MCP server:</p> <pre><code># Test basic connectivity\ncurl http://mcp.kaut.to:3000/health\n\n# Test with authentication\ncurl -u \"kaut:to\" http://mcp.kaut.to:3000/\n</code></pre>"},{"location":"mcp/local-claude-setup/#security-considerations","title":"Security Considerations","text":"<p>Set restrictive permissions on the config file:</p> <pre><code>chmod 600 ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n</code></pre> <p>The configuration contains authentication credentials, so protect it appropriately.</p>"},{"location":"mcp/local-claude-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp/local-claude-setup/#connection-failures","title":"Connection Failures","text":"<ol> <li>Check network connectivity to mcp.kaut.to</li> <li>Verify credentials are correct (kaut:to)  </li> <li>Confirm server is running: <code>curl http://mcp.kaut.to:3000/health</code></li> <li>Restart Claude Desktop after config changes</li> </ol>"},{"location":"mcp/local-claude-setup/#authentication-errors","title":"Authentication Errors","text":"<ol> <li>Double-check username/password in config</li> <li>Ensure no extra spaces in credentials</li> <li>Test authentication manually with curl</li> </ol> <p>For more advanced configuration options and troubleshooting, see the full MCP documentation.</p>"},{"location":"mcp/search-tool/","title":"Search Tool - Perplexity AI Integration","text":"<p>The search tool provides powerful web search capabilities through Perplexity AI, enabling your local Claude Code to access real-time information beyond its training data.</p>"},{"location":"mcp/search-tool/#overview","title":"Overview","text":"<p>The search tool integrates with the existing px.py Perplexity search implementation, providing multiple search modes and intelligent caching.</p>"},{"location":"mcp/search-tool/#available-methods","title":"Available Methods","text":""},{"location":"mcp/search-tool/#1-perplexity-search","title":"1. Perplexity Search","text":"<p>General-purpose search with multiple modes.</p> <p>Endpoint: <code>POST /tools/search/perplexity</code></p> <p>Parameters: - <code>query</code> (required): Search query string - <code>mode</code> (optional): Search mode - <code>quick</code> (default), <code>detailed</code>, <code>academic</code>, <code>news</code> - <code>max_results</code> (optional): Maximum number of results (default: 5)</p> <p>Example: <pre><code>{\n  \"query\": \"latest AI developments 2025\",\n  \"mode\": \"detailed\"\n}\n</code></pre></p>"},{"location":"mcp/search-tool/#2-web-search","title":"2. Web Search","text":"<p>Web search with optional filters for site-specific searches.</p> <p>Endpoint: <code>POST /tools/search/web</code></p> <p>Parameters: - <code>query</code> (required): Search query - <code>filters</code> (optional): Filter object   - <code>site</code>: Limit to specific domain   - <code>filetype</code>: File type filter   - <code>intitle</code>: Title search   - <code>after</code>: Date filter</p> <p>Example: <pre><code>{\n  \"query\": \"FastAPI tutorial\",\n  \"filters\": {\n    \"site\": \"github.com\",\n    \"filetype\": \"md\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/search-tool/#3-code-search","title":"3. Code Search","text":"<p>Specialized search for code examples and implementations.</p> <p>Endpoint: <code>POST /tools/search/code</code></p> <p>Parameters: - <code>query</code> (required): Code search query - <code>language</code> (optional): Programming language filter</p> <p>Features: - Automatically searches GitHub, StackOverflow, and dev.to - Extracts code blocks from results - Language-specific optimization</p> <p>Example: <pre><code>{\n  \"query\": \"async websocket server\",\n  \"language\": \"python\"\n}\n</code></pre></p>"},{"location":"mcp/search-tool/#4-news-search","title":"4. News Search","text":"<p>Search for recent news and updates.</p> <p>Endpoint: <code>POST /tools/search/news</code></p> <p>Parameters: - <code>query</code> (required): News topic - <code>timeframe</code> (optional): Time period - <code>day</code>, <code>week</code> (default), <code>month</code></p> <p>Example: <pre><code>{\n  \"query\": \"artificial intelligence regulation\",\n  \"timeframe\": \"week\"\n}\n</code></pre></p>"},{"location":"mcp/search-tool/#5-research","title":"5. Research","text":"<p>Deep research with multiple related queries.</p> <p>Endpoint: <code>POST /tools/search/research</code></p> <p>Parameters: - <code>topic</code> (required): Research topic - <code>depth</code> (optional): Research depth - <code>quick</code>, <code>standard</code> (default), <code>deep</code></p> <p>Depth Levels: - <code>quick</code>: Single query, fast results - <code>standard</code>: Main topic + comprehensive guide - <code>deep</code>: Multiple queries covering overview, developments, best practices, challenges</p> <p>Example: <pre><code>{\n  \"topic\": \"quantum error correction\",\n  \"depth\": \"deep\"\n}\n</code></pre></p>"},{"location":"mcp/search-tool/#6-cache-status","title":"6. Cache Status","text":"<p>Check search cache information.</p> <p>Endpoint: <code>POST /tools/search/cache_status</code></p> <p>Returns: - Cache file count - Cache size - Recent searches</p>"},{"location":"mcp/search-tool/#7-clear-cache","title":"7. Clear Cache","text":"<p>Clear cached search results.</p> <p>Endpoint: <code>POST /tools/search/clear_cache</code></p> <p>Parameters: - <code>older_than_days</code> (optional): Only clear cache older than N days</p>"},{"location":"mcp/search-tool/#response-format","title":"Response Format","text":"<p>All search methods return a structured response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"query\": \"original query\",\n  \"content\": \"full search results\",\n  \"sections\": {\n    \"summary\": \"brief summary\",\n    \"key_points\": [\"point 1\", \"point 2\"],\n    \"sources\": [\"url1\", \"url2\"],\n    \"details\": \"detailed content\"\n  },\n  \"timestamp\": \"2025-01-13T...\",\n  \"cached\": false\n}\n</code></pre>"},{"location":"mcp/search-tool/#claude-usage-examples","title":"Claude Usage Examples","text":""},{"location":"mcp/search-tool/#basic-search","title":"Basic Search","text":"<pre><code>You: Search for information about Docker best practices\nClaude: [Uses search tool to query Perplexity]\n</code></pre>"},{"location":"mcp/search-tool/#code-search","title":"Code Search","text":"<pre><code>You: Find Python examples of async database connections\nClaude: [Uses code search with Python language filter]\n</code></pre>"},{"location":"mcp/search-tool/#news-search","title":"News Search","text":"<pre><code>You: What's the latest news about SpaceX?\nClaude: [Uses news search with week timeframe]\n</code></pre>"},{"location":"mcp/search-tool/#deep-research","title":"Deep Research","text":"<pre><code>You: Do comprehensive research on transformer architectures\nClaude: [Uses research with deep depth]\n</code></pre>"},{"location":"mcp/search-tool/#features","title":"Features","text":""},{"location":"mcp/search-tool/#intelligent-caching","title":"Intelligent Caching","text":"<ul> <li>Results are cached to reduce API calls</li> <li>Cache stored in <code>/srv/jtools/px/.cache/</code></li> <li>Automatic cache management</li> </ul>"},{"location":"mcp/search-tool/#source-attribution","title":"Source Attribution","text":"<ul> <li>All results include source URLs</li> <li>Numbered references for credibility</li> <li>Direct links to original content</li> </ul>"},{"location":"mcp/search-tool/#code-extraction","title":"Code Extraction","text":"<ul> <li>Automatically identifies code blocks</li> <li>Preserves language markers</li> <li>Formats for readability</li> </ul>"},{"location":"mcp/search-tool/#integration-benefits","title":"Integration Benefits","text":"<ol> <li>Real-time Information: Access current data beyond training cutoff</li> <li>Verified Sources: All information includes source attribution</li> <li>Specialized Modes: Optimized for different search types</li> <li>Efficient Caching: Reduces redundant API calls</li> <li>Structured Results: Consistent, parseable response format</li> </ol>"},{"location":"mcp/search-tool/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp/search-tool/#search-timeout","title":"Search Timeout","text":"<ul> <li>Default timeout: 30 seconds</li> <li>Complex searches may take longer</li> <li>Consider using <code>quick</code> mode for faster results</li> </ul>"},{"location":"mcp/search-tool/#no-results","title":"No Results","text":"<ul> <li>Check query spelling</li> <li>Try broader search terms</li> <li>Verify network connectivity</li> </ul>"},{"location":"mcp/search-tool/#cache-issues","title":"Cache Issues","text":"<ul> <li>Use <code>clear_cache</code> to reset</li> <li>Check disk space in <code>/srv/jtools/px/</code></li> </ul>"},{"location":"mcp/search-tool/#technical-details","title":"Technical Details","text":"<ul> <li>Backend: px.py (Perplexity AI integration)</li> <li>Location: <code>/srv/jtools/px/</code></li> <li>Cache: JSON files in <code>.cache/</code> directory</li> <li>Timeout: 30 seconds per search</li> <li>Rate Limiting: Handled by px.py</li> </ul> <p>Search tool added to MCP Server v1.0.0 Powered by Perplexity AI</p> <p>Last updated: 2025-08-13 13:23:17 via MCP</p>"},{"location":"mcp/server-setup/","title":"MCP Server Setup","text":"<p>The PAI MCP server provides HTTP-based access to PAI tools and capabilities, implementing the Model Context Protocol standard for Claude Code integration.</p>"},{"location":"mcp/server-setup/#server-architecture","title":"Server Architecture","text":"<p>The server is built using FastAPI and provides these key features:</p> <ul> <li>HTTP Basic Authentication: Secure access with kaut:to credentials</li> <li>RESTful API endpoints: Standard HTTP endpoints for tool operations</li> <li>CORS support: Enables browser-based MCP clients</li> <li>Request logging: All operations logged for security</li> <li>Rate limiting: 60 requests per minute protection</li> </ul>"},{"location":"mcp/server-setup/#server-location","title":"Server Location","text":"<ul> <li>Domain: mcp.kaut.to (HTTP only - SSL pending)</li> <li>Port: 3000</li> <li>Service Path: <code>/srv/pai/mcp_server/</code></li> <li>Executable: <code>mcp_server.py</code></li> </ul>"},{"location":"mcp/server-setup/#available-endpoints","title":"Available Endpoints","text":""},{"location":"mcp/server-setup/#core-endpoints","title":"Core Endpoints","text":"<ul> <li><code>GET /</code> - Server capabilities and protocol info (auth required)</li> <li><code>GET /health</code> - Health check (no auth required)</li> <li><code>GET /tools</code> - List available tools (auth required)</li> </ul>"},{"location":"mcp/server-setup/#tool-endpoints","title":"Tool Endpoints","text":"<ul> <li><code>POST /tools/task/{method}</code> - Task operations (create, list, plan, complete)</li> <li><code>POST /tools/note/{method}</code> - Note operations (create, list, read)</li> <li><code>POST /tools/execute</code> - Generic tool execution endpoint</li> </ul>"},{"location":"mcp/server-setup/#authentication","title":"Authentication","text":"<p>All endpoints except <code>/health</code> require HTTP Basic Authentication: - Username: kaut - Password: to</p> <p>Same credentials used across all kaut.to services.</p>"},{"location":"mcp/server-setup/#tool-integration","title":"Tool Integration","text":"<p>Tools are executed via subprocess calls to existing PAI toolkit: - Task operations call <code>/srv/pai/toolkit/task.py</code> - Note operations use local file system storage - Multi-account support for Google services</p>"},{"location":"mcp/server-setup/#monitoring-logs","title":"Monitoring &amp; Logs","text":"<ul> <li>Log File: <code>/srv/pai/logs/mcp_server.log</code></li> <li>Health Check: <code>curl http://mcp.kaut.to:3000/health</code></li> <li>Service Status: Check via systemctl or process monitoring</li> </ul>"},{"location":"mcp/server-setup/#configuration","title":"Configuration","text":"<p>Server reads configuration from: - <code>/srv/pai/mcp_server/mcp_capabilities.json</code> - Tool definitions - <code>/srv/.env</code> and <code>/var/www/.env</code> - Environment variables - Service account credentials for Google APIs</p>"},{"location":"mcp/server-setup/#security","title":"Security","text":"<ul> <li>HTTP Basic Auth protects all tool endpoints</li> <li>Rate limiting prevents abuse (60 req/min)</li> <li>Audit logging tracks all tool usage</li> <li>CORS configured for secure browser access</li> </ul> <p>For detailed technical implementation, see the source code at <code>/srv/pai/mcp_server/mcp_server.py</code>.</p>"},{"location":"mcp/test-from-api/","title":"Test Document from MCP API","text":"<p>This document was created through the MCP server docs tool.</p>"},{"location":"mcp/test-from-api/#features","title":"Features","text":"<ul> <li>Created via API</li> <li>Automatic build trigger</li> <li>Accessible at docs.kaut.to</li> </ul>"},{"location":"mcp/test-from-api/#test-section","title":"Test Section","text":"<p>This proves that the docs tool is working correctly!</p> <p>Last updated: 2025-08-13 13:12:15 via MCP</p>"},{"location":"mcp/tools-reference/","title":"MCP Tools Reference","text":"<p>Complete reference documentation for all PAI tools available through the MCP server. These tools integrate seamlessly with Claude Desktop to provide direct access to your personal productivity systems.</p>"},{"location":"mcp/tools-reference/#available-tools-overview","title":"Available Tools Overview","text":"Tool Status Description Capabilities task Active Google Tasks management Create, list, plan, complete note Active Local note storage Create, list, read with tags docs Active docs.kaut.to integration Read, write, search documentation email Planned Gmail operations Read, send, search emails calendar Planned Calendar management Events, scheduling, availability"},{"location":"mcp/tools-reference/#task-tool","title":"Task Tool","text":"<p>The task tool provides complete Google Tasks management across multiple accounts, enabling seamless task creation, organization, and planning.</p>"},{"location":"mcp/tools-reference/#create-tasks","title":"Create Tasks","text":"<p>Create new tasks with automatic account routing and smart categorization.</p> <p>Endpoint: <code>POST /tools/task/create</code></p> <p>Parameters: - <code>description</code> (required): Task description - <code>account</code> (optional): Target account (personal, xwander, accolade)</p> <p>Examples: <pre><code>{\n  \"description\": \"Review quarterly budget proposal\"\n}\n\n{\n  \"description\": \"Prepare Nordic expansion presentation\",\n  \"account\": \"xwander\"\n}\n</code></pre></p> <p>Claude Usage: <pre><code>User: \"Create a task to review the Q1 budget\"\nClaude: [Uses task tool] Task created: \"Review the Q1 budget\"\n\nUser: \"Add a task for my Xwander account to prepare the Nordic presentation\"  \nClaude: [Routes to xwander account] Task created for Xwander account\n</code></pre></p>"},{"location":"mcp/tools-reference/#list-tasks","title":"List Tasks","text":"<p>Retrieve and display tasks with filtering options.</p> <p>Endpoint: <code>POST /tools/task/list</code></p> <p>Parameters: - <code>account</code> (optional): Filter by account (default: \"all\") - <code>filter</code> (optional): Filter type (default: \"today\")</p> <p>Filter Options: - <code>today</code>: Tasks due today or overdue - <code>week</code>: Tasks due this week - <code>all</code>: All tasks</p> <p>Examples: <pre><code>{\n  \"account\": \"all\",\n  \"filter\": \"today\"\n}\n\n{\n  \"account\": \"xwander\",\n  \"filter\": \"all\"\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#generate-daily-plans","title":"Generate Daily Plans","text":"<p>Create structured 1-2-3 priority plans from current tasks.</p> <p>Endpoint: <code>POST /tools/task/plan</code></p> <p>Parameters: None (analyzes current task load automatically)</p> <p>Claude Usage: <pre><code>User: \"What's my daily plan?\"\nClaude: [Generates plan from current tasks] Here's your 1-2-3 priority plan for today...\n\nUser: \"Show me my tasks\"  \nClaude: [Lists organized by account and priority]\n</code></pre></p>"},{"location":"mcp/tools-reference/#multi-account-support","title":"Multi-Account Support","text":"<p>Tasks are automatically routed to appropriate accounts based on:</p> <ol> <li>Explicit account parameter: <code>\"account\": \"xwander\"</code></li> <li>Context tags in description: <code>\"[accolade] Contract review\"</code></li> <li>Smart routing: Based on content keywords and patterns</li> <li>Default routing: Falls back to personal account</li> </ol> <p>Account Mapping: - personal: joni.kautto@gmail.com (default) - xwander: joni@xwander.fi (business) - accolade: joni@accolade.fi (client work)</p>"},{"location":"mcp/tools-reference/#note-tool","title":"Note Tool","text":"<p>Local note storage system with tagging and search capabilities, perfect for quick thoughts, meeting notes, and reference material.</p>"},{"location":"mcp/tools-reference/#create-notes","title":"Create Notes","text":"<p>Store notes locally on the PAI server with metadata.</p> <p>Endpoint: <code>POST /tools/note/create</code></p> <p>Parameters: - <code>content</code> (required): Note content/body - <code>title</code> (optional): Note title (auto-generated if not provided) - <code>tags</code> (optional): Array of tags for organization</p> <p>Examples: <pre><code>{\n  \"content\": \"Meeting with Sarah went well. She approved the budget increase for Q2.\"\n}\n\n{\n  \"title\": \"Sarah Meeting - Budget Approval\",\n  \"content\": \"Meeting notes with next steps and action items\",\n  \"tags\": [\"meeting\", \"budget\", \"sarah\", \"q2\"]\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#list-notes","title":"List Notes","text":"<p>Browse all stored notes with metadata.</p> <p>Endpoint: <code>POST /tools/note/list</code></p> <p>Parameters: None</p>"},{"location":"mcp/tools-reference/#read-notes","title":"Read Notes","text":"<p>Retrieve full note content and metadata.</p> <p>Endpoint: <code>POST /tools/note/read</code></p> <p>Parameters: - <code>note_id</code> (required): Note ID to retrieve</p>"},{"location":"mcp/tools-reference/#documentation-tool","title":"Documentation Tool","text":"<p>The docs tool provides complete integration with docs.kaut.to, enabling Claude Code to read, write, and manage documentation directly. This tool bridges the gap between local development and centralized documentation.</p>"},{"location":"mcp/tools-reference/#list-documentation-files","title":"List Documentation Files","text":"<p>Browse documentation directory structure and find files.</p> <p>Endpoint: <code>POST /tools/docs/list</code></p> <p>Parameters: - <code>directory</code> (optional): Directory path to list (default: root docs directory) - <code>include_content</code> (optional): Include file content preview (default: false)</p> <p>Examples: <pre><code>{\n  \"directory\": \"guides\"\n}\n\n{\n  \"directory\": \"api\",\n  \"include_content\": true\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"directory\": \"/srv/docs/docs/guides/\",\n  \"files\": [\n    {\n      \"name\": \"getting-started.md\",\n      \"path\": \"/srv/docs/docs/guides/getting-started.md\",\n      \"size\": 2048,\n      \"modified\": \"2025-01-13T10:30:00Z\"\n    }\n  ]\n}\n</code></pre></p> <p>Claude Usage: <pre><code>User: \"What documentation files are available?\"\nClaude: [docs.list] Here are all the documentation files organized by section...\n\nUser: \"Show me the API documentation files\"\nClaude: [docs.list with directory=\"api\"] Here are the API documentation files...\n</code></pre></p>"},{"location":"mcp/tools-reference/#read-documentation","title":"Read Documentation","text":"<p>Access full content of any documentation file.</p> <p>Endpoint: <code>POST /tools/docs/read</code></p> <p>Parameters: - <code>file_path</code> (required): Path to documentation file - <code>section</code> (optional): Specific section to extract</p> <p>Examples: <pre><code>{\n  \"file_path\": \"guides/getting-started.md\"\n}\n\n{\n  \"file_path\": \"api/tools-api.md\",\n  \"section\": \"Authentication\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"file_path\": \"/srv/docs/docs/guides/getting-started.md\",\n  \"content\": \"# Getting Started Guide\\n\\nWelcome to...\",\n  \"metadata\": {\n    \"title\": \"Getting Started Guide\",\n    \"sections\": [\"Prerequisites\", \"Installation\", \"First Steps\"]\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#write-documentation","title":"Write Documentation","text":"<p>Create or update documentation files with automatic building.</p> <p>Endpoint: <code>POST /tools/docs/write</code></p> <p>Parameters: - <code>file_path</code> (required): Target file path - <code>content</code> (required): File content - <code>create_backup</code> (optional): Create backup before overwriting (default: true) - <code>auto_build</code> (optional): Trigger documentation build (default: true)</p> <p>Examples: <pre><code>{\n  \"file_path\": \"guides/new-feature.md\",\n  \"content\": \"# New Feature Guide\\n\\nThis guide explains...\"\n}\n\n{\n  \"file_path\": \"api/endpoint-reference.md\", \n  \"content\": \"# API Endpoint Reference\\n\\n## Authentication\\n...\",\n  \"create_backup\": true,\n  \"auto_build\": false\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"file_path\": \"/srv/docs/docs/guides/new-feature.md\",\n  \"action\": \"created\",\n  \"backup_path\": \"/srv/docs/docs/guides/new-feature.md.backup.20250113103000\",\n  \"build_triggered\": true,\n  \"url\": \"https://docs.kaut.to/guides/new-feature/\"\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#search-documentation","title":"Search Documentation","text":"<p>Find content across all documentation files.</p> <p>Endpoint: <code>POST /tools/docs/search</code></p> <p>Parameters: - <code>query</code> (required): Search query - <code>type</code> (optional): Search type - \"content\", \"titles\", \"both\" (default: \"both\") - <code>directory</code> (optional): Limit search to specific directory</p> <p>Examples: <pre><code>{\n  \"query\": \"authentication\"\n}\n\n{\n  \"query\": \"API endpoint\",\n  \"type\": \"content\",\n  \"directory\": \"api\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"query\": \"authentication\",\n  \"results\": [\n    {\n      \"file\": \"api/tools-api.md\",\n      \"title\": \"Tools API Reference\",\n      \"matches\": [\n        {\n          \"line\": 45,\n          \"content\": \"Authentication is required for all API endpoints...\",\n          \"context\": \"## Authentication\\n\\nAuthentication is required...\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#create-documentation-section","title":"Create Documentation Section","text":"<p>Create a new documentation section with proper structure.</p> <p>Endpoint: <code>POST /tools/docs/create_section</code></p> <p>Parameters: - <code>section_name</code> (required): Name of the new section - <code>description</code> (required): Section description - <code>files</code> (optional): Initial files to create</p> <p>Examples: <pre><code>{\n  \"section_name\": \"integrations\",\n  \"description\": \"Third-party integrations and APIs\"\n}\n\n{\n  \"section_name\": \"tutorials\",\n  \"description\": \"Step-by-step tutorials\",\n  \"files\": [\n    {\n      \"name\": \"index.md\",\n      \"content\": \"# Tutorials\\n\\nComprehensive tutorials...\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#get-documentation-structure","title":"Get Documentation Structure","text":"<p>Retrieve the complete documentation site structure.</p> <p>Endpoint: <code>POST /tools/docs/structure</code></p> <p>Parameters: None</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"structure\": {\n    \"root\": \"/srv/docs/docs/\",\n    \"sections\": [\n      {\n        \"name\": \"guides\",\n        \"files\": [\"getting-started.md\", \"ai-agent-onboarding.md\"],\n        \"description\": \"How-to guides and tutorials\"\n      },\n      {\n        \"name\": \"api\", \n        \"files\": [\"tools-api.md\", \"task-api.md\"],\n        \"description\": \"API documentation and references\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools-reference/#documentation-auto-building","title":"Documentation Auto-Building","text":"<p>All write operations automatically trigger the documentation build process:</p> <ol> <li>File saved to <code>/srv/docs/docs/</code></li> <li>Build triggered via <code>/srv/docs/build.sh</code></li> <li>Site updated at https://docs.kaut.to</li> <li>Changes live within 5 minutes (or immediate if manual build)</li> </ol>"},{"location":"mcp/tools-reference/#integration-benefits","title":"Integration Benefits","text":"<p>For Local Claude Code: - Read any docs.kaut.to content directly - Update documentation without server access - Search entire knowledge base - Maintain documentation during development</p> <p>For Documentation Workflow: - Real-time updates from any Claude Code instance - Consistent formatting and structure - Automatic backup and version control - Integrated build process</p> <p>Usage Patterns: <pre><code># Research existing documentation\nUser: \"What documentation exists about API authentication?\"\nClaude: [docs.search] Found authentication docs in 3 files...\n\n# Update documentation during development\nUser: \"Document the new webhook endpoint we just created\"\nClaude: [docs.write] I've added documentation for the webhook endpoint...\n\n# Create comprehensive guides\nUser: \"Create a tutorial for setting up the PAI system\"\nClaude: [docs.create_section] I'll create a new tutorials section...\n         [docs.write] Added comprehensive setup tutorial...\n</code></pre></p>"},{"location":"mcp/tools-reference/#upcoming-tools","title":"Upcoming Tools","text":""},{"location":"mcp/tools-reference/#email-tool-planned","title":"Email Tool (Planned)","text":"<p>Full Gmail integration across multiple accounts.</p> <p>Planned Capabilities: - Read emails: Search and retrieve email content - Send emails: Compose and send messages - Email management: Archive, label, delete - Multi-account: Support for all configured accounts</p>"},{"location":"mcp/tools-reference/#calendar-tool-planned","title":"Calendar Tool (Planned)","text":"<p>Calendar management and scheduling assistance.</p> <p>Planned Capabilities: - View calendar: Today's schedule, upcoming events - Create events: Schedule meetings and appointments - Check availability: Find free time slots</p>"},{"location":"mcp/tools-reference/#tool-usage-patterns","title":"Tool Usage Patterns","text":""},{"location":"mcp/tools-reference/#single-tool-operations","title":"Single Tool Operations","text":"<pre><code># Simple task creation\nUser: \"Create a task to review the contract\"\nClaude: [task.create] Task created successfully\n\n# Quick note taking  \nUser: \"Note that the client prefers email over Slack\"\nClaude: [note.create] Note saved with timestamp\n</code></pre>"},{"location":"mcp/tools-reference/#multi-tool-workflows","title":"Multi-Tool Workflows","text":"<pre><code># Planning and note-taking session\nUser: \"Help me plan my day and take notes on priorities\"\nClaude: [task.plan] Here's your daily plan...\n       [note.create] I've also created a note with today's priorities\n</code></pre>"},{"location":"mcp/tools-reference/#voice-mode-integration","title":"Voice Mode Integration","text":"<pre><code># Voice task management\nUser: \"Show me my tasks and create a new one for the presentation\"\nClaude: [task.list] \"You have 3 tasks today...\"\n       [task.create] \"I've added the presentation task\"\n</code></pre>"},{"location":"mcp/tools-reference/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools-reference/#common-error-responses","title":"Common Error Responses","text":"<p>Authentication Errors: <pre><code>{\n  \"status\": \"error\", \n  \"error\": \"Invalid authentication\",\n  \"code\": 401\n}\n</code></pre></p> <p>Tool Execution Errors: <pre><code>{\n  \"status\": \"error\",\n  \"error\": \"Failed to create task: Google API quota exceeded\",\n  \"tool\": \"task\",\n  \"method\": \"create\"\n}\n</code></pre></p> <p>Claude automatically handles common errors with retry logic and user feedback.</p>"},{"location":"mcp/tools-reference/#rate-limiting-performance","title":"Rate Limiting &amp; Performance","text":""},{"location":"mcp/tools-reference/#current-limits","title":"Current Limits","text":"<ul> <li>Requests per minute: 60</li> <li>Concurrent operations: 5</li> <li>Response timeout: 30 seconds</li> </ul>"},{"location":"mcp/tools-reference/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Response caching for frequently accessed data</li> <li>Batch operations for multiple tasks/notes</li> <li>Connection pooling to reduce latency</li> </ul>"},{"location":"mcp/tools-reference/#security-privacy","title":"Security &amp; Privacy","text":""},{"location":"mcp/tools-reference/#data-handling","title":"Data Handling","text":"<ul> <li>Task data: Stored in Google Tasks (encrypted by Google)</li> <li>Note data: Stored locally on PAI server</li> <li>Transmission: HTTP Basic Auth (HTTPS when SSL ready)</li> <li>Audit logs: All tool usage logged for security</li> </ul>"},{"location":"mcp/tools-reference/#access-control","title":"Access Control","text":"<ul> <li>Authentication required for all tool endpoints</li> <li>Tools respect underlying service permissions</li> <li>Rate limiting prevents abuse</li> </ul> <p>Getting Started</p> <p>Start with simple task and note operations to get familiar with the tools. More advanced features and additional tools will be available soon.</p> <p>Tool Requests</p> <p>Need a specific tool or feature? The MCP server is designed for easy extension. Contact the development team with requirements.</p>"},{"location":"mcp/voice-mode/","title":"Voice Mode Setup for MCP","text":"<p>Voice Mode enables hands-free interaction with PAI tools through Claude Desktop, combining speech recognition with MCP tool integration for a seamless voice-driven productivity experience.</p>"},{"location":"mcp/voice-mode/#overview","title":"Overview","text":"<p>Voice Mode with MCP allows you to: - Create tasks by speaking: \"Create a task to review the quarterly report\" - Take voice notes: \"Take a note about the meeting with Sarah\" - Generate daily plans: \"Show me my daily task plan\" - All while maintaining natural conversation flow</p>"},{"location":"mcp/voice-mode/#prerequisites","title":"Prerequisites","text":""},{"location":"mcp/voice-mode/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>MacBook with macOS 12+ (Monterey or later)</li> <li>Built-in or external microphone</li> <li>Speakers or headphones for voice feedback</li> <li>Stable internet connection for MCP server</li> </ul>"},{"location":"mcp/voice-mode/#software-requirements","title":"Software Requirements","text":"<ul> <li>Claude Desktop with Voice Mode support</li> <li>MCP Configuration completed</li> <li>Microphone access granted to Claude Desktop</li> </ul>"},{"location":"mcp/voice-mode/#audio-system-setup","title":"Audio System Setup","text":""},{"location":"mcp/voice-mode/#1-microphone-configuration","title":"1. Microphone Configuration","text":"<p>Configure your input settings: 1. Open System Preferences &gt; Sound &gt; Input 2. Select your preferred microphone 3. Adjust input volume to 70-80% 4. Enable noise reduction if available</p>"},{"location":"mcp/voice-mode/#2-audio-output-configuration","title":"2. Audio Output Configuration","text":"<p>Configure your output settings: 1. Open System Preferences &gt; Sound &gt; Output 2. Select your preferred output device 3. Set volume to comfortable level (50-70%)</p>"},{"location":"mcp/voice-mode/#claude-desktop-voice-mode-setup","title":"Claude Desktop Voice Mode Setup","text":""},{"location":"mcp/voice-mode/#1-enable-voice-features","title":"1. Enable Voice Features","text":"<p>In Claude Desktop settings, enable voice mode and configure for MCP tools:</p> <pre><code>{\n  \"voice\": {\n    \"enabled\": true,\n    \"settings\": {\n      \"pushToTalk\": true,\n      \"autoStop\": true,\n      \"language\": \"en-US\"\n    },\n    \"responses\": {\n      \"confirmToolCalls\": true,\n      \"announceResults\": true\n    }\n  },\n  \"mcp\": {\n    \"servers\": [\n      {\n        \"name\": \"pai-voice\",\n        \"url\": \"http://mcp.kaut.to:3000\",\n        \"auth\": {\"type\": \"basic\", \"username\": \"kaut\", \"password\": \"to\"},\n        \"voice\": {\n          \"enabled\": true,\n          \"announceTools\": true\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"mcp/voice-mode/#2-audio-permissions","title":"2. Audio Permissions","text":"<p>Grant necessary permissions: 1. System Preferences &gt; Security &amp; Privacy &gt; Privacy 2. Select Microphone in the left sidebar 3. Enable Claude Desktop</p>"},{"location":"mcp/voice-mode/#voice-command-patterns","title":"Voice Command Patterns","text":""},{"location":"mcp/voice-mode/#task-management-commands","title":"Task Management Commands","text":"<p>Creating Tasks: <pre><code>\"Create a task to call the dentist\"\n\"Add a task for tomorrow to review the contract for Accolade account\" \n\"I need to remember to buy groceries this evening\"\n</code></pre></p> <p>Listing and Planning: <pre><code>\"What are my tasks for today?\"\n\"Show me my daily plan\"\n\"What tasks do I have for my Xwander account?\"\n</code></pre></p>"},{"location":"mcp/voice-mode/#note-taking-commands","title":"Note-Taking Commands","text":"<p>Creating Notes: <pre><code>\"Take a note: Meeting with Sarah was productive, discuss budget next week\"\n\"Create a note called 'Project Ideas' with AI automation content\"\n\"Note to self: Check the server logs after lunch\"\n</code></pre></p> <p>Managing Notes: <pre><code>\"Show me all my notes\"\n\"Read my note from this morning\"\n</code></pre></p>"},{"location":"mcp/voice-mode/#optimization-performance","title":"Optimization &amp; Performance","text":""},{"location":"mcp/voice-mode/#audio-quality-settings","title":"Audio Quality Settings","text":"<p>For best recognition: - Use a quiet room with minimal background noise - Keep microphone 12-18 inches from your mouth - Use wired headphones for best quality - Speak clearly and at moderate pace</p>"},{"location":"mcp/voice-mode/#environmental-optimization","title":"Environmental Optimization","text":"<p>Ideal Environment: - Quiet room with minimal background noise - Close microphone placement (12-18 inches) - Stable surface to reduce vibration noise - Good lighting for visual feedback</p>"},{"location":"mcp/voice-mode/#troubleshooting-voice-mcp","title":"Troubleshooting Voice + MCP","text":""},{"location":"mcp/voice-mode/#audio-issues","title":"Audio Issues","text":"<p>Microphone Not Working: 1. Check System Preferences &gt; Sound &gt; Input 2. Verify Claude Desktop has microphone permission 3. Test microphone in other applications 4. Restart Claude Desktop</p> <p>Voice Recognition Problems: - Check audio levels in system preferences - Verify language settings match Voice Mode - Reduce background noise - Adjust microphone position</p>"},{"location":"mcp/voice-mode/#mcp-integration-issues","title":"MCP Integration Issues","text":"<p>Voice Commands Not Triggering Tools: 1. Verify MCP server is accessible: <code>curl http://mcp.kaut.to:3000/health</code> 2. Check authentication credentials in config 3. Test text-based tool calls first 4. Review Claude Desktop logs for errors</p>"},{"location":"mcp/voice-mode/#privacy-security-in-voice-mode","title":"Privacy &amp; Security in Voice Mode","text":"<p>Data Flow: 1. Voice input processed by Claude Desktop 2. Speech-to-text converted locally or via Anthropic 3. Tool calls sent to PAI MCP server 4. Results returned and optionally read aloud</p> <p>Privacy Considerations: - Some voice processing happens locally - MCP calls use HTTP (HTTPS pending) - Voice data not stored on PAI server - Tool usage logged for security</p>"},{"location":"mcp/voice-mode/#voice-mode-best-practices","title":"Voice Mode Best Practices","text":""},{"location":"mcp/voice-mode/#effective-voice-commands","title":"Effective Voice Commands","text":"<p>Be Specific: - \"Create a task to review the quarterly budget\" \u0013 - \"Make a task\" \u0017</p> <p>Use Natural Language: - \"I need to call the client tomorrow morning\" \u0013 - \"Remind me to check the server logs after lunch\" \u0013</p> <p>Provide Context: - \"Create a task for my Xwander account to prepare the Nordic expansion presentation\" \u0013 - \"Add a high-priority task to respond to the Accolade contract by Friday\" \u0013</p>"},{"location":"mcp/voice-mode/#workflow-integration","title":"Workflow Integration","text":"<p>Morning Routine: 1. \"What's my plan for today?\" (task.plan) 2. \"Any urgent tasks?\" (task.list with filters) 3. \"Take a note about today's priorities\" (note.create)</p> <p>Meeting Mode: 1. \"Start meeting notes for [topic]\" 2. Voice note-taking throughout meeting 3. \"Create follow-up tasks from this meeting\"</p> <p>Evening Review: 1. \"What tasks did I complete today?\" 2. \"Any pending tasks for tomorrow?\" 3. \"Take a note about today's accomplishments\"</p> <p>Voice + MCP Power User</p> <p>Once configured, Voice Mode with MCP tools becomes incredibly natural. You can manage tasks, take notes, and interact with PAI tools without touching the keyboard.</p> <p>Quiet Environment</p> <p>Voice Mode works best in quiet environments. Consider using a headset with noise-canceling microphone for optimal performance.</p> <p>Network Dependency</p> <p>Voice Mode requires both internet connectivity (for speech processing) and MCP server access. Ensure stable connections for best experience.</p>"},{"location":"mcp-claude/","title":"MCP &amp; Claude.ai Integration","text":""},{"location":"mcp-claude/#overview","title":"Overview","text":"<p>Model Context Protocol (MCP) is Anthropic's standardized protocol for connecting external data sources and tools to Large Language Models like Claude. This documentation provides verified, working configurations for integrating MCP servers with Claude.ai.</p> <p>Verified Configuration</p> <p>All documentation in this section is based on verified working implementations as of August 15, 2025. The configurations have been tested and confirmed to work with Claude.ai.</p>"},{"location":"mcp-claude/#what-is-mcp","title":"What is MCP?","text":"<p>MCP enables Claude to access external tools, databases, and services in a secure, standardized way. Instead of Claude being limited to its training data, MCP allows it to:</p> <ul> <li>Access real-time data from APIs</li> <li>Interact with databases and file systems</li> <li>Execute custom business logic</li> <li>Integrate with third-party services</li> </ul>"},{"location":"mcp-claude/#key-benefits","title":"Key Benefits","text":""},{"location":"mcp-claude/#for-developers","title":"For Developers","text":"<ul> <li>Standardized Protocol: One protocol for all Claude integrations</li> <li>Secure: Built-in authentication and permission controls</li> <li>Flexible: Support for various transport mechanisms</li> <li>Extensible: Easy to add new tools and capabilities</li> </ul>"},{"location":"mcp-claude/#for-users","title":"For Users","text":"<ul> <li>Enhanced Capabilities: Claude can access external data and tools</li> <li>Real-time Information: Get current data, not just training data</li> <li>Custom Workflows: Automate complex business processes</li> <li>Seamless Integration: Tools appear natively in Claude conversations</li> </ul>"},{"location":"mcp-claude/#quick-start-path","title":"Quick Start Path","text":"<ol> <li>Quick Start Guide - Get a basic server running in 5 minutes</li> <li>Deep Implementation Guide - Complete technical setup</li> <li>Working Examples - Copy-paste implementations</li> <li>Troubleshooting - Solve common issues</li> <li>Architecture Guide - Technical deep dive</li> </ol>"},{"location":"mcp-claude/#working-implementation","title":"Working Implementation","text":"<p>We maintain a verified working MCP server at: - URL: <code>https://mcp.kaut.to/mcp/</code> - Status: \u2705 Active and tested with Claude.ai - Authentication: None (for simplicity) - Tools: Hello World example</p>"},{"location":"mcp-claude/#critical-success-factors","title":"Critical Success Factors","text":""},{"location":"mcp-claude/#must-have","title":"\u2705 Must Have","text":"<ul> <li>Clean subdomain: No HTTP Basic Auth conflicts</li> <li>Proper SSL: Let's Encrypt or valid certificate</li> <li>IPv4 configuration: Avoid IPv6 connection issues</li> <li>Correct CORS headers: Allow claude.ai origin</li> <li>Proper port mapping: nginx to server consistency</li> </ul>"},{"location":"mcp-claude/#common-pitfalls","title":"\u274c Common Pitfalls","text":"<ul> <li>Using localhost instead of 127.0.0.1 in nginx</li> <li>Mixing authentication schemes initially</li> <li>Forgetting trailing slashes in URLs</li> <li>Improper CORS configuration</li> <li>Port conflicts with existing services</li> </ul>"},{"location":"mcp-claude/#resources","title":"Resources","text":""},{"location":"mcp-claude/#official-documentation","title":"Official Documentation","text":"<ul> <li>Anthropic MCP Documentation</li> <li>MCP SDK on GitHub</li> </ul>"},{"location":"mcp-claude/#our-implementation","title":"Our Implementation","text":"<ul> <li>Source code: <code>/srv/mcp-hello/</code></li> <li>Live server: <code>https://mcp.kaut.to/mcp/</code></li> <li>System status: <code>sudo systemctl status mcp-hello</code></li> </ul> <p>This documentation is maintained by the DAI/PAI team and reflects real-world deployment experience.</p>"},{"location":"mcp-claude/architecture/","title":"MCP Architecture Guide","text":"<p>Deep dive into Model Context Protocol architecture, transport mechanisms, and implementation patterns.</p>"},{"location":"mcp-claude/architecture/#overview","title":"Overview","text":"<p>Model Context Protocol (MCP) is a client-server protocol that enables Large Language Models like Claude to securely access external resources and tools.</p> <pre><code>graph TB\n    A[Claude.ai] --&gt;|HTTPS/SSE| B[MCP Server]\n    B --&gt; C[Custom Tools]\n    B --&gt; D[Database Access]\n    B --&gt; E[API Integrations]\n    B --&gt; F[File System]\n\n    G[nginx Proxy] --&gt; B\n    A --&gt; G</code></pre>"},{"location":"mcp-claude/architecture/#protocol-foundation","title":"Protocol Foundation","text":""},{"location":"mcp-claude/architecture/#json-rpc-20-base","title":"JSON-RPC 2.0 Base","text":"<p>MCP is built on JSON-RPC 2.0, providing: - Standardized messaging: Request/response patterns - Error handling: Structured error responses - Extensibility: Custom method support - Bidirectional communication: Both client and server can initiate requests</p>"},{"location":"mcp-claude/architecture/#message-structure","title":"Message Structure","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"hello\",\n    \"arguments\": {\"name\": \"World\"}\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"mcp-claude/architecture/#response-structure","title":"Response Structure","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"content\": [{\"type\": \"text\", \"text\": \"Hello, World!\"}]\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"mcp-claude/architecture/#transport-mechanisms","title":"Transport Mechanisms","text":""},{"location":"mcp-claude/architecture/#1-streamable-http-production","title":"1. Streamable HTTP (Production)","text":"<ul> <li>Transport: HTTP/HTTPS with Server-Sent Events</li> <li>Connection: Long-lived persistent connections</li> <li>Authentication: HTTP-based (OAuth, API keys)</li> <li>Firewall: Standard HTTPS ports (443)</li> </ul>"},{"location":"mcp-claude/architecture/#2-websocket","title":"2. WebSocket","text":"<ul> <li>Transport: WebSocket over HTTP/HTTPS</li> <li>Connection: Full duplex, low latency</li> <li>Authentication: Token-based or session-based</li> <li>Use cases: Real-time updates, interactive applications</li> </ul>"},{"location":"mcp-claude/architecture/#3-standard-io","title":"3. Standard I/O","text":"<ul> <li>Transport: Standard input/output</li> <li>Connection: Process lifetime</li> <li>Authentication: Process isolation</li> <li>Use cases: Development, desktop apps, CLI tools</li> </ul>"},{"location":"mcp-claude/architecture/#core-protocol-methods","title":"Core Protocol Methods","text":""},{"location":"mcp-claude/architecture/#tools","title":"Tools","text":"<ul> <li><code>tools/list</code>: Get available tools</li> <li><code>tools/call</code>: Execute a tool</li> </ul>"},{"location":"mcp-claude/architecture/#resources","title":"Resources","text":"<ul> <li><code>resources/list</code>: Get available resources</li> <li><code>resources/read</code>: Read resource content</li> <li><code>resources/subscribe</code>: Subscribe to resource changes</li> </ul>"},{"location":"mcp-claude/architecture/#prompts","title":"Prompts","text":"<ul> <li><code>prompts/list</code>: Get available prompts</li> <li><code>prompts/get</code>: Retrieve a prompt</li> </ul>"},{"location":"mcp-claude/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"mcp-claude/architecture/#authentication-patterns","title":"Authentication Patterns","text":""},{"location":"mcp-claude/architecture/#no-authentication-development","title":"No Authentication (Development)","text":"<pre><code>session_manager = StreamableHTTPSessionManager(\n    app=mcp_server,\n    authentication=None\n)\n</code></pre>"},{"location":"mcp-claude/architecture/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>async def authenticate_api_key(request):\n    api_key = request.headers.get(\"X-API-Key\")\n    if not validate_api_key(api_key):\n        raise AuthenticationError(\"Invalid API key\")\n    return {\"user_id\": get_user_from_key(api_key)}\n</code></pre>"},{"location":"mcp-claude/architecture/#oauth-20-integration","title":"OAuth 2.0 Integration","text":"<pre><code>from authlib.integrations.starlette_client import OAuth\n\noauth = OAuth()\noauth.register(\n    name='claude',\n    client_id='your-client-id',\n    client_secret='your-client-secret'\n)\n</code></pre>"},{"location":"mcp-claude/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"mcp-claude/architecture/#connection-management","title":"Connection Management","text":"<pre><code>session_manager = StreamableHTTPSessionManager(\n    app=app,\n    max_connections=100,\n    session_timeout=3600\n)\n</code></pre>"},{"location":"mcp-claude/architecture/#caching","title":"Caching","text":"<pre><code>import redis.asyncio as redis\n\ncache = redis.Redis.from_url(\"redis://localhost\")\n\nasync def cached_tool_result(key, ttl=300):\n    cached = await cache.get(key)\n    if cached:\n        return json.loads(cached)\n    # ... compute result ...\n    await cache.setex(key, ttl, json.dumps(result))\n    return result\n</code></pre>"},{"location":"mcp-claude/architecture/#error-handling","title":"Error Handling","text":"<pre><code>class MCPError(Exception):\n    def __init__(self, code: int, message: str):\n        self.code = code\n        self.message = message\n\nasync def handle_tool_error(e: Exception):\n    if isinstance(e, ValueError):\n        return MCPError(-32602, f\"Invalid parameters: {str(e)}\")\n    else:\n        return MCPError(-32603, f\"Internal error: {str(e)}\")\n</code></pre>"},{"location":"mcp-claude/architecture/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"mcp-claude/architecture/#single-server","title":"Single Server","text":"<ul> <li>Simple setup and maintenance</li> <li>Lower resource requirements</li> <li>Single point of failure</li> </ul>"},{"location":"mcp-claude/architecture/#load-balanced","title":"Load Balanced","text":"<ul> <li>High availability</li> <li>Horizontal scaling</li> <li>Shared state management required</li> </ul>"},{"location":"mcp-claude/architecture/#microservices","title":"Microservices","text":"<ul> <li>Service isolation</li> <li>Independent scaling</li> <li>Complex orchestration</li> </ul> <p>For implementation examples, see the Examples section.</p>"},{"location":"mcp-claude/deep-guide/","title":"Deep Implementation Guide","text":"<p>Complete technical guide for implementing production-ready MCP servers with Claude.ai integration.</p> <p>Prerequisites</p> <p>This guide assumes you've completed the Quick Start Guide and have a basic working MCP server.</p>"},{"location":"mcp-claude/deep-guide/#production-server-template","title":"Production Server Template","text":"<pre><code>#!/usr/bin/env python3\nimport logging\nfrom typing import Any\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\n\nlogging.basicConfig(level=logging.INFO)\n\nclass ProductionMCPServer:\n    def __init__(self):\n        self.app = Server(\"production-mcp\")\n        self.setup_tools()\n\n    def setup_tools(self):\n        @self.app.call_tool()\n        async def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n            if name == \"hello\":\n                return await self.hello_tool(arguments)\n            elif name == \"system_info\":\n                return await self.system_info_tool(arguments)\n            return [types.TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n\n        @self.app.list_tools()\n        async def list_tools() -&gt; list[types.Tool]:\n            return [\n                types.Tool(name=\"hello\", description=\"Say hello\", inputSchema={\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}}}),\n                types.Tool(name=\"system_info\", description=\"Get system info\", inputSchema={\"type\": \"object\", \"properties\": {}})\n            ]\n\n    async def hello_tool(self, args: dict) -&gt; list[types.ContentBlock]:\n        name = args.get(\"name\", \"World\")\n        return [types.TextContent(type=\"text\", text=f\"Hello, {name}! From production MCP server.\")]\n\n    async def system_info_tool(self, args: dict) -&gt; list[types.ContentBlock]:\n        import platform\n        info = f\"Platform: {platform.platform()}\\nPython: {platform.python_version()}\"\n        return [types.TextContent(type=\"text\", text=info)]\n\ndef create_app():\n    server = ProductionMCPServer()\n    session_manager = StreamableHTTPSessionManager(app=server.app, json_response=False)\n\n    async def handle_mcp(scope, receive, send):\n        await session_manager.handle_request(scope, receive, send)\n\n    async def lifespan(app):\n        async with session_manager.run():\n            yield\n\n    return Starlette(routes=[Mount(\"/mcp\", app=handle_mcp)], lifespan=lifespan)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(create_app(), host=\"0.0.0.0\", port=8087)\n</code></pre>"},{"location":"mcp-claude/deep-guide/#nginx-configuration","title":"nginx Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name mcp.yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n\n    # CORS for Claude.ai\n    add_header 'Access-Control-Allow-Origin' 'https://claude.ai' always;\n    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Last-Event-ID' always;\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:8087;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # SSE support\n        proxy_buffering off;\n        proxy_cache off;\n        chunked_transfer_encoding off;\n    }\n}\n</code></pre>"},{"location":"mcp-claude/deep-guide/#systemd-service","title":"systemd Service","text":"<pre><code>[Unit]\nDescription=MCP Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=mcp\nWorkingDirectory=/srv/mcp-server\nExecStart=/usr/bin/python3 /srv/mcp-server/server.py\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>For complete implementation details, see the Examples section.</p>"},{"location":"mcp-claude/examples/","title":"Working Code Examples","text":"<p>Complete, copy-paste ready examples for MCP server implementations.</p> <p>Verified Working</p> <p>All examples are based on our verified working implementation at <code>mcp.kaut.to</code> and have been tested with Claude.ai.</p>"},{"location":"mcp-claude/examples/#minimal-hello-world-server","title":"Minimal Hello World Server","text":"<pre><code>#!/usr/bin/env python3\nimport logging\nfrom typing import Any\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\n\nlogging.basicConfig(level=logging.INFO)\napp = Server(\"hello-mcp\")\n\n@app.call_tool()\nasync def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n    if name == \"hello\":\n        name_arg = arguments.get(\"name\", \"World\")\n        return [types.TextContent(type=\"text\", text=f\"Hello, {name_arg}!\")]\n    return [types.TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n\n@app.list_tools()\nasync def list_tools() -&gt; list[types.Tool]:\n    return [\n        types.Tool(\n            name=\"hello\",\n            description=\"Say hello to someone\",\n            inputSchema={\n                \"type\": \"object\",\n                \"properties\": {\"name\": {\"type\": \"string\"}},\n                \"required\": []\n            }\n        )\n    ]\n\ndef create_app():\n    session_manager = StreamableHTTPSessionManager(app=app, json_response=False)\n    async def handle_mcp(scope, receive, send):\n        await session_manager.handle_request(scope, receive, send)\n    async def lifespan(app):\n        async with session_manager.run():\n            yield\n    return Starlette(routes=[Mount(\"/mcp\", app=handle_mcp)], lifespan=lifespan)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(create_app(), host=\"0.0.0.0\", port=8087)\n</code></pre>"},{"location":"mcp-claude/examples/#multi-tool-server","title":"Multi-Tool Server","text":"<pre><code>#!/usr/bin/env python3\nimport logging\nimport time\nfrom typing import Any\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\n\nlogging.basicConfig(level=logging.INFO)\n\nclass MultiToolServer:\n    def __init__(self):\n        self.app = Server(\"multi-tool-mcp\")\n        self.setup_tools()\n\n    def setup_tools(self):\n        @self.app.call_tool()\n        async def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n            if name == \"hello\":\n                return await self.hello_tool(arguments)\n            elif name == \"time\":\n                return await self.time_tool(arguments)\n            elif name == \"calculator\":\n                return await self.calculator_tool(arguments)\n            return [types.TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n\n        @self.app.list_tools()\n        async def list_tools() -&gt; list[types.Tool]:\n            return [\n                types.Tool(name=\"hello\", description=\"Say hello\", inputSchema={\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}}}),\n                types.Tool(name=\"time\", description=\"Get current time\", inputSchema={\"type\": \"object\", \"properties\": {}}),\n                types.Tool(name=\"calculator\", description=\"Calculate math expression\", inputSchema={\"type\": \"object\", \"properties\": {\"expression\": {\"type\": \"string\"}}, \"required\": [\"expression\"]})\n            ]\n\n    async def hello_tool(self, args: dict) -&gt; list[types.ContentBlock]:\n        name = args.get(\"name\", \"World\")\n        return [types.TextContent(type=\"text\", text=f\"Hello, {name}!\")]\n\n    async def time_tool(self, args: dict) -&gt; list[types.ContentBlock]:\n        current_time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        return [types.TextContent(type=\"text\", text=f\"Current time: {current_time}\")]\n\n    async def calculator_tool(self, args: dict) -&gt; list[types.ContentBlock]:\n        expression = args.get(\"expression\", \"\")\n        try:\n            result = eval(expression, {\"__builtins__\": {}})\n            return [types.TextContent(type=\"text\", text=f\"{expression} = {result}\")]\n        except Exception as e:\n            return [types.TextContent(type=\"text\", text=f\"Error: {str(e)}\")]\n\ndef create_app():\n    server = MultiToolServer()\n    session_manager = StreamableHTTPSessionManager(app=server.app, json_response=False)\n\n    async def handle_mcp(scope, receive, send):\n        await session_manager.handle_request(scope, receive, send)\n\n    async def lifespan(app):\n        async with session_manager.run():\n            yield\n\n    return Starlette(routes=[Mount(\"/mcp\", app=handle_mcp)], lifespan=lifespan)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(create_app(), host=\"0.0.0.0\", port=8087)\n</code></pre>"},{"location":"mcp-claude/examples/#nginx-configuration-template","title":"nginx Configuration Template","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name mcp.yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n\n    # CORS Headers for Claude.ai\n    add_header 'Access-Control-Allow-Origin' 'https://claude.ai' always;\n    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Last-Event-ID' always;\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:8087;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # SSE support\n        proxy_buffering off;\n        proxy_cache off;\n        chunked_transfer_encoding off;\n    }\n}\n</code></pre> <p>For more examples, see the Deep Guide.</p>"},{"location":"mcp-claude/quick-start/","title":"Quick Start Guide","text":"<p>Get your first MCP server running with Claude.ai in 5 minutes.</p> <p>Minimal Setup</p> <p>This guide creates the simplest possible working MCP server. No authentication, no complexity - just the essentials to establish a connection with Claude.ai.</p>"},{"location":"mcp-claude/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux server with Python 3.8+</li> <li>nginx with SSL certificate</li> <li>Subdomain (e.g., <code>mcp.yourdomain.com</code>)</li> <li>Basic command line knowledge</li> </ul>"},{"location":"mcp-claude/quick-start/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<pre><code>pip3 install mcp fastmcp starlette uvicorn\n</code></pre>"},{"location":"mcp-claude/quick-start/#step-2-create-minimal-server","title":"Step 2: Create Minimal Server","text":"<p>Create <code>/srv/mcp-hello/server.py</code>:</p> <pre><code>#!/usr/bin/env python3\nimport logging\nfrom typing import Any\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\n\nlogging.basicConfig(level=logging.INFO)\napp = Server(\"hello-mcp\")\n\n@app.call_tool()\nasync def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n    if name == \"hello\":\n        name_arg = arguments.get(\"name\", \"World\")\n        return [types.TextContent(type=\"text\", text=f\"Hello, {name_arg}!\")]\n    return [types.TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n\n@app.list_tools()\nasync def list_tools() -&gt; list[types.Tool]:\n    return [types.Tool(name=\"hello\", description=\"Say hello\", inputSchema={\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}}})]\n\ndef create_app():\n    session_manager = StreamableHTTPSessionManager(app=app, json_response=False)\n    async def handle_mcp(scope, receive, send):\n        await session_manager.handle_request(scope, receive, send)\n    async def lifespan(app):\n        async with session_manager.run():\n            yield\n    return Starlette(routes=[Mount(\"/mcp\", app=handle_mcp)], lifespan=lifespan)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(create_app(), host=\"0.0.0.0\", port=8087)\n</code></pre>"},{"location":"mcp-claude/quick-start/#step-3-connect-to-claudeai","title":"Step 3: Connect to Claude.ai","text":"<ol> <li>Go to Claude.ai \u2192 Settings \u2192 MCP Connectors</li> <li>Add Custom Connector:</li> <li>URL: <code>https://mcp.yourdomain.com/mcp/</code></li> <li>Authentication: None</li> <li>Test with: \"Use the hello tool to greet John\"</li> </ol> <p>For complete setup instructions, see the Deep Guide.</p>"},{"location":"mcp-claude/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues and their solutions when implementing MCP servers with Claude.ai.</p> <p>Debug First</p> <p>Always check logs first: <code>sudo journalctl -u your-mcp-service -f</code></p>"},{"location":"mcp-claude/troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"mcp-claude/troubleshooting/#error-connecting-to-mcp-server-in-claudeai","title":"\"Error connecting to MCP server\" in Claude.ai","text":""},{"location":"mcp-claude/troubleshooting/#common-causes-solutions","title":"Common Causes &amp; Solutions","text":"<p>Server not running: <pre><code>sudo systemctl status mcp-hello\nsudo systemctl restart mcp-hello\n</code></pre></p> <p>Wrong port configuration: <pre><code># Check server port\nsudo netstat -tlnp | grep python\n\n# Verify nginx proxy_pass matches\ngrep proxy_pass /etc/nginx/sites-available/mcp.yourdomain.com\n</code></pre></p> <p>HTTP Basic Auth blocking: <pre><code># Remove any auth_basic from nginx config\ngrep -i auth_basic /etc/nginx/sites-available/mcp.yourdomain.com\n# Should return nothing\n</code></pre></p>"},{"location":"mcp-claude/troubleshooting/#502-bad-gateway-error","title":"\"502 Bad Gateway\" Error","text":"<p>Server not responding: <pre><code># Test server directly\ncurl http://127.0.0.1:8087/mcp/\n\n# Check server logs\nsudo journalctl -u mcp-hello -n 50\n</code></pre></p> <p>IPv6 connection issues: <pre><code># Verify nginx uses IPv4\ngrep proxy_pass /etc/nginx/sites-available/mcp.yourdomain.com\n# Should be: proxy_pass http://127.0.0.1:8087;\n</code></pre></p>"},{"location":"mcp-claude/troubleshooting/#404-not-found-error","title":"\"404 Not Found\" Error","text":"<p>Wrong URL path: <pre><code># Correct: https://mcp.yourdomain.com/mcp/\n# Wrong: https://mcp.yourdomain.com/mcp (no trailing slash)\n</code></pre></p>"},{"location":"mcp-claude/troubleshooting/#cors-issues","title":"CORS Issues","text":""},{"location":"mcp-claude/troubleshooting/#test-cors-headers","title":"Test CORS headers:","text":"<pre><code>curl -H \"Origin: https://claude.ai\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -X OPTIONS \\\n     https://mcp.yourdomain.com/mcp/\n</code></pre>"},{"location":"mcp-claude/troubleshooting/#missing-cors-headers-solution","title":"Missing CORS headers solution:","text":"<pre><code>add_header 'Access-Control-Allow-Origin' 'https://claude.ai' always;\nadd_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\nadd_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Last-Event-ID' always;\n\nif ($request_method = 'OPTIONS') {\n    return 204;\n}\n</code></pre>"},{"location":"mcp-claude/troubleshooting/#tool-issues","title":"Tool Issues","text":""},{"location":"mcp-claude/troubleshooting/#tools-not-appearing-in-claudeai","title":"Tools not appearing in Claude.ai","text":"<p>Test tools endpoint: <pre><code>curl -X POST https://mcp.yourdomain.com/mcp/ \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n</code></pre></p> <p>Verify tool registration: <pre><code>@app.list_tools()\nasync def list_tools() -&gt; list[types.Tool]:\n    return [\n        types.Tool(\n            name=\"hello\",\n            description=\"Say hello\",\n            inputSchema={\"type\": \"object\", \"properties\": {}}\n        )\n    ]\n</code></pre></p>"},{"location":"mcp-claude/troubleshooting/#quick-debug-commands","title":"Quick Debug Commands","text":"<pre><code># Service status\nsudo systemctl status mcp-hello\n\n# Recent logs\nsudo journalctl -u mcp-hello -n 20\n\n# Test endpoint\ncurl -I https://mcp.yourdomain.com/mcp/\n\n# Monitor connections\nsudo tail -f /var/log/nginx/mcp.yourdomain.com.access.log\n</code></pre>"},{"location":"mcp-claude/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"mcp-claude/troubleshooting/#high-cpu-usage","title":"High CPU usage:","text":"<pre><code># Monitor process\ntop -p $(pgrep -f mcp-server)\n\n# Check for infinite loops\nsudo journalctl -u mcp-hello -f | grep ERROR\n</code></pre>"},{"location":"mcp-claude/troubleshooting/#memory-leaks","title":"Memory leaks:","text":"<pre><code># Add memory monitoring\nimport gc\ngc.collect()  # Force garbage collection\n</code></pre> <p>For more detailed troubleshooting, see the Deep Guide.</p>"},{"location":"operations/backup-recovery/","title":"Backup &amp; Recovery","text":"<p>Comprehensive backup and recovery procedures for the DAI/PAI ecosystem.</p>"},{"location":"operations/backup-recovery/#backup-strategy","title":"Backup Strategy","text":""},{"location":"operations/backup-recovery/#what-gets-backed-up","title":"What Gets Backed Up","text":"<ul> <li>Code: All repositories pushed to GitHub</li> <li>Configuration: /srv/.env, service configs</li> <li>Data: SQLite databases, logs, tokens</li> <li>Documentation: Now in GitHub via apps repo</li> </ul>"},{"location":"operations/backup-recovery/#backup-schedule","title":"Backup Schedule","text":"<ul> <li>Daily: Automated git commits and pushes</li> <li>Weekly: Full system state snapshot</li> <li>Monthly: Archived backup to external storage</li> </ul>"},{"location":"operations/backup-recovery/#automated-backups","title":"Automated Backups","text":""},{"location":"operations/backup-recovery/#repository-backups","title":"Repository Backups","text":"<p>All code is automatically backed up via Git: <pre><code># DAI repository\ncd /srv &amp;&amp; git push\n\n# PAI repository  \ncd /srv/pai &amp;&amp; git push\n\n# Apps repository\ncd /srv/apps &amp;&amp; git push\n</code></pre></p>"},{"location":"operations/backup-recovery/#database-backups","title":"Database Backups","text":"<pre><code># Backup Pastebin database\ncp /srv/apps/pastebin/pastebin.db /srv/backups/pastebin-$(date +%Y%m%d).db\n\n# Backup task database\ncp /srv/pai/data/tasks.db /srv/backups/tasks-$(date +%Y%m%d).db\n</code></pre>"},{"location":"operations/backup-recovery/#configuration-backups","title":"Configuration Backups","text":"<pre><code># Backup environment files\ncp /srv/.env /srv/backups/env-$(date +%Y%m%d)\ncp /var/www/.env /srv/backups/www-env-$(date +%Y%m%d)\n\n# Backup nginx configs\nsudo cp -r /etc/nginx/sites-available /srv/backups/nginx-$(date +%Y%m%d)\n</code></pre>"},{"location":"operations/backup-recovery/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"operations/backup-recovery/#service-recovery","title":"Service Recovery","text":"<ol> <li> <p>Identify failed service <pre><code>systemctl status [service-name]\n</code></pre></p> </li> <li> <p>Check logs <pre><code>journalctl -u [service-name] --since \"1 hour ago\"\n</code></pre></p> </li> <li> <p>Restart service <pre><code>sudo systemctl restart [service-name]\n</code></pre></p> </li> </ol>"},{"location":"operations/backup-recovery/#database-recovery","title":"Database Recovery","text":"<pre><code># Stop affected service\nsudo systemctl stop pai-web\n\n# Restore database\ncp /srv/backups/tasks-YYYYMMDD.db /srv/pai/data/tasks.db\n\n# Restart service\nsudo systemctl start pai-web\n</code></pre>"},{"location":"operations/backup-recovery/#full-system-recovery","title":"Full System Recovery","text":"<ol> <li>Boot from backup</li> <li>Restore repositories from GitHub</li> <li>Restore databases from backups</li> <li>Restore environment files</li> <li>Restart all services</li> </ol>"},{"location":"operations/backup-recovery/#disaster-recovery-plan","title":"Disaster Recovery Plan","text":""},{"location":"operations/backup-recovery/#level-1-service-failure","title":"Level 1: Service Failure","text":"<ul> <li>Single service down</li> <li>Use systemctl restart</li> <li>Recovery time: &lt; 5 minutes</li> </ul>"},{"location":"operations/backup-recovery/#level-2-data-corruption","title":"Level 2: Data Corruption","text":"<ul> <li>Database or file corruption</li> <li>Restore from daily backup</li> <li>Recovery time: &lt; 30 minutes</li> </ul>"},{"location":"operations/backup-recovery/#level-3-system-failure","title":"Level 3: System Failure","text":"<ul> <li>Full system compromise</li> <li>Restore from snapshot</li> <li>Recovery time: &lt; 2 hours</li> </ul>"},{"location":"operations/backup-recovery/#backup-verification","title":"Backup Verification","text":""},{"location":"operations/backup-recovery/#weekly-checks","title":"Weekly Checks","text":"<pre><code># Verify backup files exist\nls -la /srv/backups/\n\n# Test database integrity\nsqlite3 /srv/backups/pastebin-*.db \"PRAGMA integrity_check;\"\n\n# Verify git repositories\ncd /srv &amp;&amp; git status\ncd /srv/pai &amp;&amp; git status\n</code></pre>"},{"location":"operations/backup-recovery/#monthly-tests","title":"Monthly Tests","text":"<ul> <li>Restore database to test environment</li> <li>Verify service starts with restored data</li> <li>Document any issues found</li> </ul>"},{"location":"operations/backup-recovery/#important-files","title":"Important Files","text":""},{"location":"operations/backup-recovery/#critical-paths","title":"Critical Paths","text":"<pre><code>/srv/.env                    # Main environment variables\n/var/www/.env               # Web environment variables\n/srv/tokens/                # OAuth tokens\n/etc/nginx/sites-available/ # Nginx configs\n/srv/pai/data/             # PAI databases\n/srv/apps/pastebin/        # Pastebin data\n</code></pre>"},{"location":"operations/backup-recovery/#backup-locations","title":"Backup Locations","text":"<pre><code>/srv/backups/              # Local backups\nGitHub repositories        # Code backups\nExternal storage          # Monthly archives\n</code></pre>"},{"location":"operations/backup-recovery/#recovery-checklist","title":"Recovery Checklist","text":"<ul> <li> Identify scope of failure</li> <li> Stop affected services</li> <li> Restore from appropriate backup</li> <li> Verify data integrity</li> <li> Restart services</li> <li> Test functionality</li> <li> Document incident</li> </ul>"},{"location":"operations/backup-recovery/#related-documentation","title":"Related Documentation","text":"<ul> <li>Daily Maintenance</li> <li>Emergency Procedures</li> <li>System Health Check</li> </ul> <p>Important</p> <p>Always test backups regularly. An untested backup is not a backup!</p>"},{"location":"operations/claude-sessions/","title":"Claude CLI Session Management","text":"<p>Purpose: Manage Claude CLI sessions effectively to prevent context issues and optimize performance.</p>"},{"location":"operations/claude-sessions/#understanding-claude-sessions","title":"Understanding Claude Sessions","text":"<p>Claude CLI maintains conversation context in sessions. Each session accumulates context until cleared or reset.</p>"},{"location":"operations/claude-sessions/#key-concepts","title":"Key Concepts","text":"<ul> <li>Session ID: Unique identifier for each conversation</li> <li>Context Window: Limited size (~200k tokens)</li> <li>Context Accumulation: Each interaction adds to context</li> <li>Stateless Mode: No session persistence (recommended for cron)</li> </ul>"},{"location":"operations/claude-sessions/#common-session-commands","title":"Common Session Commands","text":"<pre><code># List all sessions\nclaude list\n\n# View specific session\nclaude view SESSION_ID\n\n# Create new session\nclaude new\n\n# Kill session\nclaude kill SESSION_ID\n\n# Kill all sessions\nclaude kill --all\n</code></pre>"},{"location":"operations/claude-sessions/#best-practices","title":"Best Practices","text":""},{"location":"operations/claude-sessions/#1-for-cron-jobs-use-stateless-mode","title":"1. For Cron Jobs - Use Stateless Mode","text":"<pre><code># Good - No context accumulation\necho \"$PROMPT\" | claude -p\n\n# Bad - Accumulates context\necho \"$PROMPT\" | claude -p -c\n\n# Bad - Uses persistent session\necho \"$PROMPT\" | claude -r SESSION_ID\n</code></pre>"},{"location":"operations/claude-sessions/#2-for-interactive-work-use-sessions","title":"2. For Interactive Work - Use Sessions","text":"<pre><code># Create dedicated session\nclaude new --name \"pai-monitoring\"\n\n# Resume session\nclaude -r SESSION_ID\n\n# Or use the default\nclaude\n</code></pre>"},{"location":"operations/claude-sessions/#3-for-long-running-monitors","title":"3. For Long-Running Monitors","text":"<p>Create separate sessions for different purposes: <pre><code># Email monitoring session\nMONITORING_SESSION=$(claude new --name \"monitoring\" -j | jq -r .id)\n\n# Development session  \nDEV_SESSION=$(claude new --name \"development\" -j | jq -r .id)\n</code></pre></p>"},{"location":"operations/claude-sessions/#troubleshooting-session-issues","title":"Troubleshooting Session Issues","text":""},{"location":"operations/claude-sessions/#prompt-too-long-error","title":"\"Prompt too long\" Error","text":"<p>Cause: Context window exceeded.</p> <p>Fix: <pre><code># For cron scripts - remove -c flag\nsed -i 's/claude -p -c/claude -p/g' /path/to/script.sh\n\n# For interactive - start fresh session\nclaude new\n</code></pre></p>"},{"location":"operations/claude-sessions/#session-not-found-error","title":"\"Session not found\" Error","text":"<p>Cause: Session was killed or expired.</p> <p>Fix: <pre><code># Check if session exists\nclaude list | grep SESSION_ID\n\n# Create new if needed\nNEW_SESSION=$(claude new -j | jq -r .id)\necho \"New session: $NEW_SESSION\"\n</code></pre></p>"},{"location":"operations/claude-sessions/#sessions-growing-too-large","title":"Sessions Growing Too Large","text":"<p>Monitor session sizes: <pre><code># Check all session sizes (approximate)\nfor session in $(claude list -j | jq -r '.[].id'); do\n  echo \"Session $session:\"\n  claude view $session | wc -c\ndone\n</code></pre></p> <p>Clean up large sessions: <pre><code># Kill sessions over 100KB\nfor session in $(claude list -j | jq -r '.[].id'); do\n  size=$(claude view $session | wc -c)\n  if [ $size -gt 100000 ]; then\n    echo \"Killing large session $session (${size} bytes)\"\n    claude kill $session\n  fi\ndone\n</code></pre></p>"},{"location":"operations/claude-sessions/#session-management-for-paidai","title":"Session Management for PAI/DAI","text":""},{"location":"operations/claude-sessions/#current-session-architecture","title":"Current Session Architecture","text":"<ol> <li>Main Development - Interactive DAI session (this one)</li> <li>Monitoring - Used by monitoring scripts (should be stateless)</li> <li>Slack Integration - Handles Slack routing (should be stateless)</li> </ol>"},{"location":"operations/claude-sessions/#recommended-changes","title":"Recommended Changes","text":"<pre><code># Update monitoring scripts to be stateless\n# In /srv/pai/monitoring/email_monitor.py:\n# Change: claude -p -c\n# To: claude -p\n\n# In /srv/pai/intelligence_stack/processors/heartbeat_intelligent.sh:\n# Already fixed - uses claude -p without -c\n</code></pre>"},{"location":"operations/claude-sessions/#session-monitoring-script","title":"Session Monitoring Script","text":"<p>Create <code>/srv/pai/monitoring/check_claude_sessions.sh</code>: <pre><code>#!/bin/bash\n# Check Claude session health\n\necho \"=== Claude Session Status ===\"\necho \"Active sessions:\"\nclaude list\n\necho -e \"\\n=== Session Sizes ===\"\nfor session in $(claude list -j | jq -r '.[].id'); do\n  size=$(claude view $session 2&gt;/dev/null | wc -c)\n  echo \"Session $session: $size bytes\"\ndone\n\necho -e \"\\n=== Recommendations ===\"\n# Check for oversized sessions\nfor session in $(claude list -j | jq -r '.[].id'); do\n  size=$(claude view $session 2&gt;/dev/null | wc -c)\n  if [ $size -gt 100000 ]; then\n    echo \"\u26a0\ufe0f  Session $session is large ($size bytes) - consider killing\"\n  fi\ndone\n\n# Check for monitoring using sessions\nif grep -q \"claude.*-c\" /srv/pai/monitoring/*.py 2&gt;/dev/null; then\n  echo \"\u26a0\ufe0f  Found monitoring scripts using -c flag (context accumulation)\"\nfi\n</code></pre></p>"},{"location":"operations/claude-sessions/#prevention-strategies","title":"Prevention Strategies","text":""},{"location":"operations/claude-sessions/#1-use-aliases-for-common-operations","title":"1. Use Aliases for Common Operations","text":"<p>Add to <code>.bashrc</code>: <pre><code>alias claude-monitoring='claude -p'  # Stateless for scripts\nalias claude-dev='claude'            # Interactive with context\n</code></pre></p>"},{"location":"operations/claude-sessions/#2-regular-cleanup-cron","title":"2. Regular Cleanup Cron","text":"<p>Add to crontab: <pre><code># Weekly Claude session cleanup (Sundays at 3 AM)\n0 3 * * 0 /srv/pai/monitoring/cleanup_claude_sessions.sh\n</code></pre></p>"},{"location":"operations/claude-sessions/#3-monitor-in-heartbeat","title":"3. Monitor in Heartbeat","text":"<p>Add Claude session checks to heartbeat monitoring: - Check number of active sessions - Alert if any session &gt; 100KB - Alert if monitoring using -c flag</p>"},{"location":"operations/claude-sessions/#quick-reference","title":"Quick Reference","text":"Use Case Command Why Cron jobs <code>claude -p</code> No context accumulation Monitoring <code>claude -p</code> Stateless, won't overflow Development <code>claude</code> or <code>claude -r ID</code> Maintains helpful context One-off tasks <code>claude -p</code> Clean, no side effects"},{"location":"operations/claude-sessions/#related-documentation","title":"Related Documentation","text":"<ul> <li><code>common-issues.md</code> - See \"Claude CLI Issues\" section</li> <li><code>monitoring-alerts.md</code> - Claude-based alert routing</li> <li>PAI system uses Claude SDK at specific model: <code>claude-3-5-sonnet-20241022</code></li> </ul>"},{"location":"operations/daily-maintenance/","title":"Daily Maintenance","text":"<p>Daily maintenance procedures to keep the DAI/PAI ecosystem running smoothly.</p>"},{"location":"operations/daily-maintenance/#morning-checklist","title":"Morning Checklist","text":""},{"location":"operations/daily-maintenance/#1-system-health-check","title":"1. System Health Check","text":"<p>Run the comprehensive health check: <pre><code># Check all services\nsudo systemctl status kaut-pastebin pai-web kaut-auth kaut-api\n\n# Check disk space\ndf -h /srv\n\n# Check system resources\nhtop\n</code></pre></p>"},{"location":"operations/daily-maintenance/#2-service-verification","title":"2. Service Verification","text":"<p>Verify each service is responding: <pre><code># Test PAI Dashboard\ncurl -I https://kaut.to/ai/ --user joni:Penacova\n\n# Test Task API\ncurl https://kaut.to/api/health\n\n# Test Pastebin\ncurl -I https://pb.kaut.to --user kaut:to\n</code></pre></p>"},{"location":"operations/daily-maintenance/#3-log-review","title":"3. Log Review","text":"<p>Check for errors or warnings: <pre><code># Check PAI logs\nsudo journalctl -u pai-web --since \"24 hours ago\" | grep -E \"ERROR|WARNING\"\n\n# Check API logs\nsudo journalctl -u kaut-api --since \"24 hours ago\" | grep -E \"ERROR|WARNING\"\n\n# Check nginx logs\nsudo tail -100 /var/log/nginx/error.log\n</code></pre></p>"},{"location":"operations/daily-maintenance/#4-authentication-status","title":"4. Authentication Status","text":"<p>Verify OAuth tokens: <pre><code># Check Google OAuth\npython3 /srv/jtools/gtask/gtask.py list\n\n# Check Slack bot status\npython3 /srv/pai/monitors/slack_health_check.py\n</code></pre></p>"},{"location":"operations/daily-maintenance/#weekly-tasks","title":"Weekly Tasks","text":""},{"location":"operations/daily-maintenance/#monday-backup-check","title":"Monday - Backup Check","text":"<ul> <li>Verify backup scripts are running</li> <li>Check backup integrity</li> <li>Review backup storage space</li> </ul>"},{"location":"operations/daily-maintenance/#wednesday-security-review","title":"Wednesday - Security Review","text":"<ul> <li>Review authentication logs</li> <li>Check for unusual access patterns</li> <li>Update passwords if needed</li> </ul>"},{"location":"operations/daily-maintenance/#friday-performance-review","title":"Friday - Performance Review","text":"<ul> <li>Analyze service response times</li> <li>Check token usage metrics</li> <li>Review system resource trends</li> </ul>"},{"location":"operations/daily-maintenance/#monthly-tasks","title":"Monthly Tasks","text":""},{"location":"operations/daily-maintenance/#first-monday","title":"First Monday","text":"<ul> <li>Full system backup</li> <li>Archive old logs</li> <li>Clean temporary files</li> </ul>"},{"location":"operations/daily-maintenance/#third-monday","title":"Third Monday","text":"<ul> <li>Review and update documentation</li> <li>Check for system updates</li> <li>Review SSL certificate expiration</li> </ul>"},{"location":"operations/daily-maintenance/#quick-recovery-procedures","title":"Quick Recovery Procedures","text":""},{"location":"operations/daily-maintenance/#service-down","title":"Service Down","text":"<pre><code># Restart specific service\nsudo systemctl restart [service-name]\n\n# Check service logs\nsudo journalctl -u [service-name] -f\n</code></pre>"},{"location":"operations/daily-maintenance/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Refresh Google OAuth\ncd /srv/jtools &amp;&amp; python3 gtask/gtask.py auth\n\n# Fix Slack token\nexport SLACK_BOT_TOKEN=$(cat /srv/tokens/slack_bot_token.txt)\n</code></pre>"},{"location":"operations/daily-maintenance/#disk-space-issues","title":"Disk Space Issues","text":"<pre><code># Clean old logs\nfind /srv/pai/logs -name \"*.log\" -mtime +7 -delete\n\n# Clean pip cache\npip cache purge\n\n# Remove old Docker images\ndocker image prune -a\n</code></pre>"},{"location":"operations/daily-maintenance/#monitoring-commands","title":"Monitoring Commands","text":""},{"location":"operations/daily-maintenance/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Watch service status\nwatch -n 5 'systemctl status pai-web kaut-api'\n\n# Monitor logs\ntail -f /srv/pai/logs/app.log\n\n# Track resource usage\nhtop\n</code></pre>"},{"location":"operations/daily-maintenance/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Check response times\ntime curl https://kaut.to/api/health\n\n# Monitor network connections\nss -tulpn | grep LISTEN\n\n# Check process memory\nps aux | grep python | sort -k 6 -n -r | head\n</code></pre>"},{"location":"operations/daily-maintenance/#emergency-contacts","title":"Emergency Contacts","text":"<ul> <li>Primary: Check HANDOVER.md for current on-call</li> <li>Escalation: See emergency procedures</li> <li>Documentation: https://docs.kaut.to</li> </ul>"},{"location":"operations/daily-maintenance/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Health Check Details</li> <li>Troubleshooting Guide</li> <li>Emergency Procedures</li> <li>Token Optimization</li> </ul> <p>Pro Tip</p> <p>Set up these checks as aliases in your <code>.bashrc</code> for quick access: <pre><code>alias health='sudo systemctl status kaut-pastebin pai-web kaut-auth kaut-api'\nalias logs='sudo journalctl -u pai-web -f --since \"1 hour ago\"'\n</code></pre></p>"},{"location":"operations/emergency-procedures/","title":"Emergency Procedures","text":"<p>Quick reference for handling critical system failures and emergencies.</p>"},{"location":"operations/emergency-procedures/#emergency-response-framework","title":"Emergency Response Framework","text":""},{"location":"operations/emergency-procedures/#severity-levels","title":"Severity Levels","text":"Level Description Response Time Examples P1 Critical - System Down &lt; 15 min All services offline, data loss risk P2 Major - Degraded Service &lt; 1 hour Single service down, auth failures P3 Minor - Limited Impact &lt; 4 hours Slow response, minor errors P4 Low - Cosmetic Issues Next day UI glitches, non-critical warnings"},{"location":"operations/emergency-procedures/#p1-critical-emergencies","title":"P1: Critical Emergencies","text":""},{"location":"operations/emergency-procedures/#total-system-failure","title":"Total System Failure","text":"<pre><code># 1. Check server accessibility\nping kaut.to\n\n# 2. SSH to server\nssh kaut\n\n# 3. Check all services\nsudo systemctl status --all | grep kaut\n\n# 4. Emergency restart\nsudo systemctl restart nginx\nsudo systemctl restart pai-web kaut-api kaut-pastebin kaut-auth\n</code></pre>"},{"location":"operations/emergency-procedures/#data-loss-prevention","title":"Data Loss Prevention","text":"<pre><code># STOP all write operations immediately\nsudo systemctl stop pai-web kaut-api\n\n# Create emergency backup\nsudo cp -r /srv /emergency-backup-$(date +%Y%m%d-%H%M%S)\n\n# Check filesystem\ndf -h\nsudo dmesg | tail -50\n</code></pre>"},{"location":"operations/emergency-procedures/#p2-service-failures","title":"P2: Service Failures","text":""},{"location":"operations/emergency-procedures/#pai-dashboard-down","title":"PAI Dashboard Down","text":"<pre><code># Quick recovery\nsudo systemctl restart pai-web\n\n# If persists, check logs\nsudo journalctl -u pai-web -n 100\n\n# Manual start for debugging\ncd /srv/pai &amp;&amp; python3 app.py\n</code></pre>"},{"location":"operations/emergency-procedures/#authentication-failures","title":"Authentication Failures","text":"<pre><code># Check nginx auth\nsudo nginx -t\nsudo tail -f /var/log/nginx/error.log\n\n# Verify htpasswd file\nls -la /etc/nginx/auth/.htpasswd\n\n# Test authentication\ncurl -I https://kaut.to --user joni:Penacova\n</code></pre>"},{"location":"operations/emergency-procedures/#api-service-issues","title":"API Service Issues","text":"<pre><code># Restart API service\nsudo systemctl restart kaut-api\n\n# Check port binding\nsudo lsof -i :8002\n\n# Test API endpoint\ncurl http://localhost:8002/health\n</code></pre>"},{"location":"operations/emergency-procedures/#p3-performance-issues","title":"P3: Performance Issues","text":""},{"location":"operations/emergency-procedures/#high-cpu-usage","title":"High CPU Usage","text":"<pre><code># Identify culprit\nhtop\nps aux | sort -k 3 -n -r | head\n\n# Kill runaway process\nkill -9 [PID]\n\n# Check for loops in logs\ntail -f /srv/pai/logs/app.log\n</code></pre>"},{"location":"operations/emergency-procedures/#memory-exhaustion","title":"Memory Exhaustion","text":"<pre><code># Check memory usage\nfree -h\nps aux | sort -k 4 -n -r | head\n\n# Clear caches\nsync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches\n\n# Restart memory-heavy services\nsudo systemctl restart pai-web\n</code></pre>"},{"location":"operations/emergency-procedures/#disk-space-critical","title":"Disk Space Critical","text":"<pre><code># Find large files\ndu -h /srv | sort -h | tail -20\n\n# Clean logs\nfind /srv -name \"*.log\" -mtime +7 -delete\n\n# Clean pip cache\npip cache purge\n</code></pre>"},{"location":"operations/emergency-procedures/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"operations/emergency-procedures/#quick-service-recovery","title":"Quick Service Recovery","text":"<ol> <li>Identify - Which service is down?</li> <li>Isolate - Stop dependent services</li> <li>Restart - Use systemctl restart</li> <li>Verify - Check service status</li> <li>Test - Confirm functionality</li> </ol>"},{"location":"operations/emergency-procedures/#roll-back-changes","title":"Roll Back Changes","text":"<pre><code># If recent change caused issues\ncd /srv/apps &amp;&amp; git log --oneline -10\ngit revert HEAD\n\n# Rebuild if needed\ncd /srv/apps/docs &amp;&amp; mkdocs build\n</code></pre>"},{"location":"operations/emergency-procedures/#emergency-contacts","title":"Emergency Contacts","text":"<ol> <li>Check <code>/srv/HANDOVER.md</code> for current status</li> <li>Review recent commits for changes</li> <li>Check monitoring alerts</li> </ol>"},{"location":"operations/emergency-procedures/#common-error-patterns","title":"Common Error Patterns","text":""},{"location":"operations/emergency-procedures/#502-bad-gateway","title":"\"502 Bad Gateway\"","text":"<pre><code># Usually means backend service is down\nsudo systemctl status pai-web kaut-api\nsudo systemctl restart pai-web kaut-api\n</code></pre>"},{"location":"operations/emergency-procedures/#connection-refused","title":"\"Connection Refused\"","text":"<pre><code># Service not listening on port\nsudo lsof -i :8001 :8002 :8080 :8090 :8091\n# Restart affected service\n</code></pre>"},{"location":"operations/emergency-procedures/#permission-denied","title":"\"Permission Denied\"","text":"<pre><code># Fix file permissions\nsudo chown -R joni:joni /srv\nsudo chmod -R 755 /srv/apps\n</code></pre>"},{"location":"operations/emergency-procedures/#post-incident","title":"Post-Incident","text":""},{"location":"operations/emergency-procedures/#documentation","title":"Documentation","text":"<ol> <li>Create incident report in <code>/srv/docs/incidents/</code></li> <li>Update this guide with new procedures</li> <li>Add to monitoring if applicable</li> </ol>"},{"location":"operations/emergency-procedures/#prevention","title":"Prevention","text":"<ol> <li>Identify root cause</li> <li>Implement monitoring</li> <li>Create automated recovery</li> <li>Update documentation</li> </ol>"},{"location":"operations/emergency-procedures/#emergency-command-reference","title":"Emergency Command Reference","text":"<pre><code># Service management\nsudo systemctl status --all | grep -E \"pai|kaut\"\nsudo systemctl restart pai-web kaut-api kaut-pastebin kaut-auth\n\n# Log analysis\nsudo journalctl --since \"1 hour ago\" | grep ERROR\ntail -f /var/log/nginx/error.log\n\n# Resource monitoring\nhtop\ndf -h\nfree -h\n\n# Network checks\nss -tulpn | grep LISTEN\nping -c 3 kaut.to\n\n# Quick backup\ntar -czf emergency-backup-$(date +%Y%m%d).tar.gz /srv\n</code></pre>"},{"location":"operations/emergency-procedures/#related-documentation","title":"Related Documentation","text":"<ul> <li>Daily Maintenance</li> <li>Troubleshooting Guide</li> <li>Backup &amp; Recovery</li> <li>System Monitoring</li> </ul> <p>Remember</p> <p>In an emergency, prioritize: 1. Data preservation - Don't lose user data 2. Service restoration - Get back online 3. Root cause analysis - Prevent recurrence</p>"},{"location":"operations/monitoring/","title":"System Health Check Runbook","text":"<p>Purpose: Daily verification that all PAI/DAI components are functioning correctly.</p> <p>Frequency: Daily at start of workday, or when issues are suspected.</p>"},{"location":"operations/monitoring/#prerequisites","title":"Prerequisites","text":"<ul> <li>SSH access to server</li> <li>Understanding of PAI architecture</li> <li>Access to Slack channels (#pai, #pai-verbose)</li> </ul>"},{"location":"operations/monitoring/#steps","title":"Steps","text":""},{"location":"operations/monitoring/#1-run-automated-health-check","title":"1. Run Automated Health Check","text":"<pre><code>python3 /srv/pai/monitoring/update_system_status.py\n</code></pre> <p>Expected output: Overall health &gt; 80%</p>"},{"location":"operations/monitoring/#2-verify-critical-processes","title":"2. Verify Critical Processes","text":""},{"location":"operations/monitoring/#check-slack-bot","title":"Check Slack Bot","text":"<pre><code># Check if running\nps aux | grep slack.py | grep -v grep\n\n# If not running, check PID file\ncat /srv/pai/slack_v2.pid\nps -p $(cat /srv/pai/slack_v2.pid)\n\n# View recent logs\ntail -50 /srv/pai/logs/slack_bot.log\n</code></pre>"},{"location":"operations/monitoring/#check-claude-sessions","title":"Check Claude Sessions","text":"<pre><code># List active Claude sessions\nclaude list\n\n# Check for stuck sessions\nps aux | grep claude | grep -v grep\n</code></pre>"},{"location":"operations/monitoring/#3-verify-cron-jobs","title":"3. Verify Cron Jobs","text":"<pre><code># List user crons\ncrontab -l | grep -E \"(morning_brief|email_monitor|heartbeat)\"\n\n# Check recent cron execution\ngrep \"$(date '+%Y-%m-%d')\" /srv/pai/intelligence_stack/logs/cron.log\n</code></pre> <p>Expected crons: - Morning Brief: 6 AM daily - Email Monitor: Every 10-60 min (based on time) - Heartbeat: Every 30 min</p>"},{"location":"operations/monitoring/#4-check-authentication-status","title":"4. Check Authentication Status","text":""},{"location":"operations/monitoring/#gmail-token","title":"Gmail Token","text":"<p><pre><code>python3 /srv/pai/toolkit/gmail_tool.py auth\n</code></pre> Should show: \"Token expires in X hours\"</p>"},{"location":"operations/monitoring/#calendar-access","title":"Calendar Access","text":"<p><pre><code>python3 /srv/pai/intelligence_stack/collectors/calendar_collector.py --test\n</code></pre> Should return today's events</p>"},{"location":"operations/monitoring/#5-review-logs-for-errors","title":"5. Review Logs for Errors","text":"<pre><code># Check for recent errors\nfor log in /srv/pai/monitoring/logs/*.log /srv/pai/intelligence_stack/logs/*.log; do\n    echo \"=== $log ===\"\n    tail -20 \"$log\" | grep -i error | tail -5\ndone\n</code></pre>"},{"location":"operations/monitoring/#6-verify-disk-space","title":"6. Verify Disk Space","text":"<pre><code>df -h /srv\ndu -sh /srv/pai/logs /srv/pai/monitoring/logs /srv/pai/intelligence_stack/logs\n</code></pre> <p>Warning if: - Disk usage &gt; 80% - Any log directory &gt; 1GB</p>"},{"location":"operations/monitoring/#7-test-slack-integration","title":"7. Test Slack Integration","text":"<p>Send test message: <pre><code>echo \"Health check test at $(date)\" | python3 /srv/pai/toolkit/slack_sender_multichannel.py --channel verbose\n</code></pre></p> <p>Check #pai-verbose for the message.</p>"},{"location":"operations/monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/monitoring/#if-slack-bot-is-down","title":"If Slack Bot is Down","text":"<p>See <code>slack-bot-recovery.md</code></p>"},{"location":"operations/monitoring/#if-tokens-are-expired","title":"If Tokens are Expired","text":"<p>See <code>token-refresh.md</code></p>"},{"location":"operations/monitoring/#if-crons-arent-running","title":"If Crons Aren't Running","text":"<ol> <li>Check cron service: <code>systemctl status cron</code></li> <li>Review cron logs: <code>grep CRON /var/log/syslog | tail -20</code></li> <li>Test individual scripts manually</li> </ol>"},{"location":"operations/monitoring/#if-health-70","title":"If Health &lt; 70%","text":"<ol> <li>Run this health check manually</li> <li>Check <code>incident-response.md</code></li> <li>Alert in #pai channel if critical</li> </ol>"},{"location":"operations/monitoring/#success-criteria","title":"Success Criteria","text":"<ul> <li> Overall health &gt; 80%</li> <li> All critical processes running</li> <li> No authentication errors</li> <li> Disk usage &lt; 80%</li> <li> Recent activity in logs</li> <li> Slack test message delivered</li> </ul>"},{"location":"operations/monitoring/#notes","title":"Notes","text":"<ul> <li>Morning Brief runs at 6 AM UTC</li> <li>Email monitoring frequency varies by time of day</li> <li>Heartbeat provides self-healing capabilities</li> <li>Always check #pai-verbose for detailed system activity</li> </ul>"},{"location":"operations/slack-recovery/","title":"Slack Bot Recovery Playbook","text":"<p>Purpose: Restore PAI Slack bot functionality when it crashes or stops responding.</p> <p>Current Implementation: Unified bot at <code>/srv/pai/slack.py</code> (v0.3.1)</p> <p>Symptoms: - Bot not responding in #pai channel - No interactive menu on \"help\" command - Process not running - Event loop errors in logs</p>"},{"location":"operations/slack-recovery/#quick-recovery-try-first","title":"Quick Recovery (Try First)","text":"<pre><code>cd /srv/pai\n./slack.sh --daemon --verbose\n</code></pre> <p>The script automatically kills old processes and starts fresh. Check #pai-verbose for startup message.</p>"},{"location":"operations/slack-recovery/#detailed-recovery-steps","title":"Detailed Recovery Steps","text":""},{"location":"operations/slack-recovery/#1-check-current-status","title":"1. Check Current Status","text":"<pre><code># Check if process exists\nps aux | grep \"python3.*slack.py\" | grep -v grep\n\n# Check PID file\ncat /srv/pai/slack.pid\nps -p $(cat /srv/pai/slack.pid) 2&gt;/dev/null\n\n# Check logs for errors\ntail -50 /srv/pai/logs/slack.log\n</code></pre>"},{"location":"operations/slack-recovery/#2-use-the-smart-startup-script","title":"2. Use the Smart Startup Script","text":"<p>The <code>slack.sh</code> script handles all cleanup automatically:</p> <pre><code>cd /srv/pai\n./slack.sh --daemon --verbose\n</code></pre> <p>What it does: - Kills existing <code>slack.py</code> processes - Kills old <code>slack_v2*</code> processes - Cleans up PID file - Starts fresh instance - Verifies single instance running</p>"},{"location":"operations/slack-recovery/#3-manual-process-cleanup-if-needed","title":"3. Manual Process Cleanup (if needed)","text":"<pre><code># Kill all Slack-related processes\npkill -f \"python.*slack\"\n\n# Remove PID file\nrm -f /srv/pai/slack.pid\n\n# Kill specific PID\nkill $(cat /srv/pai/slack.pid) 2&gt;/dev/null\n</code></pre>"},{"location":"operations/slack-recovery/#4-start-fresh-instance","title":"4. Start Fresh Instance","text":"<pre><code>cd /srv/pai\n\n# Recommended: Use wrapper script\n./slack.sh --daemon --verbose\n\n# Alternative: Direct start\nnohup python3 slack.py --verbose &gt; logs/slack.log 2&gt;&amp;1 &amp;\necho $! &gt; slack.pid\n</code></pre>"},{"location":"operations/slack-recovery/#5-verify-operation","title":"5. Verify Operation","text":"<pre><code># Check process running\nps -p $(cat /srv/pai/slack.pid)\n\n# Monitor startup logs\ntail -f /srv/pai/logs/slack.log\n\n# Test in Slack\n# Type \"help\" or \"menu\" in #pai channel\n# Should see interactive button menu\n\n# Check verbose logging\n# Look for messages in #pai-verbose channel\n</code></pre>"},{"location":"operations/slack-recovery/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"operations/slack-recovery/#event-loop-is-closed-error","title":"\"Event loop is closed\" Error","text":"<p>This happens when the async event loop crashes.</p> <p>Solution: 1. Kill all python processes related to slack 2. Clear any stale async locks: <code>rm -f /tmp/slack_*.lock</code> 3. Restart with fresh process</p>"},{"location":"operations/slack-recovery/#bad-file-descriptor-error","title":"\"Bad file descriptor\" Error","text":"<p>Network connection was lost.</p> <p>Solution: 1. Check network connectivity: <code>ping api.slack.com</code> 2. Restart the bot 3. Check Slack webhook is valid</p>"},{"location":"operations/slack-recovery/#bot-starts-but-no-messages","title":"Bot Starts But No Messages","text":"<p>Could be webhook or authentication issue.</p> <p>Solution: 1. Test webhook directly: <pre><code>curl -X POST -H 'Content-type: application/json' \\\n  --data '{\"text\":\"Webhook test\"}' \\\n  $(grep SLACK_WEBHOOK_VERBOSE /srv/.env | cut -d'=' -f2)\n</code></pre> 2. Check webhook URLs in <code>/srv/.env</code> 3. Verify Slack user ID in bot configuration</p>"},{"location":"operations/slack-recovery/#multiple-bot-instances","title":"Multiple Bot Instances","text":"<p>Sometimes multiple instances can run simultaneously.</p> <p>Solution: <pre><code># Kill ALL slack-related Python processes\npkill -9 -f \"python.*slack\"\n\n# Clear PID file\nrm -f /srv/pai/slack_v2.pid\n\n# Start fresh\ncd /srv/pai &amp;&amp; ./start_slack_bot.sh\n</code></pre></p>"},{"location":"operations/slack-recovery/#prevention","title":"Prevention","text":""},{"location":"operations/slack-recovery/#add-to-monitoring","title":"Add to Monitoring","text":"<p>Ensure heartbeat checks for Slack bot: <pre><code># Add to heartbeat monitoring\ngrep -q \"slack_bot\" /srv/pai/intelligence_stack/collectors/heartbeat_collector.py\n</code></pre></p>"},{"location":"operations/slack-recovery/#regular-health-checks","title":"Regular Health Checks","text":"<p>Check bot health during daily system check: <pre><code>ps -p $(cat /srv/pai/slack_v2.pid) &gt;/dev/null &amp;&amp; echo \"\u2713 Bot running\" || echo \"\u2717 Bot down\"\n</code></pre></p>"},{"location":"operations/slack-recovery/#log-rotation","title":"Log Rotation","text":"<p>Prevent log files from growing too large: <pre><code># Check log size\nls -lh /srv/pai/logs/slack_bot.log\n\n# Rotate if &gt; 100MB\nif [ $(stat -c%s /srv/pai/logs/slack_bot.log) -gt 104857600 ]; then\n    mv /srv/pai/logs/slack_bot.log /srv/pai/logs/slack_bot.log.old\n    touch /srv/pai/logs/slack_bot.log\nfi\n</code></pre></p>"},{"location":"operations/slack-recovery/#escalation","title":"Escalation","text":"<p>If bot repeatedly fails: 1. Check for recent code changes in git 2. Review full error traceback in logs 3. Test individual components:    - Webhook connectivity    - Python environment    - Async event loop health 4. Consider reverting to last known good version</p>"},{"location":"operations/slack-recovery/#success-criteria","title":"Success Criteria","text":"<ul> <li> Bot process running (check PID)</li> <li> No errors in last 50 log lines</li> <li> Test message appears in #pai-verbose</li> <li> Bot responds to monitoring events</li> </ul>"},{"location":"operations/slack-recovery/#related-documentation","title":"Related Documentation","text":"<ul> <li>PAI Slack Bot - Full bot documentation</li> <li>Claude CLI Advanced - System prompt features</li> <li>Slack Webhooks - Webhook configuration</li> <li>Troubleshooting - General troubleshooting guide</li> </ul>"},{"location":"operations/ssl-troubleshooting/","title":"Troubleshooting: SSL and Subdomain Access","text":"<p>This guide covers the diagnosis and resolution of issues related to SSL certificates and subdomain accessibility.</p>"},{"location":"operations/ssl-troubleshooting/#1-problem-synopsis","title":"1. Problem Synopsis","text":"<ul> <li>Symptom: New subdomains (e.g., <code>pb.kaut.to</code>) are inaccessible from the internet, while the main domain (<code>kaut.to</code>) works correctly.</li> <li>Symptom: Let's Encrypt certificate generation or expansion fails with a timeout error for new subdomains.</li> </ul>"},{"location":"operations/ssl-troubleshooting/#2-root-cause","title":"2. Root Cause","text":"<p>The issue stems from a Split DNS configuration combined with a Proxy/Firewall.</p> <ul> <li>Main Domain (<code>kaut.to</code>): Points to a proxy/tunnel service IP (e.g., <code>157.180.28.186</code>).</li> <li>Subdomains (<code>pb.kaut.to</code>): Were incorrectly pointing directly to the origin server's IP (e.g., <code>172.87.176.11</code>).</li> <li>The Block: The origin server is firewalled and only accepts traffic from the proxy service. Direct connections from the internet are blocked.</li> </ul> <p>This configuration prevents Let's Encrypt from validating the subdomains and blocks all external user traffic.</p>"},{"location":"operations/ssl-troubleshooting/#3-resolution-steps","title":"3. Resolution Steps","text":"<p>The problem was resolved by unifying the DNS and proxy configuration.</p> <ol> <li>Update DNS Records: All subdomain A records were updated to point to the same proxy IP address as the main domain (<code>157.180.28.186</code>).</li> <li>Configure Proxy Service: The proxy service (e.g., Cloudflare, Hetzner Firewall) was configured to recognize and forward traffic for the new subdomains.</li> <li>Expand SSL Certificate: With traffic flowing correctly through the proxy, the Let's Encrypt certificate was successfully expanded to cover all required subdomains.</li> <li>Activate Nginx Configs: The Nginx server blocks for the subdomains were enabled and tested.</li> </ol>"},{"location":"operations/ssl-troubleshooting/#4-key-diagnostic-commands","title":"4. Key Diagnostic Commands","text":"<p>Use these commands to diagnose similar issues:</p> <ul> <li> <p>Check DNS Resolution: <pre><code>dig pb.kaut.to\n</code></pre> (Verify that the IP address matches the main domain's proxy IP).</p> </li> <li> <p>Verify SSL Certificate: <pre><code>openssl s_client -connect pb.kaut.to:443 -servername pb.kaut.to | openssl x509 -noout -text\n</code></pre> (Check the \"Subject Alternative Name\" section to ensure all required domains are listed).</p> </li> <li> <p>Trace Network Path: <pre><code>traceroute pb.kaut.to\n</code></pre> (Identify where connections are being dropped).</p> </li> </ul>"},{"location":"operations/ssl-troubleshooting/#5-lessons-learned-best-practices","title":"5. Lessons Learned &amp; Best Practices","text":"<ul> <li>Verify IPs: Always confirm that main domains and subdomains resolve to the correct IP address, especially when a proxy is involved.</li> <li>Document Proxies: Maintain clear documentation of all proxy, CDN, or tunnel services in use.</li> <li>Prefer Path-Based Routing: When possible, using paths (<code>kaut.to/pb/</code>) instead of subdomains (<code>pb.kaut.to</code>) can simplify network configuration and avoid these issues.</li> <li>Check <code>certbot</code>: Before expanding certificates, run <code>sudo certbot certificates</code> to see what domains are currently covered.</li> </ul>"},{"location":"operations/token-optimization/","title":"Token Optimization Implementation Guide","text":"<p>Date: 2025-07-05</p>"},{"location":"operations/token-optimization/#overview","title":"Overview","text":"<p>This guide documents the token optimization changes made to the PAI/DAI monitoring system, reducing Claude API usage by 66% while maintaining functionality.</p>"},{"location":"operations/token-optimization/#changes-implemented","title":"Changes Implemented","text":""},{"location":"operations/token-optimization/#1-prompt-optimization","title":"1. Prompt Optimization \u2705","text":"<p>Updated prompts to request concise responses for non-critical issues:</p> <p>Files Modified: - <code>/srv/pai/intelligence_stack/processors/heartbeat_intelligent.sh</code> - <code>/srv/pai/monitoring/task_monitor.py</code></p> <p>Key Changes: - Added \"Be concise\" instructions - Limited responses to 1-2 lines for minor issues - Focus on critical issues only</p>"},{"location":"operations/token-optimization/#2-google-tasks-verification","title":"2. Google Tasks Verification \u2705","text":"<p>Status: Working correctly - Service account authentication functional - Using Google Tasks API (not Gist storage) - 1 task list available: \"My Tasks\"</p>"},{"location":"operations/token-optimization/#3-batch-operations-implementation","title":"3. Batch Operations Implementation \u2705","text":"<p>New File: <code>/srv/pai/monitoring/batch_monitor.py</code></p> <p>Combines email and task monitoring into single Claude calls: - Collects both email and task data - Single Claude analysis for both - Smart routing to appropriate Slack channels</p> <p>Benefits: - Reduces API calls from 112 to 37 per day - More context-aware decisions - Simplified monitoring architecture</p>"},{"location":"operations/token-optimization/#4-optimized-cron-schedule","title":"4. Optimized Cron Schedule \u2705","text":"<p>Previous Schedule: 149 Claude calls/day - Email monitoring: 88 runs - Task monitoring: 24 runs - Unified monitoring: 12 runs - Heartbeat: 24 runs - Morning brief: 1 run</p> <p>New Schedule: 50 Claude calls/day - Batch monitor: 37 runs (focused on business hours) - Heartbeat: 12 runs (every 2 hours) - Morning brief: 1 run</p> <p>Business Hours Focus: - 8 AM - 6 PM: Every 20 minutes - 6 PM - 10 PM: Hourly - Overnight: Only at midnight and 6 AM</p>"},{"location":"operations/token-optimization/#implementation-steps","title":"Implementation Steps","text":""},{"location":"operations/token-optimization/#step-1-apply-prompt-updates","title":"Step 1: Apply Prompt Updates","text":"<p>Already completed - prompts now request concise responses.</p>"},{"location":"operations/token-optimization/#step-2-deploy-batch-monitor","title":"Step 2: Deploy Batch Monitor","text":"<pre><code># Already created and made executable\n/srv/pai/monitoring/batch_monitor.py\n</code></pre>"},{"location":"operations/token-optimization/#step-3-update-crontab","title":"Step 3: Update Crontab","text":"<pre><code># Run the update script\n/srv/pai/monitoring/update_crontab.sh\n\n# Or manually apply from:\n/srv/pai/monitoring/crontab_optimized.txt\n</code></pre>"},{"location":"operations/token-optimization/#step-4-fix-gmail-authentication","title":"Step 4: Fix Gmail Authentication","text":"<pre><code># This is still needed to restore email monitoring\npython3 /srv/pai/toolkit/gmail_tool.py auth\n</code></pre>"},{"location":"operations/token-optimization/#token-usage-projections","title":"Token Usage Projections","text":""},{"location":"operations/token-optimization/#before-optimization","title":"Before Optimization","text":"<ul> <li>Daily: 43,000 tokens</li> <li>Monthly: 1.3M tokens</li> <li>Cost: $6.85/month</li> </ul>"},{"location":"operations/token-optimization/#after-optimization","title":"After Optimization","text":"<ul> <li>Daily: ~15,000 tokens (65% reduction)</li> <li>Monthly: 450,000 tokens</li> <li>Cost: ~$2.40/month</li> </ul>"},{"location":"operations/token-optimization/#monitoring-the-changes","title":"Monitoring the Changes","text":""},{"location":"operations/token-optimization/#log-files-to-watch","title":"Log Files to Watch","text":"<pre><code># New batch monitor log\ntail -f /srv/pai/monitoring/logs/batch.log\n\n# Heartbeat (reduced frequency)\ntail -f /srv/pai/monitoring/logs/heartbeat.log\n\n# Check for any issues\ngrep ERROR /srv/pai/monitoring/logs/*.log\n</code></pre>"},{"location":"operations/token-optimization/#success-metrics","title":"Success Metrics","text":"<ul> <li> Token usage reduced by &gt;60%</li> <li> No missed urgent items</li> <li> Slack channels receive appropriate messages</li> <li> Response times remain under 30 seconds</li> </ul>"},{"location":"operations/token-optimization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/token-optimization/#if-batch-monitor-fails","title":"If Batch Monitor Fails","text":"<pre><code># Test directly\npython3 /srv/pai/monitoring/batch_monitor.py\n\n# Check imports\npython3 -c \"from multi_account_email_collector import collect_all_emails\"\npython3 -c \"from tasks_fast import list_tasks_fast\"\n</code></pre>"},{"location":"operations/token-optimization/#if-messages-not-routing-correctly","title":"If Messages Not Routing Correctly","text":"<ol> <li>Check Slack webhook configuration</li> <li>Verify channel mappings in batch_monitor.py</li> <li>Test Slack sender directly</li> </ol>"},{"location":"operations/token-optimization/#rollback-plan","title":"Rollback Plan","text":"<pre><code># Restore original crontab from backup\ncrontab /srv/pai/monitoring/crontab_backup_[timestamp].txt\n</code></pre>"},{"location":"operations/token-optimization/#next-steps","title":"Next Steps","text":"<ol> <li>Critical: Fix Gmail authentication to restore email monitoring</li> <li>Monitor: Watch logs for first 24 hours after implementation</li> <li>Tune: Adjust batch monitor timing based on usage patterns</li> <li>Enhance: Consider adding more intelligence to batch decisions</li> </ol>"},{"location":"operations/token-optimization/#long-term-improvements","title":"Long-term Improvements","text":"<ol> <li>Knowledge Graph: Store patterns to avoid repeated analysis</li> <li>Smart Triggers: Only analyze when data changes significantly</li> <li>Model Selection: Use Claude Haiku for simple routing</li> <li>Caching: Cache routing decisions for similar patterns</li> </ol> <p>The optimization maintains all functionality while significantly reducing costs and API usage.</p>"},{"location":"operations/troubleshooting/","title":"Common Issues and Solutions","text":"<p>This document covers frequently encountered problems in the DAI/PAI system and their solutions.</p>"},{"location":"operations/troubleshooting/#claude-cli-issues","title":"Claude CLI Issues","text":""},{"location":"operations/troubleshooting/#prompt-too-long-error","title":"\"Prompt too long\" Error","text":"<p>Symptom: Scripts fail with \"prompt too long\" error from Claude.</p> <p>Cause: Using <code>-c</code> flag causes context accumulation over multiple runs.</p> <p>Solution: <pre><code># Remove -c flag from Claude invocations\n# Bad:  claude -p -c\n# Good: claude -p\n\n# Fixed in:\n# - /srv/pai/monitoring/email_monitor.py\n# - /srv/pai/intelligence_stack/processors/heartbeat_intelligent.sh\n</code></pre></p>"},{"location":"operations/troubleshooting/#claude-session-not-found","title":"Claude Session Not Found","text":"<p>Symptom: \"Session not found\" errors.</p> <p>Solution: <pre><code># List all sessions\nclaude list\n\n# Create new session if needed\nclaude new\n\n# Use specific session\nclaude -r SESSION_ID\n</code></pre></p>"},{"location":"operations/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"operations/troubleshooting/#gmail-token-expired","title":"Gmail Token Expired","text":"<p>Symptom: Email monitoring fails with authentication errors.</p> <p>Solution: <pre><code># Refresh token\npython3 /srv/pai/toolkit/gmail_tool.py auth\n\n# Follow OAuth flow if completely expired\n# Token saved to: /srv/tokens/gmail_token.json\n</code></pre></p>"},{"location":"operations/troubleshooting/#calendar-access-denied","title":"Calendar Access Denied","text":"<p>Symptom: Calendar collector fails with permission errors.</p> <p>Cause: Service account permissions changed.</p> <p>Solution: 1. Verify service account email: <code>pai-assistant@personal-ai-453416.iam.gserviceaccount.com</code> 2. Re-share calendars with service account 3. Test access: <code>python3 /srv/pai/intelligence_stack/collectors/calendar_collector.py</code></p>"},{"location":"operations/troubleshooting/#slack-integration-issues","title":"Slack Integration Issues","text":""},{"location":"operations/troubleshooting/#messages-not-appearing","title":"Messages Not Appearing","text":"<p>Symptom: System says messages sent but nothing in Slack.</p> <p>Checklist: <pre><code># 1. Test webhook\ncurl -X POST -H 'Content-type: application/json' \\\n  --data '{\"text\":\"Test\"}' \\\n  $(grep SLACK_WEBHOOK_PAI /srv/.env | cut -d'=' -f2)\n\n# 2. Check channel mappings\ngrep SLACK_WEBHOOK /srv/.env\n\n# 3. Verify Slack user ID\ngrep \"@\" /srv/pai/monitoring/email_monitor.py\n# Should be: &lt;@UGQR4AJNS&gt;\n</code></pre></p>"},{"location":"operations/troubleshooting/#wrong-channel-routing","title":"Wrong Channel Routing","text":"<p>Symptom: Messages going to wrong Slack channel.</p> <p>Solution: Review routing logic in: - <code>/srv/pai/monitoring/email_monitor.py</code> - <code>/srv/pai/toolkit/slack_sender_multichannel.py</code></p> <p>Channel mapping: - Urgent + @mention \u2192 #pai - Important \u2192 #pai-notifications - Everything \u2192 #pai-verbose</p>"},{"location":"operations/troubleshooting/#python-import-errors","title":"Python Import Errors","text":""},{"location":"operations/troubleshooting/#module-not-found","title":"Module Not Found","text":"<p>Symptom: <code>ModuleNotFoundError</code> in logs.</p> <p>Common fixes: <pre><code># Missing argparse (fixed in calendar_collector.py)\nimport argparse\n\n# Path issues\nsys.path.insert(0, '/srv/pai/apps')\n\n# Wrong import path\n# Bad:  from utils.google_auth import\n# Good: from pai_toolkit.auth import\n</code></pre></p>"},{"location":"operations/troubleshooting/#cron-job-issues","title":"Cron Job Issues","text":""},{"location":"operations/troubleshooting/#cron-not-running","title":"Cron Not Running","text":"<p>Symptom: Expected tasks not executing.</p> <p>Debug steps: <pre><code># 1. Check cron service\nsystemctl status cron\n\n# 2. Check user crontab\ncrontab -l\n\n# 3. Check cron logs\ngrep CRON /var/log/syslog | tail -20\n\n# 4. Test script manually\n/srv/pai/intelligence_stack/processors/morning_brief.sh\n</code></pre></p>"},{"location":"operations/troubleshooting/#cron-running-but-failing","title":"Cron Running But Failing","text":"<p>Common causes: 1. No PATH in cron environment 2. Relative paths in scripts 3. Missing environment variables</p> <p>Solution: Always use absolute paths and export required vars: <pre><code>#!/bin/bash\nexport PATH=/home/joni/.npm-global/bin:$PATH\ncd /srv/pai/intelligence_stack\n</code></pre></p>"},{"location":"operations/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"operations/troubleshooting/#slow-email-monitoring","title":"Slow Email Monitoring","text":"<p>Symptom: Email checks taking &gt; 30 seconds.</p> <p>Solutions: 1. Check cache: <code>ls -la /tmp/pai_*_cache.json</code> 2. Clear stale cache: <code>rm -f /tmp/pai_*_cache.json</code> 3. Reduce accounts checked if needed</p>"},{"location":"operations/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptom: Python processes using &gt; 500MB RAM.</p> <p>Check: <pre><code>ps aux | grep python | sort -k4 -rn | head -5\n</code></pre></p> <p>Solutions: 1. Restart long-running processes 2. Check for memory leaks in logs 3. Implement process recycling in cron</p>"},{"location":"operations/troubleshooting/#disk-space-issues","title":"Disk Space Issues","text":""},{"location":"operations/troubleshooting/#logs-growing-too-large","title":"Logs Growing Too Large","text":"<p>Symptom: Disk space warnings.</p> <p>Quick fix: <pre><code># Find large logs\nfind /srv/pai -name \"*.log\" -size +100M\n\n# Rotate large logs\ncd /srv/pai/monitoring/logs\nfor log in *.log; do\n  if [ $(stat -c%s \"$log\") -gt 104857600 ]; then\n    mv \"$log\" \"${log}.old\"\n    touch \"$log\"\n  fi\ndone\n</code></pre></p> <p>Long-term: Ensure log rotation is working: <pre><code># Should run nightly\n/srv/pai/intelligence_stack/utils/rotate_logs.sh\n</code></pre></p>"},{"location":"operations/troubleshooting/#quick-diagnostic-commands","title":"Quick Diagnostic Commands","text":"<pre><code># Overall health\npython3 /srv/pai/monitoring/update_system_status.py\n\n# Check all processes\nps aux | grep -E \"(pai|slack|claude)\" | grep -v grep\n\n# Recent errors (last hour)\nfind /srv/pai -name \"*.log\" -mmin -60 -exec grep -l ERROR {} \\;\n\n# Test core functionality\necho \"System test at $(date)\" | \\\n  python3 /srv/pai/toolkit/slack_sender_multichannel.py --channel verbose\n\n# Check disk/memory\ndf -h /srv &amp;&amp; free -h\n</code></pre>"},{"location":"operations/troubleshooting/#when-all-else-fails","title":"When All Else Fails","text":"<ol> <li>Check recent commits: <code>cd /srv &amp;&amp; git log --oneline -10</code></li> <li>Review recent worklogs: <code>ls -la /srv/worklogs/dai_*.md | tail -5</code></li> <li>Look for pattern in errors: <code>grep -r \"ERROR\\|CRITICAL\" /srv/pai/*/logs/*.log | tail -50</code></li> <li>Restart minimal services and add one at a time</li> <li>Post in #pai channel for help</li> </ol>"},{"location":"operations/troubleshooting/#prevention","title":"Prevention","text":"<ol> <li>Monitor regularly: Run health checks daily</li> <li>Update CAG: Document new issues and solutions</li> <li>Test changes: Always test scripts manually before cron</li> <li>Review logs: Check logs weekly for warnings</li> <li>Clean up: Remove old logs, cache files monthly</li> </ol>"},{"location":"specs/active/","title":"Active Specifications","text":"<p>Current technical specifications and implementation plans.</p>"},{"location":"specs/active/#documentation-system","title":"Documentation System","text":"<ul> <li>MkDocs Migration Plan - IMPLEMENTED</li> <li>Documentation Consolidation</li> <li>Documentation Optimization Guide</li> </ul>"},{"location":"specs/active/#applications","title":"Applications","text":"<ul> <li>Kaut Pastebin v1.0 - ACTIVE</li> <li>PAI Web Dashboard - ACTIVE</li> <li>Task v2.0 - IN PROGRESS</li> <li>Browser Testing Toolkit</li> </ul>"},{"location":"specs/active/#infrastructure","title":"Infrastructure","text":"<ul> <li>Apps Repository Structure - ACTIVE</li> <li>Universal Setup Script</li> <li>MCP Server</li> <li>AI Self-Documenting Apps</li> </ul>"},{"location":"specs/active/#jtools-ecosystem","title":"jtools Ecosystem","text":"<ul> <li>jtools API Architecture</li> <li>jtools Repository Reorganization</li> <li>jtools Unified Structure</li> <li>jtools Testing Toolkit v0.1 - IMPLEMENTED</li> </ul>"},{"location":"specs/active/#context-knowledge","title":"Context &amp; Knowledge","text":"<ul> <li>Context Library v0.1 - IMPLEMENTED</li> <li>Context Optimization Research</li> <li>Specialized Agents</li> </ul>"},{"location":"specs/active/#status-key","title":"Status Key","text":"<ul> <li>ACTIVE - Currently deployed and in use</li> <li>IMPLEMENTED - Completed and integrated</li> <li>IN PROGRESS - Under active development</li> <li>PLANNED - Approved but not started</li> <li>DRAFT - Under consideration</li> </ul>"},{"location":"specs/active/#quick-links","title":"Quick Links","text":"<ul> <li>Implementation Guides</li> <li>Archived Specs</li> <li>GitHub Issues</li> </ul> <p>Contributing</p> <p>New specifications should follow the template in <code>/srv/specs/README.md</code></p>"},{"location":"specs/archives/","title":"Specification Archives","text":"<p>Historical specifications preserved for reference.</p>"},{"location":"specs/archives/#archive-organization","title":"Archive Organization","text":"<p>Specifications are archived when: - Implementation is complete and stable - Specification is superseded by newer version - Project is cancelled or indefinitely postponed - Technology becomes obsolete</p>"},{"location":"specs/archives/#2025-archives","title":"2025 Archives","text":""},{"location":"specs/archives/#q1-2025","title":"Q1 2025","text":"<ul> <li>PAI Claude Brain Architecture - Superseded by current PAI architecture</li> <li>PAI Monitoring Architecture - Integrated into operations docs</li> <li>PAI Toolkit MVP - Evolved into current toolkit</li> <li>Personal AI Toolkit v0.1 - Foundation for current implementation</li> </ul>"},{"location":"specs/archives/#completed-implementations","title":"Completed Implementations","text":"<ul> <li>Context Library v0.1 - Successfully implemented</li> <li>MkDocs Migration - Completed and deployed</li> <li>Apps Repository Structure - Implemented as designed</li> </ul>"},{"location":"specs/archives/#2024-archives","title":"2024 Archives","text":""},{"location":"specs/archives/#jtools-evolution","title":"jtools Evolution","text":"<p>Early specifications for jtools that laid groundwork for current system: - Initial toolkit design - API architecture drafts - Repository organization plans</p>"},{"location":"specs/archives/#infrastructure-planning","title":"Infrastructure Planning","text":"<p>Original infrastructure specifications that evolved into current architecture: - Server setup guides - Service deployment plans - Security frameworks</p>"},{"location":"specs/archives/#accessing-archives","title":"Accessing Archives","text":""},{"location":"specs/archives/#file-locations","title":"File Locations","text":"<pre><code>/srv/specs/archive/           # Original archive location\n/srv/apps/docs/docs/specs/archives/  # New archive location\n</code></pre>"},{"location":"specs/archives/#searching-archives","title":"Searching Archives","text":"<pre><code># Search for specific topic\ngrep -r \"topic\" /srv/specs/archive/\n\n# List all archived specs\nfind /srv/specs/archive -name \"*.md\" -type f\n</code></pre>"},{"location":"specs/archives/#learning-from-archives","title":"Learning from Archives","text":""},{"location":"specs/archives/#why-review-archives","title":"Why Review Archives?","text":"<ol> <li>Historical Context - Understand evolution of systems</li> <li>Design Decisions - Learn why certain choices were made</li> <li>Avoid Repetition - Don't repeat past mistakes</li> <li>Reusable Components - Find code/ideas to repurpose</li> </ol>"},{"location":"specs/archives/#common-patterns-in-archives","title":"Common Patterns in Archives","text":"<ul> <li>Over-engineering in early versions</li> <li>Simplified approaches winning</li> <li>Security added retroactively</li> <li>Documentation improving over time</li> </ul>"},{"location":"specs/archives/#notable-archived-specs","title":"Notable Archived Specs","text":""},{"location":"specs/archives/#xwander-project","title":"XWander Project","text":"<p>Location: <code>/srv/specs/xwander/</code> - Business monitoring integration - Slack customer service bot - SDK integration analysis - Valuable patterns for future business integrations</p>"},{"location":"specs/archives/#early-pai-designs","title":"Early PAI Designs","text":"<ul> <li>Original brain architecture</li> <li>First monitoring approaches</li> <li>Toolkit evolution</li> <li>Lessons learned documented</li> </ul>"},{"location":"specs/archives/#archive-policy","title":"Archive Policy","text":""},{"location":"specs/archives/#what-to-archive","title":"What to Archive","text":"<ul> <li>Completed specifications</li> <li>Cancelled projects (with notes)</li> <li>Superseded versions</li> <li>Historical documentation</li> </ul>"},{"location":"specs/archives/#what-not-to-archive","title":"What NOT to Archive","text":"<ul> <li>Active specifications</li> <li>Reference documentation</li> <li>Implementation guides</li> <li>Current best practices</li> </ul>"},{"location":"specs/archives/#archive-process","title":"Archive Process","text":"<ol> <li>Mark specification as archived</li> <li>Add completion/cancellation notes</li> <li>Move to archive directory</li> <li>Update index</li> <li>Link from new specs if relevant</li> </ol>"},{"location":"specs/archives/#using-archived-content","title":"Using Archived Content","text":""},{"location":"specs/archives/#when-to-reference-archives","title":"When to Reference Archives","text":"<ul> <li>Starting similar project</li> <li>Debugging legacy code</li> <li>Understanding system history</li> <li>Finding reusable components</li> </ul>"},{"location":"specs/archives/#caution-when-using-archives","title":"Caution When Using Archives","text":"<ul> <li>Check dates - may be outdated</li> <li>Verify dependencies still exist</li> <li>Update security practices</li> <li>Modernize code patterns</li> </ul>"},{"location":"specs/archives/#quick-reference","title":"Quick Reference","text":"Year Quarter Notable Archives 2025 Q1 PAI Brain, Monitoring, Toolkit MVP 2024 Q4 Infrastructure plans, jtools v0.1 2024 Q3 Initial system designs <p>Important</p> <p>Archived specifications may contain outdated practices or deprecated dependencies. Always review and update before reusing.</p>"},{"location":"specs/documentation-consolidation/","title":"Documentation Consolidation v0.1 Plan","text":"<p>Version: 0.1 Date: 2025-07-17 Author: DAI</p>"},{"location":"specs/documentation-consolidation/#executive-summary","title":"Executive Summary","text":"<p>Based on analysis of the current documentation structure (253+ files across multiple directories) and research on documentation systems, I recommend adopting MkDocs with Material theme as the core documentation platform, enhanced with AI-friendly features and maintaining the existing CAG system for AI context management.</p>"},{"location":"specs/documentation-consolidation/#current-state-analysis","title":"Current State Analysis","text":""},{"location":"specs/documentation-consolidation/#what-we-have","title":"What We Have","text":"<ul> <li>253+ documentation files across /srv/docs, /srv/specs, /srv/context, /srv/CAG</li> <li>Well-organized by purpose (specs, guides, operations, context)</li> <li>Multiple index files but no unified search</li> <li>Web-accessible via https://kaut.to/docs</li> <li>AI-optimized CAG system for Claude</li> </ul>"},{"location":"specs/documentation-consolidation/#pain-points","title":"Pain Points","text":"<ol> <li>No unified search across all documentation</li> <li>Some duplication between directories</li> <li>No programmatic way for AI to add/update docs</li> <li>Multiple index files to maintain</li> <li>No versioning or change tracking UI</li> </ol>"},{"location":"specs/documentation-consolidation/#documentation-system-comparison","title":"Documentation System Comparison","text":""},{"location":"specs/documentation-consolidation/#options-evaluated","title":"Options Evaluated","text":"System Pros Cons AI-Friendly Verdict Wiki.js Full-featured, Node.js based Too heavy, requires database Moderate \u274c Too complex MoinMoin Python-based, mature Dated UI, complex setup Poor \u274c Not modern enough Sphinx Powerful, API docs Complex, Python-focused Good \u274c Overkill for our needs MkDocs Simple, fast, markdown Basic features Excellent \u2705 Recommended Docsify No build step, simple No static generation Good \ud83e\udd14 Alternative option"},{"location":"specs/documentation-consolidation/#why-mkdocs","title":"Why MkDocs?","text":"<ol> <li>Simple: Just markdown files + YAML config</li> <li>Fast: Static site generation</li> <li>Git-based: All content version controlled</li> <li>Extensible: Rich plugin ecosystem</li> <li>AI-friendly: Easy to read/write markdown files programmatically</li> <li>Material theme: Modern UI with search, navigation, dark mode</li> </ol>"},{"location":"specs/documentation-consolidation/#ai-friendly-requirements","title":"AI-Friendly Requirements","text":"<p>Based on research, AI agents need:</p> <ol> <li>Programmatic access to read/write files</li> <li>Simple markdown format for content</li> <li>Clear file structure for navigation</li> <li>Metadata support for categorization</li> <li>Search API for finding content</li> <li>Version control integration</li> </ol>"},{"location":"specs/documentation-consolidation/#proposed-architecture","title":"Proposed Architecture","text":"<pre><code>/srv/docs-unified/\n\u251c\u2500\u2500 mkdocs.yml           # MkDocs configuration\n\u251c\u2500\u2500 docs/                # All documentation\n\u2502   \u251c\u2500\u2500 index.md         # Home page\n\u2502   \u251c\u2500\u2500 architecture/    # System architecture\n\u2502   \u251c\u2500\u2500 guides/          # How-to guides\n\u2502   \u251c\u2500\u2500 operations/      # Operational procedures\n\u2502   \u251c\u2500\u2500 specs/           # Technical specifications\n\u2502   \u251c\u2500\u2500 context/         # Context library\n\u2502   \u2514\u2500\u2500 api/             # API documentation\n\u251c\u2500\u2500 custom_theme/        # Material theme customizations\n\u251c\u2500\u2500 plugins/             # Custom MkDocs plugins\n\u2502   \u2514\u2500\u2500 ai_writer.py     # AI documentation helper\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 build.sh         # Build documentation\n    \u251c\u2500\u2500 deploy.sh        # Deploy to kaut.to\n    \u2514\u2500\u2500 ai_update.py     # AI update interface\n</code></pre>"},{"location":"specs/documentation-consolidation/#implementation-plan","title":"Implementation Plan","text":""},{"location":"specs/documentation-consolidation/#phase-1-setup-week-1","title":"Phase 1: Setup (Week 1)","text":"<ol> <li>Install MkDocs + Material theme</li> <li>Create basic mkdocs.yml configuration</li> <li>Set up directory structure</li> <li>Create initial navigation</li> </ol>"},{"location":"specs/documentation-consolidation/#phase-2-migration-week-2","title":"Phase 2: Migration (Week 2)","text":"<ol> <li>Migrate existing markdown files</li> <li>Update internal links</li> <li>Set up redirects from old URLs</li> <li>Test search functionality</li> </ol>"},{"location":"specs/documentation-consolidation/#phase-3-ai-integration-week-3","title":"Phase 3: AI Integration (Week 3)","text":"<ol> <li>Create AI writer plugin for MkDocs</li> <li>Implement llms.txt standard for AI discovery</li> <li>Add metadata to all pages</li> <li>Create AI update scripts</li> </ol>"},{"location":"specs/documentation-consolidation/#phase-4-enhancement-week-4","title":"Phase 4: Enhancement (Week 4)","text":"<ol> <li>Customize Material theme</li> <li>Add advanced search features</li> <li>Implement versioning</li> <li>Set up automated deployment</li> </ol>"},{"location":"specs/documentation-consolidation/#ai-integration-features","title":"AI Integration Features","text":""},{"location":"specs/documentation-consolidation/#1-ai-writer-plugin","title":"1. AI Writer Plugin","text":"<pre><code># plugins/ai_writer.py\nclass AIWriterPlugin:\n    \"\"\"MkDocs plugin for AI agents to write documentation\"\"\"\n\n    def write_page(self, path, content, metadata):\n        \"\"\"Write or update a documentation page\"\"\"\n        # Validate path\n        # Add metadata\n        # Write markdown file\n        # Update navigation\n        # Trigger rebuild\n</code></pre>"},{"location":"specs/documentation-consolidation/#2-llmstxt-implementation","title":"2. llms.txt Implementation","text":"<p>Create <code>/srv/docs-unified/llms.txt</code>: <pre><code># DAI/PAI Documentation System\n\n## API Access\n- Base URL: https://kaut.to/docs/api\n- Format: JSON/Markdown\n- Authentication: Bearer token\n\n## Key Sections\n- /architecture: System design documents\n- /guides: Step-by-step tutorials\n- /operations: Maintenance procedures\n- /context: Current system state\n</code></pre></p>"},{"location":"specs/documentation-consolidation/#3-metadata-standard","title":"3. Metadata Standard","text":"<p>All pages include frontmatter: <pre><code>---\ntitle: Page Title\ncategory: guide|spec|operation|context\ntags: [python, api, security]\nai_editable: true\nlast_updated_by: DAI|PAI|human\n---\n</code></pre></p>"},{"location":"specs/documentation-consolidation/#benefits","title":"Benefits","text":"<ol> <li>Unified Search: Single search box for all documentation</li> <li>Better Navigation: Automatic sidebar generation</li> <li>Version Control: Full Git integration</li> <li>AI-Friendly: Programmatic read/write access</li> <li>Modern UI: Responsive, dark mode, mobile-friendly</li> <li>Static Output: Fast loading, can be cached</li> <li>Easy Maintenance: Just edit markdown files</li> </ol>"},{"location":"specs/documentation-consolidation/#minimal-viable-product-mvp","title":"Minimal Viable Product (MVP)","text":"<p>For v0.1, focus on: 1. Basic MkDocs setup with Material theme 2. Migration of core documentation 3. Simple AI write script 4. Automated deployment to kaut.to</p>"},{"location":"specs/documentation-consolidation/#next-steps","title":"Next Steps","text":"<ol> <li>Approve plan: Review and approve this specification</li> <li>Create test instance: Set up MkDocs in /srv/docs-test</li> <li>Migrate sample docs: Move 10-20 key documents</li> <li>Test AI integration: Verify AI can read/write</li> <li>Plan full migration: Schedule complete transition</li> </ol>"},{"location":"specs/documentation-consolidation/#alternative-lightweight-option","title":"Alternative: Lightweight Option","text":"<p>If MkDocs feels too heavy, consider: - Docsify: No build step, renders markdown on-the-fly - Custom solution: Simple Python script + Jinja2 templates - Enhanced CAG: Extend existing CAG system with web UI</p>"},{"location":"specs/documentation-consolidation/#conclusion","title":"Conclusion","text":"<p>MkDocs with Material theme offers the best balance of simplicity, features, and AI-friendliness. It maintains our markdown-based approach while adding professional documentation features like search, navigation, and theming. The static output integrates well with our existing web infrastructure, and the programmatic access enables AI agents to contribute to documentation.</p>"},{"location":"specs/documentation-optimization/","title":"Documentation Optimization Guide","text":"<p>Version: 1.0 Date: 2025-07-17 Purpose: Guide for optimizing documentation during MkDocs migration</p>"},{"location":"specs/documentation-optimization/#optimization-principles","title":"Optimization Principles","text":""},{"location":"specs/documentation-optimization/#1-clarity-first","title":"1. Clarity First","text":"<ul> <li>Remove redundant information</li> <li>Simplify complex explanations</li> <li>Use consistent terminology</li> </ul>"},{"location":"specs/documentation-optimization/#2-ai-friendly-structure","title":"2. AI-Friendly Structure","text":"<ul> <li>Clear headings hierarchy</li> <li>Structured data where possible</li> <li>Machine-readable metadata</li> </ul>"},{"location":"specs/documentation-optimization/#3-user-focused","title":"3. User-Focused","text":"<ul> <li>Answer \"why\" before \"how\"</li> <li>Provide practical examples</li> <li>Include troubleshooting sections</li> </ul>"},{"location":"specs/documentation-optimization/#document-categories-actions","title":"Document Categories &amp; Actions","text":""},{"location":"specs/documentation-optimization/#keep-current-valuable","title":"\ud83d\udfe2 KEEP - Current &amp; Valuable","text":"<p>Criteria: - Updated within last 6 months - Actively referenced - Core functionality documentation</p> <p>Examples: - <code>/srv/CAG/*.md</code> - Core knowledge base - <code>/srv/docs/guides/authentication-guide.md</code> - <code>/srv/specs/*-v0.1.md</code> (recent specs)</p> <p>Actions: 1. Add frontmatter metadata 2. Update broken links 3. Standardize formatting 4. Add search keywords</p>"},{"location":"specs/documentation-optimization/#merge-related-content","title":"\ud83d\udfe1 MERGE - Related Content","text":"<p>Criteria: - Multiple docs covering same topic - Overlapping information - Can be consolidated</p> <p>Merge Targets: <pre><code>authentication-guide.md + google-oauth-guide.md \u2192 guides/authentication.md\ntroubleshooting-ssl.md + common-issues.md \u2192 operations/troubleshooting.md\nvarious-api-docs.md \u2192 api/reference.md\n</code></pre></p> <p>Actions: 1. Identify best content from each 2. Create unified structure 3. Remove duplication 4. Add cross-references</p>"},{"location":"specs/documentation-optimization/#archive-historical-value","title":"\ud83d\udfe0 ARCHIVE - Historical Value","text":"<p>Criteria: - Outdated but historically important - May be needed for reference - Contains lessons learned</p> <p>Examples: - Old implementation attempts - Deprecated API versions - Historical architecture decisions</p> <p>Actions: 1. Move to <code>docs/archive/</code> directory 2. Add deprecation notice 3. Link to current documentation 4. Keep searchable but de-emphasized</p>"},{"location":"specs/documentation-optimization/#delete-no-value","title":"\ud83d\udd34 DELETE - No Value","text":"<p>Criteria: - Temporary notes - Duplicate content - Broken/incomplete drafts - Test documentation</p> <p>Examples: - <code>test_*.md</code> - <code>backup_*.md</code> - <code>old_*.md</code> - Empty or stub files</p> <p>Actions: 1. Review for any valuable content 2. Delete permanently 3. Update any references</p>"},{"location":"specs/documentation-optimization/#content-optimization-checklist","title":"Content Optimization Checklist","text":""},{"location":"specs/documentation-optimization/#for-each-document","title":"For Each Document:","text":""},{"location":"specs/documentation-optimization/#1-add-frontmatter","title":"1. Add Frontmatter","text":"<pre><code>---\ntitle: Clear, Descriptive Title\ndescription: One-line summary for search\ndate_created: 2025-01-15\ndate_updated: 2025-07-17\ncategory: guide|reference|operation|architecture\ntags: [python, api, security, monitoring]\nstatus: current|archived|deprecated\nai_editable: true\nmaintainer: DAI|PAI|human\n---\n</code></pre>"},{"location":"specs/documentation-optimization/#2-structure-improvements","title":"2. Structure Improvements","text":"<ul> <li> Clear main heading (H1)</li> <li> Logical section hierarchy (H2, H3)</li> <li> Table of contents for long docs</li> <li> Summary/TLDR section at top</li> <li> Prerequisites clearly stated</li> </ul>"},{"location":"specs/documentation-optimization/#3-content-enhancements","title":"3. Content Enhancements","text":"<ul> <li> Add practical examples</li> <li> Include code snippets with syntax highlighting</li> <li> Add diagrams where helpful</li> <li> Include troubleshooting section</li> <li> Add \"See Also\" links</li> </ul>"},{"location":"specs/documentation-optimization/#4-format-standardization","title":"4. Format Standardization","text":"<pre><code># Document Title\n\n!!! abstract \"Summary\"\n    Brief description of what this document covers.\n\n## Prerequisites\n- Required knowledge\n- Required access\n- Required tools\n\n## Overview\nGeneral introduction...\n\n## Step-by-Step Guide (if applicable)\n1. First step\n2. Second step\n   ```bash\n   example command\n   ```\n\n## Configuration\n```yaml\nexample:\n  configuration: here\n</code></pre>"},{"location":"specs/documentation-optimization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"specs/documentation-optimization/#common-issue-1","title":"Common Issue 1","text":"<p>Problem: Description Solution: Steps to fix</p>"},{"location":"specs/documentation-optimization/#see-also","title":"See Also","text":"<ul> <li>Related Document</li> <li>External Resource <pre><code>## Optimization Patterns\n\n### Pattern 1: Guide Consolidation\n**Before:** 5 separate authentication guides  \n**After:** 1 comprehensive authentication guide with sections\n\n### Pattern 2: API Documentation\n**Before:** Scattered endpoint documentation  \n**After:** Unified API reference with examples\n\n### Pattern 3: Troubleshooting\n**Before:** Issues mixed in various docs  \n**After:** Centralized troubleshooting guide\n\n## Quality Metrics\n\n### Good Documentation Has:\n- \u2705 Clear purpose stated upfront\n- \u2705 Practical examples\n- \u2705 Updated within 6 months\n- \u2705 Proper formatting\n- \u2705 Working links\n- \u2705 Search-friendly keywords\n\n### Poor Documentation Has:\n- \u274c Vague or missing purpose\n- \u274c Only theoretical explanation\n- \u274c Last updated &gt; 1 year ago\n- \u274c Inconsistent formatting\n- \u274c Broken links\n- \u274c No keywords or tags\n\n## Migration Priorities\n\n### Priority 1: Core Documentation\n1. CAG files (system knowledge)\n2. Authentication guides\n3. API references\n4. Getting started guides\n\n### Priority 2: Operational Docs\n1. Troubleshooting guides\n2. Maintenance procedures\n3. Monitoring setup\n4. Security documentation\n\n### Priority 3: Development Docs\n1. Architecture decisions\n2. Development guides\n3. Tool documentation\n4. Integration guides\n\n### Priority 4: Context &amp; Archives\n1. Historical decisions\n2. Deprecated features\n3. Old specifications\n4. Meeting notes\n\n## Automation Opportunities\n\n### 1. Link Checker\n```python\n# check_links.py\nimport re\nfrom pathlib import Path\n\ndef check_markdown_links(file_path):\n    \"\"\"Check all links in a markdown file\"\"\"\n    # Find [text](link) patterns\n    # Verify internal links exist\n    # Check external links respond\n</code></pre></li> </ul>"},{"location":"specs/documentation-optimization/#2-metadata-generator","title":"2. Metadata Generator","text":"<pre><code># add_metadata.py\ndef generate_frontmatter(file_path):\n    \"\"\"Generate frontmatter from file content\"\"\"\n    # Extract title from first H1\n    # Generate tags from content\n    # Add timestamps\n</code></pre>"},{"location":"specs/documentation-optimization/#3-content-analyzer","title":"3. Content Analyzer","text":"<pre><code># analyze_content.py\ndef analyze_document_quality(file_path):\n    \"\"\"Score document quality\"\"\"\n    # Check structure\n    # Count examples\n    # Verify formatting\n    # Return quality score\n</code></pre>"},{"location":"specs/documentation-optimization/#review-process","title":"Review Process","text":""},{"location":"specs/documentation-optimization/#before-migration","title":"Before Migration:","text":"<ol> <li>Read document completely</li> <li>Check last update date</li> <li>Verify information accuracy</li> <li>Test any commands/code</li> <li>Update as needed</li> </ol>"},{"location":"specs/documentation-optimization/#during-migration","title":"During Migration:","text":"<ol> <li>Apply optimization checklist</li> <li>Merge related content</li> <li>Fix all broken links</li> <li>Add proper metadata</li> <li>Ensure AI-friendly format</li> </ol>"},{"location":"specs/documentation-optimization/#after-migration","title":"After Migration:","text":"<ol> <li>Test in MkDocs preview</li> <li>Verify search works</li> <li>Check mobile rendering</li> <li>Validate all links</li> <li>Get feedback</li> </ol>"},{"location":"specs/documentation-optimization/#success-metrics","title":"Success Metrics","text":""},{"location":"specs/documentation-optimization/#quantitative","title":"Quantitative:","text":"<ul> <li>\ud83d\udcca Reduce total docs by 30% (through merging)</li> <li>\ud83d\udcca 100% docs have frontmatter</li> <li>\ud83d\udcca 0 broken internal links</li> <li>\ud83d\udcca All docs updated within last year</li> </ul>"},{"location":"specs/documentation-optimization/#qualitative","title":"Qualitative:","text":"<ul> <li>\ud83d\udcc8 Easier to find information</li> <li>\ud83d\udcc8 Consistent formatting</li> <li>\ud83d\udcc8 Better search results</li> <li>\ud83d\udcc8 AI agents can navigate effectively</li> </ul>"},{"location":"specs/documentation-optimization/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<ol> <li>Over-consolidation: Don't merge unrelated topics</li> <li>Under-documentation: Keep essential details</li> <li>Breaking links: Always redirect old URLs</li> <li>Losing history: Archive, don't delete important docs</li> <li>Ignoring users: Consider who reads each doc</li> </ol>"},{"location":"specs/documentation-optimization/#tools-resources","title":"Tools &amp; Resources","text":""},{"location":"specs/documentation-optimization/#markdown-linters","title":"Markdown Linters","text":"<ul> <li>markdownlint</li> <li>mdl</li> <li>remark</li> </ul>"},{"location":"specs/documentation-optimization/#link-checkers","title":"Link Checkers","text":"<ul> <li>markdown-link-check</li> <li>linkchecker</li> </ul>"},{"location":"specs/documentation-optimization/#converters","title":"Converters","text":"<ul> <li>pandoc (for non-markdown sources)</li> <li>html2text (for HTML content)</li> </ul>"},{"location":"specs/documentation-optimization/#final-notes","title":"Final Notes","text":"<p>Remember: The goal is not just to move documentation, but to improve it. Every document should be better after migration than before. If a document can't be improved, consider if it's truly needed.</p>"},{"location":"specs/implementation/","title":"Implementation Guides","text":"<p>Practical guides for implementing specifications.</p>"},{"location":"specs/implementation/#implementation-process","title":"Implementation Process","text":""},{"location":"specs/implementation/#1-planning-phase","title":"1. Planning Phase","text":"<ul> <li>Review specification thoroughly</li> <li>Identify dependencies</li> <li>Create implementation checklist</li> <li>Set up development environment</li> </ul>"},{"location":"specs/implementation/#2-development-phase","title":"2. Development Phase","text":"<ul> <li>Follow specification requirements</li> <li>Write tests first (TDD approach)</li> <li>Document as you build</li> <li>Regular commits with clear messages</li> </ul>"},{"location":"specs/implementation/#3-testing-phase","title":"3. Testing Phase","text":"<ul> <li>Unit tests for components</li> <li>Integration tests for systems</li> <li>User acceptance testing</li> <li>Performance benchmarking</li> </ul>"},{"location":"specs/implementation/#4-deployment-phase","title":"4. Deployment Phase","text":"<ul> <li>Review deployment checklist</li> <li>Update documentation</li> <li>Deploy to production</li> <li>Monitor for issues</li> </ul>"},{"location":"specs/implementation/#current-implementations","title":"Current Implementations","text":""},{"location":"specs/implementation/#recently-completed","title":"Recently Completed","text":""},{"location":"specs/implementation/#mkdocs-documentation-system","title":"MkDocs Documentation System","text":"<ul> <li>Spec: MkDocs Migration Plan</li> <li>Status: \u2705 Deployed</li> <li>URL: https://docs.kaut.to</li> <li>Notes: Successfully migrated from scattered docs</li> </ul>"},{"location":"specs/implementation/#context-library","title":"Context Library","text":"<ul> <li>Spec: Context Library v0.1</li> <li>Status: \u2705 Implemented</li> <li>Location: <code>/srv/apps/docs/docs/context/</code></li> <li>Notes: CAG system fully integrated</li> </ul>"},{"location":"specs/implementation/#in-progress","title":"In Progress","text":""},{"location":"specs/implementation/#task-management-v2","title":"Task Management v2","text":"<ul> <li>Spec: Task v2</li> <li>Status: \ud83d\udea7 60% Complete</li> <li>Target: Q1 2025</li> <li>Next Steps: API integration, UI updates</li> </ul>"},{"location":"specs/implementation/#browser-testing-toolkit","title":"Browser Testing Toolkit","text":"<ul> <li>Spec: Browser Testing Toolkit</li> <li>Status: \ud83d\udea7 40% Complete</li> <li>Target: Q1 2025</li> <li>Next Steps: Playwright integration</li> </ul>"},{"location":"specs/implementation/#implementation-templates","title":"Implementation Templates","text":""},{"location":"specs/implementation/#service-implementation","title":"Service Implementation","text":"<pre><code># Standard service structure\n/srv/apps/{service-name}/\n\u251c\u2500\u2500 app.py              # Main application\n\u251c\u2500\u2500 config.py           # Configuration\n\u251c\u2500\u2500 requirements.txt    # Dependencies\n\u251c\u2500\u2500 README.md          # Documentation\n\u251c\u2500\u2500 tests/             # Test suite\n\u2514\u2500\u2500 {service}.service  # Systemd unit\n</code></pre>"},{"location":"specs/implementation/#api-implementation","title":"API Implementation","text":"<pre><code># FastAPI structure\n/srv/api/{endpoint}/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 router.py          # Route definitions\n\u251c\u2500\u2500 models.py          # Data models\n\u251c\u2500\u2500 services.py        # Business logic\n\u2514\u2500\u2500 tests/            # API tests\n</code></pre>"},{"location":"specs/implementation/#best-practices","title":"Best Practices","text":""},{"location":"specs/implementation/#code-quality","title":"Code Quality","text":"<ul> <li>Follow PEP 8 for Python</li> <li>Use type hints</li> <li>Write comprehensive docstrings</li> <li>Keep functions small and focused</li> </ul>"},{"location":"specs/implementation/#testing","title":"Testing","text":"<ul> <li>Minimum 80% code coverage</li> <li>Test edge cases</li> <li>Mock external dependencies</li> <li>Regular integration tests</li> </ul>"},{"location":"specs/implementation/#documentation","title":"Documentation","text":"<ul> <li>Update specs during implementation</li> <li>Document deviations</li> <li>Keep README files current</li> <li>Add inline code comments</li> </ul>"},{"location":"specs/implementation/#security","title":"Security","text":"<ul> <li>Never hardcode credentials</li> <li>Use environment variables</li> <li>Implement proper authentication</li> <li>Regular security audits</li> </ul>"},{"location":"specs/implementation/#implementation-checklist","title":"Implementation Checklist","text":"<ul> <li> Specification reviewed and understood</li> <li> Dependencies identified and available</li> <li> Development environment set up</li> <li> Tests written (TDD)</li> <li> Code implemented per spec</li> <li> Documentation updated</li> <li> Code reviewed</li> <li> Tests passing</li> <li> Deployed to staging</li> <li> User acceptance complete</li> <li> Deployed to production</li> <li> Monitoring configured</li> <li> Post-deployment verification</li> </ul>"},{"location":"specs/implementation/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"specs/implementation/#avoid-these-mistakes","title":"Avoid These Mistakes","text":"<ol> <li>Skipping tests - Always write tests first</li> <li>Ignoring the spec - Follow requirements closely</li> <li>Poor error handling - Handle all edge cases</li> <li>Missing documentation - Document as you go</li> <li>Hardcoded values - Use configuration files</li> </ol>"},{"location":"specs/implementation/#when-things-go-wrong","title":"When Things Go Wrong","text":"<ol> <li>Check the specification</li> <li>Review error logs</li> <li>Verify dependencies</li> <li>Test in isolation</li> <li>Ask for help if stuck</li> </ol>"},{"location":"specs/implementation/#resources","title":"Resources","text":"<ul> <li>Architecture Overview</li> <li>Development Setup</li> <li>Testing Guide</li> <li>Deployment Guide</li> </ul> <p>Remember</p> <p>A good implementation follows the specification closely but remains flexible enough to handle real-world requirements.</p>"},{"location":"specs/kaut-apps-repository/","title":"kaut-apps Repository Structure","text":""},{"location":"specs/kaut-apps-repository/#overview","title":"Overview","text":"<p>Consolidate all kaut.to applications into a single monorepo for easier management, consistent deployment, and shared utilities.</p>"},{"location":"specs/kaut-apps-repository/#repository-githubcomjkauttokaut-apps","title":"Repository: github.com/jkautto/kaut-apps","text":""},{"location":"specs/kaut-apps-repository/#structure","title":"Structure","text":"<pre><code>kaut-apps/\n\u251c\u2500\u2500 README.md                    # Main documentation\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u251c\u2500\u2500 deploy-all.yml      # Deploy all apps\n\u2502   \u2502   \u251c\u2500\u2500 deploy-pastebin.yml # Deploy pastebin only\n\u2502   \u2502   \u251c\u2500\u2500 deploy-tasks.yml    # Deploy tasks only\n\u2502   \u2502   \u2514\u2500\u2500 test.yml            # Run all tests\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 shared/                      # Shared utilities\n\u2502   \u251c\u2500\u2500 auth/                   # Common auth logic\n\u2502   \u251c\u2500\u2500 models/                 # Shared data models\n\u2502   \u2514\u2500\u2500 utils/                  # Helper functions\n\u251c\u2500\u2500 pastebin/                   # pb.kaut.to\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 tests/\n\u251c\u2500\u2500 tasks/                      # task.kaut.to\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 backend/\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 frontend/\n\u2502   \u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2502   \u251c\u2500\u2500 app.js\n\u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 tests/\n\u251c\u2500\u2500 auth/                       # auth.kaut.to\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u2514\u2500\u2500 templates/\n\u251c\u2500\u2500 browser-test/               # test.kaut.to\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 toolkit/\n\u2514\u2500\u2500 scripts/                    # Deployment &amp; maintenance\n    \u251c\u2500\u2500 deploy.sh\n    \u251c\u2500\u2500 backup.sh\n    \u2514\u2500\u2500 health-check.sh\n</code></pre>"},{"location":"specs/kaut-apps-repository/#benefits","title":"Benefits","text":""},{"location":"specs/kaut-apps-repository/#1-unified-management","title":"1. Unified Management","text":"<ul> <li>Single repository to maintain</li> <li>Consistent versioning</li> <li>Shared dependencies</li> <li>Common CI/CD pipelines</li> </ul>"},{"location":"specs/kaut-apps-repository/#2-code-reuse","title":"2. Code Reuse","text":"<ul> <li>Shared authentication logic</li> <li>Common utilities</li> <li>Consistent API patterns</li> <li>Unified documentation</li> </ul>"},{"location":"specs/kaut-apps-repository/#3-deployment-simplification","title":"3. Deployment Simplification","text":"<ul> <li>One repository to deploy from</li> <li>Atomic deployments possible</li> <li>Rollback entire system</li> <li>Environment consistency</li> </ul>"},{"location":"specs/kaut-apps-repository/#4-development-efficiency","title":"4. Development Efficiency","text":"<ul> <li>Single clone for all apps</li> <li>Cross-app refactoring easier</li> <li>Shared development environment</li> <li>Consistent coding standards</li> </ul>"},{"location":"specs/kaut-apps-repository/#migration-plan","title":"Migration Plan","text":""},{"location":"specs/kaut-apps-repository/#phase-1-repository-creation","title":"Phase 1: Repository Creation","text":"<pre><code># Create new repository\ngh repo create jkautto/kaut-apps --private\n\n# Clone and setup\ngit clone https://github.com/jkautto/kaut-apps.git\ncd kaut-apps\n\n# Create structure\nmkdir -p {pastebin,tasks,auth,browser-test,shared,scripts}\n</code></pre>"},{"location":"specs/kaut-apps-repository/#phase-2-pastebin-migration","title":"Phase 2: Pastebin Migration","text":"<pre><code># Copy pastebin files\ncp -r /srv/apps/pastebin/* ./pastebin/\n\n# Remove old symlinks/references\n# Update imports to use shared utilities\n\n# Commit\ngit add pastebin/\ngit commit -m \"Migrate pastebin app from /srv/apps\"\n</code></pre>"},{"location":"specs/kaut-apps-repository/#phase-3-add-new-apps","title":"Phase 3: Add New Apps","text":"<pre><code># Create tasks app structure\nmkdir -p tasks/{backend,frontend,tests}\n\n# Copy existing task files\ncp /var/www/kaut.to/tasks/* ./tasks/frontend/\n\n# Develop backend\n# ... implementation ...\n</code></pre>"},{"location":"specs/kaut-apps-repository/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"specs/kaut-apps-repository/#local-development","title":"Local Development","text":"<pre><code># Run all apps locally\n./scripts/run-local.sh\n\n# Run specific app\ncd pastebin &amp;&amp; python3 app.py\n</code></pre>"},{"location":"specs/kaut-apps-repository/#production-deployment","title":"Production Deployment","text":"<pre><code># Deploy all apps\n./scripts/deploy.sh all\n\n# Deploy specific app\n./scripts/deploy.sh pastebin\n\n# Health check\n./scripts/health-check.sh\n</code></pre>"},{"location":"specs/kaut-apps-repository/#service-management","title":"Service Management","text":"<p>Each app has its own systemd service: - <code>kaut-pastebin.service</code> - <code>kaut-tasks.service</code> - <code>kaut-auth.service</code> - <code>kaut-browser-test.service</code></p>"},{"location":"specs/kaut-apps-repository/#github-actions","title":"GitHub Actions","text":""},{"location":"specs/kaut-apps-repository/#automated-deployment","title":"Automated Deployment","text":"<pre><code># .github/workflows/deploy-all.yml\nname: Deploy All Apps\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy to server\n        run: |\n          ssh joni@kaut.to 'cd /srv/apps &amp;&amp; ./update-from-github.sh'\n</code></pre>"},{"location":"specs/kaut-apps-repository/#best-practices","title":"Best Practices","text":"<ol> <li>Consistent Structure: Each app follows same layout</li> <li>Shared Standards: Common linting, formatting</li> <li>Documentation: Each app has its own README</li> <li>Testing: Unified test suite</li> <li>Versioning: Semantic versioning for releases</li> </ol>"},{"location":"specs/kaut-apps-repository/#future-additions","title":"Future Additions","text":"<p>Planned apps for the monorepo: - <code>notes/</code> - note.kaut.to (simple notes) - <code>files/</code> - files.kaut.to (file manager) - <code>api/</code> - api.kaut.to (unified API gateway) - <code>dashboard/</code> - dash.kaut.to (system dashboard)</p> <p>This structure provides a scalable foundation for all kaut.to applications</p>"},{"location":"specs/kaut-pastebin/","title":"Kaut.to Pastebin v1.0 Specification","text":""},{"location":"specs/kaut-pastebin/#overview","title":"Overview","text":"<p>A simple, internal pastebin tool for uploading and sharing files between Joni, DAI, and PAI. Accessible at https://kaut.to/pb with HTTP basic auth.</p>"},{"location":"specs/kaut-pastebin/#technical-stack-decision","title":"Technical Stack Decision","text":"<p>After researching various approaches, I've chosen: - Backend: Flask (simpler than FastAPI for this use case, plenty of examples) - Frontend: Vanilla JS with Dropzone.js for drag &amp; drop - Storage: File system with JSON metadata (simple for MVP) - Server: Gunicorn behind nginx proxy</p>"},{"location":"specs/kaut-pastebin/#architecture","title":"Architecture","text":""},{"location":"specs/kaut-pastebin/#directory-structure","title":"Directory Structure","text":"<pre><code>/var/www/kaut.to/pb/\n\u251c\u2500\u2500 app.py                 # Main Flask application\n\u251c\u2500\u2500 requirements.txt       # Python dependencies\n\u251c\u2500\u2500 config.py             # Configuration settings\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html        # Main upload interface\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 upload.js     # Drag/drop/paste logic\n\u251c\u2500\u2500 uploads/              # File storage\n\u2502   \u2514\u2500\u2500 2025/\n\u2502       \u2514\u2500\u2500 01/\n\u2502           \u2514\u2500\u2500 12/\n\u2502               \u2514\u2500\u2500 original_filename.ext\n\u251c\u2500\u2500 thumbnails/           # Generated thumbnails\n\u2514\u2500\u2500 metadata.json         # File metadata storage\n</code></pre>"},{"location":"specs/kaut-pastebin/#core-features-v10","title":"Core Features (v1.0)","text":""},{"location":"specs/kaut-pastebin/#1-file-upload","title":"1. File Upload","text":"<ul> <li>Methods: Drag &amp; drop, click to browse, clipboard paste (Cmd+V)</li> <li>Size Limit: 500MB max, warning at 50MB</li> <li>File Types: Images (png, jpg, gif, webp), documents (pdf, txt), archives (zip)</li> <li>Storage: Original filenames in date-based folders</li> </ul>"},{"location":"specs/kaut-pastebin/#2-file-display","title":"2. File Display","text":"<ul> <li>List: Last 10 uploaded files</li> <li>Info: Filename, upload time, file size</li> <li>URLs: Internal path and public URL</li> <li>Actions: Copy URL buttons for both paths</li> </ul>"},{"location":"specs/kaut-pastebin/#3-auto-delete","title":"3. Auto-Delete","text":"<ul> <li>Files older than 3 days are automatically deleted</li> <li>Runs via cron job every hour</li> </ul>"},{"location":"specs/kaut-pastebin/#4-security","title":"4. Security","text":"<ul> <li>HTTP Basic Auth (joni:Penacova)</li> <li>Files served through Flask (auth protected)</li> <li>No file type validation (internal tool)</li> </ul>"},{"location":"specs/kaut-pastebin/#implementation-plan","title":"Implementation Plan","text":""},{"location":"specs/kaut-pastebin/#backend-apppy","title":"Backend (app.py)","text":"<pre><code>from flask import Flask, render_template, request, jsonify, send_file\nfrom werkzeug.utils import secure_filename\nimport os\nimport json\nimport datetime\nfrom pathlib import Path\n\napp = Flask(__name__)\n\n# Configuration\nUPLOAD_FOLDER = '/var/www/kaut.to/pb/uploads'\nTHUMB_FOLDER = '/var/www/kaut.to/pb/thumbnails'\nMETADATA_FILE = '/var/www/kaut.to/pb/metadata.json'\nMAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB\nWARNING_SIZE = 50 * 1024 * 1024    # 50MB\n\n@app.route('/')\ndef index():\n    \"\"\"Main upload interface\"\"\"\n    files = get_recent_files(10)\n    return render_template('index.html', files=files)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    \"\"\"Handle file upload\"\"\"\n    # Implementation details in actual code\n\n@app.route('/files/&lt;path:filepath&gt;')\ndef serve_file(filepath):\n    \"\"\"Serve uploaded files\"\"\"\n    # Implementation details in actual code\n\n@app.route('/api/recent')\ndef api_recent():\n    \"\"\"API endpoint for recent files\"\"\"\n    return jsonify(get_recent_files(10))\n</code></pre>"},{"location":"specs/kaut-pastebin/#frontend-indexhtml","title":"Frontend (index.html)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Kaut.to Pastebin&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/dropzone.min.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"/static/css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Kaut.to Pastebin&lt;/h1&gt;\n\n        &lt;!-- Upload Area --&gt;\n        &lt;div id=\"dropzone\" class=\"dropzone\"&gt;\n            &lt;div class=\"dz-message\"&gt;\n                Drop files here, click to browse, or paste with Cmd+V\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Recent Files --&gt;\n        &lt;div class=\"recent-files\"&gt;\n            &lt;h2&gt;Recent Files&lt;/h2&gt;\n            &lt;table id=\"file-list\"&gt;\n                &lt;!-- Populated by JavaScript --&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/dropzone.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/static/js/upload.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"specs/kaut-pastebin/#javascript-uploadjs","title":"JavaScript (upload.js)","text":"<p>Key features: - Dropzone configuration - Clipboard paste handler - Copy to clipboard functionality - File list updates</p>"},{"location":"specs/kaut-pastebin/#auto-delete-script-cleanuppy","title":"Auto-Delete Script (cleanup.py)","text":"<pre><code>#!/usr/bin/env python3\nimport os\nimport time\nfrom datetime import datetime, timedelta\nimport json\n\nDELETE_AFTER_DAYS = 3\n\ndef cleanup_old_files():\n    \"\"\"Delete files older than DELETE_AFTER_DAYS\"\"\"\n    # Implementation details in actual code\n</code></pre>"},{"location":"specs/kaut-pastebin/#nginx-configuration","title":"Nginx Configuration","text":"<pre><code>location /pb {\n    auth_basic \"Pastebin Access\";\n    auth_basic_user_file /etc/nginx/auth/.htpasswd;\n\n    proxy_pass http://127.0.0.1:8090;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $host;\n\n    # Large file support\n    client_max_body_size 500M;\n    proxy_read_timeout 300s;\n}\n</code></pre>"},{"location":"specs/kaut-pastebin/#url-structure","title":"URL Structure","text":"<ul> <li>Upload Interface: https://kaut.to/pb/</li> <li>File Access: https://kaut.to/pb/files/2025/01/12/filename.ext</li> <li>API Recent: https://kaut.to/pb/api/recent</li> </ul>"},{"location":"specs/kaut-pastebin/#metadata-structure","title":"Metadata Structure","text":"<pre><code>{\n  \"files\": [\n    {\n      \"id\": \"abc123\",\n      \"filename\": \"screenshot.png\",\n      \"path\": \"2025/01/12/screenshot.png\",\n      \"size\": 1048576,\n      \"uploaded\": \"2025-01-12T10:30:00Z\",\n      \"mime_type\": \"image/png\"\n    }\n  ]\n}\n</code></pre>"},{"location":"specs/kaut-pastebin/#integration-with-jtools","title":"Integration with jtools","text":"<p>Update ft.py and screenshot.py: <pre><code># Replace pictool.combot.dev with kaut.to/pb\nself.url = \"https://kaut.to/pb/upload\"\n</code></pre></p>"},{"location":"specs/kaut-pastebin/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Create directory structure</li> <li>Install Flask app with dependencies</li> <li>Configure Gunicorn service</li> <li>Set up nginx proxy</li> <li>Add cleanup cron job</li> <li>Update jtools integration</li> </ol>"},{"location":"specs/kaut-pastebin/#success-criteria","title":"Success Criteria","text":"<ul> <li> Files can be uploaded via drag &amp; drop</li> <li> Clipboard paste works (Cmd+V)</li> <li> Last 10 files are displayed</li> <li> Copy URL buttons work</li> <li> Files auto-delete after 3 days</li> <li> jtools integration works</li> <li> HTTP auth protects access</li> </ul>"},{"location":"specs/kaut-pastebin/#future-enhancements-v20","title":"Future Enhancements (v2.0)","text":"<ul> <li>Public/private file toggle</li> <li>Search functionality</li> <li>File type icons</li> <li>Syntax highlighting for code</li> <li>ShareX custom uploader support</li> <li>API tokens for programmatic access</li> </ul>"},{"location":"specs/mkdocs-migration-plan/","title":"MkDocs Migration Plan - Updated Status","text":"<p>Version: 1.1 Date: 2025-07-17 Status: Phase 2 Complete, Phase 3 Ready</p>"},{"location":"specs/mkdocs-migration-plan/#overall-progress-40-complete","title":"Overall Progress: 40% Complete","text":""},{"location":"specs/mkdocs-migration-plan/#phase-1-repository-cleanup-complete","title":"\u2705 Phase 1: Repository Cleanup (COMPLETE)","text":"<ul> <li>Removed <code>/srv/.git</code> </li> <li>Created <code>https://github.com/jkautto/apps</code></li> <li>Initialized apps repository</li> <li>Cleaned up app subdirectory git files</li> </ul>"},{"location":"specs/mkdocs-migration-plan/#phase-2-mkdocs-setup-complete","title":"\u2705 Phase 2: MkDocs Setup (COMPLETE)","text":"<ul> <li>Installed MkDocs + Material theme</li> <li>Created comprehensive configuration</li> <li>Built initial documentation structure</li> <li>Created homepage, architecture, and getting started pages</li> </ul>"},{"location":"specs/mkdocs-migration-plan/#phase-3-nginx-configuration-90-one-line-fix-needed","title":"\ud83d\udd04 Phase 3: nginx Configuration (90% - One Line Fix Needed)","text":"<ul> <li>SSL certificate updated \u2705</li> <li>Configuration file created \u2705</li> <li>FIX NEEDED: Line 15 in <code>/etc/nginx/sites-available/docs.kaut.to</code> <pre><code>ssl_ciphers HIGH:!aNULL:!MD5;  # Remove backslashes\n</code></pre></li> </ul>"},{"location":"specs/mkdocs-migration-plan/#phase-4-documentation-migration-not-started","title":"\ud83d\udccb Phase 4: Documentation Migration (NOT STARTED)","text":"<p>Priority order for migration: 1. CAG Files (5 files)    - <code>/srv/CAG/*.md</code>    - Critical system knowledge</p> <ol> <li>Core Documentation (~31 files)</li> <li><code>/srv/docs/guides/</code></li> <li><code>/srv/docs/operations/</code></li> <li> <p><code>/srv/docs/troubleshooting/</code></p> </li> <li> <p>Specifications (~32 files)</p> </li> <li><code>/srv/specs/</code> (active specs only)</li> <li> <p>Archive older specs</p> </li> <li> <p>Context Library (~19 files)</p> </li> <li><code>/srv/context/current/</code></li> <li> <p><code>/srv/context/development/</code></p> </li> <li> <p>PAI Documentation (~50 files)</p> </li> <li><code>/srv/pai/docs/</code></li> </ol>"},{"location":"specs/mkdocs-migration-plan/#phase-5-content-optimization-not-started","title":"\ud83d\udcdd Phase 5: Content Optimization (NOT STARTED)","text":"<p>For each document: - Add frontmatter metadata - Fix internal links - Standardize formatting - Remove redundancy - Archive outdated content</p>"},{"location":"specs/mkdocs-migration-plan/#phase-6-deployment-ready","title":"\ud83d\ude80 Phase 6: Deployment (READY)","text":"<p>Once nginx is fixed: <pre><code>cd /srv/apps/docs\nsource venv/bin/activate\nmkdocs build\n</code></pre></p>"},{"location":"specs/mkdocs-migration-plan/#phase-7-git-workflow-pending","title":"\ud83d\udd04 Phase 7: Git Workflow (PENDING)","text":"<ul> <li>Initial commit ready</li> <li>Need to push to GitHub</li> <li>Set up branches per workflow guide</li> </ul>"},{"location":"specs/mkdocs-migration-plan/#phase-8-ai-integration-future","title":"\ud83e\udd16 Phase 8: AI Integration (FUTURE)","text":"<ul> <li>Create update endpoints</li> <li>Implement llms.txt</li> <li>Add programmatic access</li> </ul>"},{"location":"specs/mkdocs-migration-plan/#time-estimate-to-completion","title":"Time Estimate to Completion","text":"Phase Status Time Remaining nginx Fix 90% 5 minutes Build &amp; Deploy Ready 10 minutes Git Push Ready 5 minutes Doc Migration 0% 3-4 hours Optimization 0% 2-3 hours AI Integration 0% 2 hours Total 40% ~8 hours"},{"location":"specs/mkdocs-migration-plan/#critical-path-items","title":"Critical Path Items","text":"<ol> <li>Fix nginx cipher string (5 min)</li> <li>Build and test site (10 min)</li> <li>Push to GitHub (5 min)</li> <li>Begin doc migration (start with CAG)</li> </ol>"},{"location":"specs/mkdocs-migration-plan/#repository-status","title":"Repository Status","text":""},{"location":"specs/mkdocs-migration-plan/#srvapps-structure","title":"<code>/srv/apps/</code> Structure","text":"<pre><code>apps/\n\u251c\u2500\u2500 .git/           \u2705 Initialized\n\u251c\u2500\u2500 .gitignore      \u2705 Comprehensive\n\u251c\u2500\u2500 README.md       \u2705 Complete\n\u251c\u2500\u2500 auth/           \u2705 Existing app\n\u251c\u2500\u2500 browser-test/   \u2705 Existing app\n\u251c\u2500\u2500 pastebin/       \u2705 Cleaned (.git removed)\n\u251c\u2500\u2500 shifts/         \u2705 Existing app\n\u2514\u2500\u2500 docs/           \u2705 MkDocs ready\n    \u251c\u2500\u2500 mkdocs.yml  \u2705 Configured\n    \u251c\u2500\u2500 docs/       \u2705 Initial content\n    \u251c\u2500\u2500 venv/       \u2705 Python environment\n    \u2514\u2500\u2500 site/       \ud83d\udd04 Pending build\n</code></pre>"},{"location":"specs/mkdocs-migration-plan/#key-decisions-made","title":"Key Decisions Made","text":"<ol> <li>URL: Using https://docs.kaut.to (not path-based)</li> <li>Auth: Basic auth with existing .htpasswd</li> <li>Theme: Material with dark mode</li> <li>Plugins: Search, minify, git dates</li> <li>Structure: Seven main sections</li> </ol>"},{"location":"specs/mkdocs-migration-plan/#success-criteria-checklist","title":"Success Criteria Checklist","text":"<ul> <li> Clean repository structure</li> <li> MkDocs configuration complete</li> <li> nginx serving docs.kaut.to</li> <li> Documentation migrated</li> <li> Search working</li> <li> GitHub repository synced</li> <li> AI can update docs</li> </ul>"},{"location":"specs/mkdocs-migration-plan/#next-session-priority","title":"Next Session Priority","text":"<ol> <li>Fix nginx (remove backslashes from cipher string)</li> <li>Build MkDocs (<code>mkdocs build</code>)</li> <li>Test https://docs.kaut.to</li> <li>Commit and push to GitHub</li> <li>Start migrating CAG documentation</li> </ol> <p>The foundation is complete - just needs the nginx fix and content migration!</p>"},{"location":"specs/pai-web-dashboard/","title":"PAI Web Dashboard Specification v0.1","text":""},{"location":"specs/pai-web-dashboard/#modular-personal-ai-assistant-interface-for-kautto","title":"Modular Personal AI Assistant Interface for kaut.to","text":""},{"location":"specs/pai-web-dashboard/#executive-summary","title":"Executive Summary","text":"<p>This specification outlines the development of a modular web dashboard for PAI (Personal AI Assistant) at kaut.to. The system will start with a core chat interface and progressively add panels for email, calendar, tasks, and notes management. Built with NiceGUI for rapid development and easy modularity, it will integrate with the existing PAI Claude CLI backend.</p>"},{"location":"specs/pai-web-dashboard/#vision-goals","title":"Vision &amp; Goals","text":""},{"location":"specs/pai-web-dashboard/#primary-goal","title":"Primary Goal","text":"<p>Create a unified web interface where users can interact with their AI assistant and view all personal data streams in one compact, mobile-friendly dashboard.</p>"},{"location":"specs/pai-web-dashboard/#design-philosophy","title":"Design Philosophy","text":"<ul> <li>Apple-inspired but compact: Clean aesthetics with smaller fonts and denser information display</li> <li>Progressive disclosure: Start with chat, add features gradually</li> <li>Mobile-first: Optimized for iPhone 16 Pro Max (430\u00d7932px viewport)</li> <li>Context-aware: Leverages shared context library between DAI/PAI</li> <li>Real-time: Live updates across all panels</li> </ul>"},{"location":"specs/pai-web-dashboard/#technical-architecture","title":"Technical Architecture","text":""},{"location":"specs/pai-web-dashboard/#framework-choice-nicegui","title":"Framework Choice: NiceGUI","text":"<p>Rationale: - Pure Python (no JavaScript required) - Built-in components for chat, file upload, real-time updates - Easy panel/layout management - WebSocket support out of the box - Minimal code for maximum functionality</p>"},{"location":"specs/pai-web-dashboard/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   nginx (kaut.to)                   \u2502\n\u2502                  HTTP Basic Auth                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          NiceGUI Web Server (port 8080)            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Chat   \u2502  Email  \u2502 Calendar \u2502   Tasks    \u2502    \u2502\n\u2502  \u2502  Panel  \u2502 Summary \u2502   View   \u2502 Management \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502       \u2502         \u2502         \u2502           \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502         \u2502         \u2502           \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              PAI Backend Services                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Claude CLI   \u2502 \u2502   Toolkit   \u2502 \u2502 Intel Stack\u2502  \u2502\n\u2502  \u2502 with -c flag \u2502 \u2502   Modules   \u2502 \u2502 Collectors \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"specs/pai-web-dashboard/#implementation-phases","title":"Implementation Phases","text":""},{"location":"specs/pai-web-dashboard/#phase-1-core-chat-interface-week-1","title":"Phase 1: Core Chat Interface (Week 1)","text":"<p>Features: - Single conversation view with Claude - File/image upload support - Voice input (using browser API) - Message history with scroll - Typing indicators - Real-time streaming responses</p> <p>Technical Details: <pre><code># Core structure\napp = NiceGUI()\n\n# Layout: Sidebar (collapsed on mobile) + Main chat area\n# Chat uses subprocess to call: claude -c -p \"user message\"\n# WebSocket for streaming responses\n# SQLite for message history\n</code></pre></p>"},{"location":"specs/pai-web-dashboard/#phase-2-multi-panel-foundation-week-2","title":"Phase 2: Multi-Panel Foundation (Week 2)","text":"<p>Features: - Collapsible sidebar navigation - Panel switching system - Email summary panel (placeholder) - Calendar view panel (placeholder) - Tasks panel (placeholder) - Settings panel</p> <p>Layout Mockup: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2630 AI\u2502  Chat with PAI                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2524 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \ud83d\udcac  \u2502 \u2502 How can I help you today?  \u2502 \u2502\n\u2502 \ud83d\udce7  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \ud83d\udcc5  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2713   \u2502 \u2502 [Type message...] \ud83c\udfa4 \ud83d\udcce \u27a4  \u2502 \u2502\n\u2502 \u2699\ufe0f  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"specs/pai-web-dashboard/#phase-3-email-integration-week-3","title":"Phase 3: Email Integration (Week 3)","text":"<p>Features: - Live email summaries from monitoring - Unread count badges - Priority inbox view - Quick actions (archive, reply via AI) - Search functionality</p> <p>Integration: - Reads from <code>/srv/pai/intelligence_stack/data/</code> - Updates every 10 minutes (matching monitoring schedule) - Claude analyzes importance</p>"},{"location":"specs/pai-web-dashboard/#phase-4-calendar-integration-week-4","title":"Phase 4: Calendar Integration (Week 4)","text":"<p>Features: - Today/Week/Month views - Conflict detection highlights - Meeting preparation alerts - Quick event creation - Finnish holidays display</p> <p>Integration: - Uses calendar_collector.py data - Real-time updates via WebSocket - Morning brief integration</p>"},{"location":"specs/pai-web-dashboard/#phase-5-task-management-week-5","title":"Phase 5: Task Management (Week 5)","text":"<p>Features: - Task lists with priorities - Drag-and-drop reordering - Quick add with natural language - Due date tracking - Project grouping</p> <p>Integration: - Syncs with Google Tasks via gtask.py - Stores in shared task format</p>"},{"location":"specs/pai-web-dashboard/#uiux-specifications","title":"UI/UX Specifications","text":""},{"location":"specs/pai-web-dashboard/#design-system","title":"Design System","text":"<pre><code>/* Typography */\n--font-primary: -apple-system, SF Pro Text, sans-serif;\n--font-size-base: 14px; /* Smaller than typical */\n--font-size-small: 12px;\n--line-height-compact: 1.3;\n\n/* Colors */\n--color-primary: #007AFF; /* Apple blue */\n--color-background: #FFFFFF;\n--color-surface: #F2F2F7;\n--color-text: #1C1C1E;\n--color-text-secondary: #8E8E93;\n\n/* Spacing */\n--spacing-xs: 4px;\n--spacing-sm: 8px;\n--spacing-md: 12px;\n--spacing-lg: 16px;\n\n/* Components */\n--border-radius: 8px;\n--shadow-sm: 0 1px 3px rgba(0,0,0,0.1);\n</code></pre>"},{"location":"specs/pai-web-dashboard/#mobile-responsiveness","title":"Mobile Responsiveness","text":"<ul> <li>Breakpoints: </li> <li>Mobile: &lt; 768px (sidebar hidden, swipe to reveal)</li> <li>Tablet: 768-1024px (sidebar collapsible)</li> <li>Desktop: &gt; 1024px (sidebar always visible)</li> <li>Touch targets: Minimum 44\u00d744px</li> <li>Gestures: Swipe for panel navigation on mobile</li> </ul>"},{"location":"specs/pai-web-dashboard/#accessibility","title":"Accessibility","text":"<ul> <li>ARIA labels for all interactive elements</li> <li>Keyboard navigation support</li> <li>High contrast mode support</li> <li>Screen reader optimized</li> </ul>"},{"location":"specs/pai-web-dashboard/#integration-points","title":"Integration Points","text":""},{"location":"specs/pai-web-dashboard/#claude-cli-integration","title":"Claude CLI Integration","text":"<pre><code>import subprocess\nimport asyncio\n\nasync def send_to_claude(message: str, context: str = None):\n    \"\"\"Send message to Claude CLI with persistent context\"\"\"\n    cmd = ['claude', '-c', '-p', message]\n    if context:\n        cmd.extend(['--context', context])\n\n    process = await asyncio.create_subprocess_exec(\n        *cmd,\n        stdout=asyncio.subprocess.PIPE,\n        stderr=asyncio.subprocess.PIPE\n    )\n\n    # Stream response back via WebSocket\n    async for line in process.stdout:\n        yield line.decode().strip()\n</code></pre>"},{"location":"specs/pai-web-dashboard/#context-library-integration","title":"Context Library Integration","text":"<pre><code># Shared context path\nCONTEXT_PATH = '/srv/context/current/'\n\n# Load user facts for personalization\nuser_facts = load_json(f'{CONTEXT_PATH}/user_facts.json')\n\n# Load system facts for capabilities\nsystem_facts = load_json(f'{CONTEXT_PATH}/system_facts.json')\n\n# Update context based on interactions\nupdate_context_library(conversation_id, new_facts)\n</code></pre>"},{"location":"specs/pai-web-dashboard/#authentication","title":"Authentication","text":"<ul> <li>Leverage existing nginx HTTP Basic Auth</li> <li>No additional auth layer needed initially</li> <li>Future: OAuth2 integration for multi-user</li> </ul>"},{"location":"specs/pai-web-dashboard/#file-structure","title":"File Structure","text":"<pre><code>/srv/pai/web/\n\u251c\u2500\u2500 main.py              # NiceGUI application entry\n\u251c\u2500\u2500 panels/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 chat.py         # Chat interface panel\n\u2502   \u251c\u2500\u2500 email.py        # Email summary panel\n\u2502   \u251c\u2500\u2500 calendar.py     # Calendar view panel\n\u2502   \u251c\u2500\u2500 tasks.py        # Task management panel\n\u2502   \u2514\u2500\u2500 settings.py     # Settings panel\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 claude_service.py    # Claude CLI wrapper\n\u2502   \u251c\u2500\u2500 context_service.py   # Context library interface\n\u2502   \u2514\u2500\u2500 data_service.py      # Data collectors interface\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 custom.css  # Custom styles\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 voice.js    # Voice input handling\n\u251c\u2500\u2500 templates/           # If needed for custom components\n\u2514\u2500\u2500 requirements.txt     # Dependencies\n</code></pre>"},{"location":"specs/pai-web-dashboard/#development-timeline","title":"Development Timeline","text":""},{"location":"specs/pai-web-dashboard/#week-1-foundation","title":"Week 1: Foundation","text":"<ul> <li> Setup NiceGUI project structure</li> <li> Implement basic chat interface</li> <li> Add Claude CLI integration</li> <li> File/image upload support</li> <li> Deploy behind nginx</li> </ul>"},{"location":"specs/pai-web-dashboard/#week-2-multi-panel-system","title":"Week 2: Multi-Panel System","text":"<ul> <li> Create panel navigation</li> <li> Add placeholder panels</li> <li> Implement panel state management</li> <li> Mobile swipe gestures</li> <li> Settings panel</li> </ul>"},{"location":"specs/pai-web-dashboard/#week-3-5-feature-panels","title":"Week 3-5: Feature Panels","text":"<ul> <li> Email integration and UI</li> <li> Calendar integration and views</li> <li> Task management system</li> <li> Real-time updates</li> <li> Performance optimization</li> </ul>"},{"location":"specs/pai-web-dashboard/#week-6-polish-launch","title":"Week 6: Polish &amp; Launch","text":"<ul> <li> UI refinements</li> <li> Performance testing</li> <li> Documentation</li> <li> Deployment optimization</li> <li> User feedback integration</li> </ul>"},{"location":"specs/pai-web-dashboard/#performance-considerations","title":"Performance Considerations","text":""},{"location":"specs/pai-web-dashboard/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Lazy loading: Load panels only when accessed</li> <li>Caching: Cache frequently accessed data</li> <li>Debouncing: Limit API calls during typing</li> <li>Virtual scrolling: For long lists</li> <li>WebSocket connection pooling: Reuse connections</li> </ol>"},{"location":"specs/pai-web-dashboard/#monitoring","title":"Monitoring","text":"<ul> <li>Track API usage per panel</li> <li>Monitor WebSocket connection health</li> <li>Log panel load times</li> <li>Track user interactions for UX improvements</li> </ul>"},{"location":"specs/pai-web-dashboard/#security-measures","title":"Security Measures","text":"<ol> <li>Input sanitization: Clean all user inputs</li> <li>Rate limiting: Prevent API abuse</li> <li>Content Security Policy: Restrict resource loading</li> <li>Session management: Timeout after inactivity</li> <li>Audit logging: Track all actions</li> </ol>"},{"location":"specs/pai-web-dashboard/#future-enhancements","title":"Future Enhancements","text":""},{"location":"specs/pai-web-dashboard/#version-02","title":"Version 0.2","text":"<ul> <li>Multi-conversation support</li> <li>Conversation search</li> <li>Export capabilities</li> <li>Keyboard shortcuts</li> <li>Dark mode</li> </ul>"},{"location":"specs/pai-web-dashboard/#version-03","title":"Version 0.3","text":"<ul> <li>Plugin system for custom panels</li> <li>API for third-party integrations</li> <li>Advanced context management</li> <li>Team collaboration features</li> <li>Mobile app wrapper</li> </ul>"},{"location":"specs/pai-web-dashboard/#success-metrics","title":"Success Metrics","text":"<ol> <li>Page load time: &lt; 1 second</li> <li>Time to first interaction: &lt; 2 seconds</li> <li>Mobile usability score: &gt; 95</li> <li>User engagement: &gt; 5 min average session</li> <li>API efficiency: &lt; 1000 tokens per interaction</li> </ol>"},{"location":"specs/pai-web-dashboard/#conclusion","title":"Conclusion","text":"<p>This modular approach allows PAI to start simple with a chat interface while building toward a comprehensive personal AI dashboard. NiceGUI provides the perfect balance of simplicity and capability for rapid development while maintaining the flexibility to grow into a full-featured system.</p>"},{"location":"specs/task-v2/","title":"task.kaut.to v2.0 Executive Summary","text":""},{"location":"specs/task-v2/#what-were-building","title":"What We're Building","text":"<p>Transform the static task manager at kaut.to/tasks into a modern multi-account Google Tasks application at task.kaut.to that aggregates tasks from all three accounts (personal, xwander, accolade).</p>"},{"location":"specs/task-v2/#key-decisions","title":"Key Decisions","text":""},{"location":"specs/task-v2/#1-multi-account-architecture","title":"1. Multi-Account Architecture","text":"<ul> <li>Aggregate tasks from: joni.kautto@gmail.com, joni@xwander.fi, joni@accolade.fi</li> <li>Color-coded account indicators</li> <li>Unified view with account filtering</li> <li>Account-aware task creation</li> </ul>"},{"location":"specs/task-v2/#2-repository-structure","title":"2. Repository Structure","text":"<ul> <li>New monorepo: github.com/jkautto/kaut-apps</li> <li>Contains: pastebin, tasks, auth, browser-test</li> <li>Shared utilities and consistent deployment</li> <li>Individual app independence maintained</li> </ul>"},{"location":"specs/task-v2/#3-technology-stack","title":"3. Technology Stack","text":"<ul> <li>Backend: FastAPI (consistency with other services)</li> <li>Frontend: Progressive enhancement of existing PWA</li> <li>Auth: OAuth2 with existing Google tokens</li> <li>Database: SQLite for caching/settings</li> </ul>"},{"location":"specs/task-v2/#4-self-documenting-api","title":"4. Self-Documenting API","text":"<p>Following established pattern: - <code>/api</code> - Human-readable docs - <code>/api-spec.json</code> - Machine-readable spec - <code>/health</code> - Service health check</p>"},{"location":"specs/task-v2/#implementation-timeline","title":"Implementation Timeline","text":"<p>Week 1: Foundation - Days 1-2: Create repository, migrate pastebin - Days 3-4: OAuth setup, multi-account authentication - Days 5-7: Core API development</p> <p>Week 2: Features - Days 8-9: Complete API endpoints - Days 10-11: Frontend migration - Days 12-14: Testing and deployment</p>"},{"location":"specs/task-v2/#key-features","title":"Key Features","text":""},{"location":"specs/task-v2/#mvp-must-have","title":"MVP (Must Have)","text":"<p>\u2713 Multi-account task aggregation \u2713 Account indicators in UI \u2713 Basic CRUD operations \u2713 OAuth token refresh \u2713 Self-documenting API  </p>"},{"location":"specs/task-v2/#phase-2-should-have","title":"Phase 2 (Should Have)","text":"<ul> <li>Focus mode with timer</li> <li>Advanced filtering/sorting</li> <li>Quick task entry</li> <li>Sync status indicators</li> <li>PWA offline support</li> </ul>"},{"location":"specs/task-v2/#technical-highlights","title":"Technical Highlights","text":""},{"location":"specs/task-v2/#multi-account-service","title":"Multi-Account Service","text":"<pre><code># Aggregate tasks from all accounts\nall_tasks = await task_service.get_all_tasks()\n\n# Create task in specific account\nawait task_service.create_task(\n    title=\"Review budget\",\n    account=\"xwander\"\n)\n</code></pre>"},{"location":"specs/task-v2/#frontend-integration","title":"Frontend Integration","text":"<pre><code>// Account-aware task display\n&lt;span class=\"account-dot\" style=\"background: #27ae60\"&gt;&lt;/span&gt;\n&lt;div class=\"task-title\"&gt;Review Q3 Budget&lt;/div&gt;\n&lt;div class=\"task-account\"&gt;Xwander&lt;/div&gt;\n</code></pre>"},{"location":"specs/task-v2/#deployment","title":"Deployment","text":"<ol> <li>DNS: Create A record for task.kaut.to \u2192 157.180.28.186</li> <li>Service: Run on port 8092 with systemd</li> <li>Proxy: Nginx configuration ready</li> <li>Auth: HTTP Basic (joni:Penacova)</li> </ol>"},{"location":"specs/task-v2/#success-criteria","title":"Success Criteria","text":"<ol> <li>\u2713 All three accounts accessible</li> <li>\u2713 Tasks sync in real-time</li> <li>\u2713 Account context preserved</li> <li>\u2713 API self-documented</li> <li>\u2713 PWA functionality maintained</li> </ol>"},{"location":"specs/task-v2/#next-steps","title":"Next Steps","text":"<ol> <li>Immediate: Create kaut-apps repository</li> <li>This Week: Implement core backend</li> <li>Next Week: Complete frontend migration</li> <li>Testing: Verify all account operations</li> <li>Launch: Deploy to task.kaut.to</li> </ol>"},{"location":"specs/task-v2/#risk-mitigation","title":"Risk Mitigation","text":"<ul> <li>Token Expiry: Automatic refresh implementation</li> <li>API Limits: Intelligent caching layer</li> <li>Rollback: Keep kaut.to/tasks as fallback</li> <li>Data Loss: No destructive operations without confirmation</li> </ul> <p>Bottom Line: A modern, multi-account task manager that aggregates Google Tasks from all three accounts into a unified, intelligent interface with full API access for DAI/PAI integration.</p> <p>Ready to proceed with implementation upon approval.</p>"},{"location":"specs/universal-setup/","title":"Universal Setup Script Specification v0.1","text":""},{"location":"specs/universal-setup/#overview","title":"Overview","text":"<p>A hybrid bash/AI-readable script accessible via HTTPS that sets up a complete development environment with one command.</p>"},{"location":"specs/universal-setup/#access-method","title":"Access Method","text":"<pre><code># Direct bash execution:\ncurl -s https://joni:Penacova@kaut.to/setup | bash\n\n# AI consumption:\ncurl -s https://joni:Penacova@kaut.to/setup &gt; setup.sh &amp;&amp; cat setup.sh\n</code></pre>"},{"location":"specs/universal-setup/#design-principles","title":"Design Principles","text":"<ol> <li>Single Command: One curl to get everything</li> <li>Self-Contained: All credentials and access info embedded</li> <li>Temporary Workspace: Easy cleanup with single directory</li> <li>AI-Friendly: Clear comments for AI interpretation</li> <li>Human-Executable: Valid bash script</li> </ol>"},{"location":"specs/universal-setup/#script-structure","title":"Script Structure","text":"<pre><code>#!/bin/bash\n# UNIVERSAL SETUP SCRIPT FOR JONI'S DEVELOPMENT ENVIRONMENT\n# \n# For AI Assistants: Execute each section below in order\n# For Humans: curl -s https://joni:Penacova@kaut.to/setup | bash\n#\n# This script sets up:\n# - Credentials via dotenv-vault (72+ environment variables)\n# - jtools repository (Python CLI tools)\n# - kaut-shared repository (Docker configs, standards, docs)\n# - Temporary workspace at ~/kwork/\n\n# Exit on any error\nset -e\n\necho \"\ud83d\ude80 Starting universal setup...\"\n\n# 1. CREATE WORKSPACE\n# AI: Create a temporary workspace directory\nmkdir -p ~/kwork &amp;&amp; cd ~/kwork\necho \"\u2713 Created workspace at ~/kwork\"\n\n# 2. SETUP CREDENTIALS \n# AI: Install dotenv-vault and pull all platform credentials\necho \"\ud83d\udce6 Installing dotenv-vault CLI...\"\nnpm install -g @dotenv-org/cli --silent\n\necho \"\ud83d\udd10 Setting up credential vault...\"\ncat &gt; .env.me &lt;&lt; 'EOF'\nDOTENV_ME=me_3879349a3f4afc8558ad76e354b8c3321399a5dda091361a64f4d948c2309718\nEOF\n\n# Initialize vault connection\nnpx dotenv-vault@latest new vlt_25ccece6b7add6a2f9c5ae012567f4845d73b7a6d6ab088d36accc3948dbda17 --yes\n\n# Pull all credentials\necho \"\u2b07\ufe0f  Pulling credentials...\"\nnpx dotenv-vault@latest pull\n\necho \"\u2713 Credentials available in .env ($(grep -c '^[A-Z_]*=' .env) variables)\"\n\n# 3. CLONE ESSENTIAL REPOSITORIES\n# AI: Clone the core tool repositories\necho \"\ud83d\udce5 Cloning repositories...\"\n\n# jtools - Python CLI tools\ngit clone --quiet https://github.com/jkautto/jtools.git\necho \"\u2713 jtools cloned\"\n\n# kaut-shared - Docker configs, standards, shared resources\ngit clone --quiet https://github.com/jkautto/kaut-shared.git  \necho \"\u2713 kaut-shared cloned\"\n\n# 4. SETUP ENVIRONMENT\n# AI: Configure environment for immediate use\necho \"\u2699\ufe0f  Configuring environment...\"\n\n# Add jtools to PATH for this session\nexport PATH=\"$PATH:$HOME/kwork/jtools\"\n\n# Create convenience symlinks\nln -sf ~/kwork/.env ~/.env.kwork\n\n# 5. CREATE CONTEXT FILE\n# AI: Create a context file with key information\ncat &gt; CONTEXT.md &lt;&lt; 'EOF'\n# Development Environment Context\n\n## Available Resources\n- **Credentials**: .env file with 72+ variables (via dotenv-vault)\n- **jtools**: Python CLI tools (gsheet.py, gtask.py, px.py, etc.)\n- **kaut-shared**: Docker templates, MCP architecture, standards\n\n## Key Paths\n- Workspace: ~/kwork/\n- Credentials: ~/kwork/.env\n- Tools: ~/kwork/jtools/\n- Shared Resources: ~/kwork/kaut-shared/\n\n## Common Commands\n- Google Sheets: `python3 ~/kwork/jtools/gsheet.py`\n- Perplexity Search: `python3 ~/kwork/jtools/px.py`\n- View credentials: `grep -E \"^[A-Z_]*=\" ~/kwork/.env | cut -d= -f1`\n\n## Cleanup\nWhen done: `rm -rf ~/kwork`\nEOF\n\n# 6. FINAL SUMMARY\necho \"\"\necho \"\u2705 Setup complete!\"\necho \"\"\necho \"\ud83d\udcc1 Workspace: ~/kwork/\"\necho \"\ud83d\udd11 Credentials: ~/kwork/.env ($(grep -c '^[A-Z_]*=' .env) variables)\"\necho \"\ud83d\udee0\ufe0f  Tools available in: ~/kwork/jtools/\"\necho \"\ud83d\udcda Shared resources in: ~/kwork/kaut-shared/\"\necho \"\"\necho \"\ud83e\uddf9 Cleanup when done: rm -rf ~/kwork\"\necho \"\"\n\n# For AI assistants: Setup is complete. The environment is ready for use.\n</code></pre>"},{"location":"specs/universal-setup/#implementation-steps","title":"Implementation Steps","text":"<ol> <li> <p>Create Web Endpoint <pre><code># On kaut.to server\nsudo mkdir -p /var/www/kaut.to/\nsudo vim /var/www/kaut.to/setup\n# Paste the script above\nsudo chmod 644 /var/www/kaut.to/setup\n</code></pre></p> </li> <li> <p>Configure Nginx <pre><code>location = /setup {\n    auth_basic \"Development Setup\";\n    auth_basic_user_file /etc/nginx/auth/.htpasswd;\n\n    add_header Content-Type \"text/plain; charset=utf-8\";\n    try_files /setup =404;\n}\n</code></pre></p> </li> <li> <p>Test Access <pre><code># Test authentication works\ncurl -s https://joni:Penacova@kaut.to/setup | head -20\n\n# Test full execution\ncurl -s https://joni:Penacova@kaut.to/setup | bash\n</code></pre></p> </li> </ol>"},{"location":"specs/universal-setup/#security-considerations","title":"Security Considerations","text":"<ol> <li>HTTPS Only: Enforce SSL for credential transmission</li> <li>HTTP Basic Auth: Existing .htpasswd protection</li> <li>Credential Storage: Using dotenv-vault's secure mechanism</li> <li>Temporary Workspace: Easy to remove all traces</li> </ol>"},{"location":"specs/universal-setup/#benefits","title":"Benefits","text":"<ol> <li>One Command Setup: Single curl command gets everything</li> <li>No Prerequisites: Only needs curl and npm</li> <li>AI-Friendly: Clear instructions throughout</li> <li>Human-Executable: Works as bash script</li> <li>Complete Environment: All tools and credentials ready</li> <li>Easy Cleanup: Single directory to remove</li> </ol>"},{"location":"specs/universal-setup/#future-enhancements-v02","title":"Future Enhancements (v0.2)","text":"<ul> <li>Add platform detection (Linux/Mac)</li> <li>Include PAI toolkit </li> <li>Add interactive mode for selective installation</li> <li>Create <code>kwork</code> command for quick access</li> <li>Add update mechanism</li> </ul>"},{"location":"specs/universal-setup/#usage-examples","title":"Usage Examples","text":""},{"location":"specs/universal-setup/#for-new-server-setup","title":"For New Server Setup","text":"<pre><code># SSH to new server\nssh newserver\n\n# Run setup\ncurl -s https://joni:Penacova@kaut.to/setup | bash\n\n# Start working with tools\ncd ~/kwork\npython3 jtools/px.py search \"kubernetes best practices\"\n</code></pre>"},{"location":"specs/universal-setup/#for-ai-assistant","title":"For AI Assistant","text":"<pre><code>User: Pull my development environment\n\nAI: I'll set up your development environment:\n*Executes: curl -s https://joni:Penacova@kaut.to/setup | bash*\n\nThe environment is now ready with:\n- 72+ credentials in ~/kwork/.env\n- jtools CLI tools in ~/kwork/jtools/\n- Shared resources in ~/kwork/kaut-shared/\n</code></pre>"},{"location":"specs/universal-setup/#for-temporary-work","title":"For Temporary Work","text":"<pre><code># Quick setup for debugging\ncurl -s https://joni:Penacova@kaut.to/setup | bash\ncd ~/kwork\n\n# Do work...\n\n# Clean up completely\nrm -rf ~/kwork\n</code></pre>"},{"location":"updates/2025-06-17-slack-documentation/","title":"Documentation Update: Slack Bot and Claude CLI","text":"<p>Date: 2025-06-17 Author: DAI</p>"},{"location":"updates/2025-06-17-slack-documentation/#summary","title":"Summary","text":"<p>Added comprehensive documentation for the PAI Slack Bot implementation and Claude CLI advanced features based on recent development work and discoveries.</p>"},{"location":"updates/2025-06-17-slack-documentation/#new-documentation","title":"New Documentation","text":""},{"location":"updates/2025-06-17-slack-documentation/#1-pai-slack-bot","title":"1. PAI Slack Bot","text":"<p>Complete documentation of the unified Slack bot implementation including: - Architecture overview with key components - Interactive UI features (Block Kit) - Socket Mode configuration - Claude CLI integration - Multi-channel logging system - Troubleshooting guide - Version history</p>"},{"location":"updates/2025-06-17-slack-documentation/#2-claude-cli-advanced-features","title":"2. Claude CLI Advanced Features","text":"<p>Detailed guide on using <code>--system-prompt</code> and <code>--append-system-prompt</code> flags: - Available command-line flags - PAI/DAI integration examples - Prompt engineering best practices - Performance considerations - Security guidelines</p>"},{"location":"updates/2025-06-17-slack-documentation/#3-slack-webhooks-guide","title":"3. Slack Webhooks Guide","text":"<p>Comprehensive webhook documentation covering: - Webhook URL configuration - Python and Bash implementations - Multi-channel sender utility - Message formatting options - Integration patterns with PAI systems - Testing and troubleshooting</p>"},{"location":"updates/2025-06-17-slack-documentation/#4-updated-slack-bot-recovery-playbook","title":"4. Updated Slack Bot Recovery Playbook","text":"<p>Modernized recovery procedures reflecting current implementation: - Updated for slack.py v0.3.1 - Smart startup script usage - Current file paths and process names - Modern troubleshooting steps</p>"},{"location":"updates/2025-06-17-slack-documentation/#key-technical-details-documented","title":"Key Technical Details Documented","text":""},{"location":"updates/2025-06-17-slack-documentation/#slack-bot-features","title":"Slack Bot Features","text":"<ul> <li>Response Modes: pai-channel, mentions-only, all</li> <li>UI Components: Interactive buttons and modals</li> <li>Session Management: Directory-based Claude sessions</li> <li>Process Management: Enhanced slack.sh script</li> <li>Formatting: Automatic markdown to Slack syntax conversion</li> </ul>"},{"location":"updates/2025-06-17-slack-documentation/#claude-cli-integration","title":"Claude CLI Integration","text":"<pre><code>claude -p \"prompt\" \\\n  --model sonnet \\\n  --append-system-prompt \"Format for Slack: *bold*, _italic_, :emoji:\"\n</code></pre>"},{"location":"updates/2025-06-17-slack-documentation/#webhook-patterns","title":"Webhook Patterns","text":"<pre><code># Three-channel architecture\nSLACK_PAI_WEBHOOK              # Urgent/primary\nSLACK_PAI_NOTIFICATIONS_WEBHOOK # Standard updates  \nSLACK_PAI_VERBOSE_WEBHOOK      # Debug/verbose logs\n</code></pre>"},{"location":"updates/2025-06-17-slack-documentation/#navigation-updates","title":"Navigation Updates","text":"<p>Updated mkdocs.yml to include new documentation in: - Applications section: PAI Slack Bot - Guides section: Claude CLI Advanced, Slack Webhooks - Operations section: Slack Bot Recovery (already existed, now updated)</p>"},{"location":"updates/2025-06-17-slack-documentation/#build-status","title":"Build Status","text":"<p>Documentation successfully built and deployed to https://docs.kaut.to</p>"},{"location":"updates/2025-06-17-slack-documentation/#next-steps","title":"Next Steps","text":"<ol> <li>Monitor for any additional Slack bot features that need documentation</li> <li>Add examples of custom Claude prompts for different PAI modes</li> <li>Document the Slack bot monitoring integration with Intelligence Stack</li> <li>Create troubleshooting decision tree diagram</li> </ol>"}]}